
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity$1 = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text$1(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text$1(' ');
    }
    function empty() {
        return text$1('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }
    class HtmlTag {
        constructor() {
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { stylesheet } = info;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                info.rules = {};
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        let config = fn(node, params);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity$1, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config();
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_out_transition(node, fn, params) {
        let config = fn(node, params);
        let running = true;
        let animation_name;
        const group = outros;
        group.r += 1;
        function go() {
            const { delay = 0, duration = 300, easing = identity$1, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            add_render_callback(() => dispatch(node, false, 'start'));
            loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(0, 1);
                        dispatch(node, false, 'end');
                        if (!--group.r) {
                            // this will result in `end()` being called,
                            // so we don't need to clean up here
                            run_all(group.c);
                        }
                        return false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(1 - t, t);
                    }
                }
                return running;
            });
        }
        if (is_function(config)) {
            wait().then(() => {
                // @ts-ignore
                config = config();
                go();
            });
        }
        else {
            go();
        }
        return {
            end(reset) {
                if (reset && config.tick) {
                    config.tick(1, 0);
                }
                if (running) {
                    if (animation_name)
                        delete_rule(node, animation_name);
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity$1, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity$1 } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const height = parseFloat(style.height);
        const padding_top = parseFloat(style.paddingTop);
        const padding_bottom = parseFloat(style.paddingBottom);
        const margin_top = parseFloat(style.marginTop);
        const margin_bottom = parseFloat(style.marginBottom);
        const border_top_width = parseFloat(style.borderTopWidth);
        const border_bottom_width = parseFloat(style.borderBottomWidth);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `height: ${t * height}px;` +
                `padding-top: ${t * padding_top}px;` +
                `padding-bottom: ${t * padding_bottom}px;` +
                `margin-top: ${t * margin_top}px;` +
                `margin-bottom: ${t * margin_bottom}px;` +
                `border-top-width: ${t * border_top_width}px;` +
                `border-bottom-width: ${t * border_bottom_width}px;`
        };
    }

    class InternMap extends Map {
      constructor(entries, key = keyof) {
        super();
        Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});
        if (entries != null) for (const [key, value] of entries) this.set(key, value);
      }
      get(key) {
        return super.get(intern_get(this, key));
      }
      has(key) {
        return super.has(intern_get(this, key));
      }
      set(key, value) {
        return super.set(intern_set(this, key), value);
      }
      delete(key) {
        return super.delete(intern_delete(this, key));
      }
    }

    function intern_get({_intern, _key}, value) {
      const key = _key(value);
      return _intern.has(key) ? _intern.get(key) : value;
    }

    function intern_set({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) return _intern.get(key);
      _intern.set(key, value);
      return value;
    }

    function intern_delete({_intern, _key}, value) {
      const key = _key(value);
      if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
      }
      return value;
    }

    function keyof(value) {
      return value !== null && typeof value === "object" ? value.valueOf() : value;
    }

    function identity(x) {
      return x;
    }

    function group(values, ...keys) {
      return nest(values, identity, identity, keys);
    }

    function nest(values, map, reduce, keys) {
      return (function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new InternMap();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values) {
          const key = keyof(value, ++index, values);
          const group = groups.get(key);
          if (group) group.push(value);
          else groups.set(key, [value]);
        }
        for (const [key, values] of groups) {
          groups.set(key, regroup(values, i));
        }
        return map(groups);
      })(values, 0);
    }

    var EOL = {},
        EOF = {},
        QUOTE = 34,
        NEWLINE = 10,
        RETURN = 13;

    function objectConverter(columns) {
      return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "] || \"\"";
      }).join(",") + "}");
    }

    function customConverter(columns, f) {
      var object = objectConverter(columns);
      return function(row, i) {
        return f(object(row), i, columns);
      };
    }

    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
      var columnSet = Object.create(null),
          columns = [];

      rows.forEach(function(row) {
        for (var column in row) {
          if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
          }
        }
      });

      return columns;
    }

    function pad(value, width) {
      var s = value + "", length = s.length;
      return length < width ? new Array(width - length + 1).join(0) + s : s;
    }

    function formatYear(year) {
      return year < 0 ? "-" + pad(-year, 6)
        : year > 9999 ? "+" + pad(year, 6)
        : pad(year, 4);
    }

    function formatDate(date) {
      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          seconds = date.getUTCSeconds(),
          milliseconds = date.getUTCMilliseconds();
      return isNaN(date) ? "Invalid Date"
          : formatYear(date.getUTCFullYear()) + "-" + pad(date.getUTCMonth() + 1, 2) + "-" + pad(date.getUTCDate(), 2)
          + (milliseconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "." + pad(milliseconds, 3) + "Z"
          : seconds ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + ":" + pad(seconds, 2) + "Z"
          : minutes || hours ? "T" + pad(hours, 2) + ":" + pad(minutes, 2) + "Z"
          : "");
    }

    function dsvFormat(delimiter) {
      var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
          DELIMITER = delimiter.charCodeAt(0);

      function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
          if (convert) return convert(row, i - 1);
          columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
      }

      function parseRows(text, f) {
        var rows = [], // output rows
            N = text.length,
            I = 0, // current character index
            n = 0, // current line number
            t, // current token
            eof = N <= 0, // current token followed by EOF?
            eol = false; // current token followed by EOL?

        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;

        function token() {
          if (eof) return EOF;
          if (eol) return eol = false, EOL;

          // Unescape quotes.
          var i, j = I, c;
          if (text.charCodeAt(j) === QUOTE) {
            while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
            if ((i = I) >= N) eof = true;
            else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            return text.slice(j + 1, i - 1).replace(/""/g, "\"");
          }

          // Find next delimiter or newline.
          while (I < N) {
            if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            else if (c !== DELIMITER) continue;
            return text.slice(j, i);
          }

          // Return last token before EOF.
          return eof = true, text.slice(j, N);
        }

        while ((t = token()) !== EOF) {
          var row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          if (f && (row = f(row, n++)) == null) continue;
          rows.push(row);
        }

        return rows;
      }

      function preformatBody(rows, columns) {
        return rows.map(function(row) {
          return columns.map(function(column) {
            return formatValue(row[column]);
          }).join(delimiter);
        });
      }

      function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
      }

      function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
      }

      function formatRows(rows) {
        return rows.map(formatRow).join("\n");
      }

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(value) {
        return value == null ? ""
            : value instanceof Date ? formatDate(value)
            : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
            : value;
      }

      return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows,
        formatRow: formatRow,
        formatValue: formatValue
      };
    }

    var tsv$1 = dsvFormat("\t");

    var tsvParse = tsv$1.parse;

    function responseText(response) {
      if (!response.ok) throw new Error(response.status + " " + response.statusText);
      return response.text();
    }

    function text(input, init) {
      return fetch(input, init).then(responseText);
    }

    function dsvParse(parse) {
      return function(input, init, row) {
        if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
        return text(input, init).then(function(response) {
          return parse(response, row);
        });
      };
    }
    var tsv = dsvParse(tsvParse);

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    // User interface store objects

    const user = writable({
        isLoggedIn:         true,
        isRegistered:       true,
        data: {
            projects:               null,
            bookmarkedProjects:     null,
            interactions:           []
        }
    });

    const ui = writable({
        toolName:           null,
        page:               'home',
        showNav:            false,
        showMenuModal:      false,
        showHelpModal:      false,
        items: {
            pages:              []
        },
        search: {
            project:            {},
            organisation:       {}
        },
        newProject:             null,
        editProject: {
            id:                 null,
            data:               null
        },
        state: {
            focus: {
                projectData:            null,
                stakeholderData:        null,
            },
            location:{
                catchment:              false,
                subCatchment:           false,
                location:               false
            }
        },
        byPage:{ 
            discover: {
                main:                   'list',         // Project "list" or "search"
                overlay:                 false,         // Whether the project details overlay page is showing    
                projectView:            'cards',        // Project "cards" or "map"
                projectSearch: {
                    isMade:             false,
                    type:               null,
                }
            },
            connect: {
                main:                   'list',         // Connection by "list" or "search"
                overlay:                false,          // Whether the stakeholder/project overlay page is showing    
                stakeholderView:        'cards',        // Project "cards" or "network"
                stakeholderSearch: {
                    isMade:             false,
                    type:               null,
                }
            },
            share: {
                main:                   'search',      // Project "list" or "search"
                overlay:                false,         // "newProject", "projectSearch", or "project"
                projectView:            'cards',       // Project "cards" or "map"
                projectSearch: {
                    isMade:             false,
                    type:               null,
                }
            },
            join: {
                form:                   'newUser'       // 'newUser' or  'login'
            },
            manage: {
                overlay:                false,         // "newProject", "editProject" or "project"
            }

        }
    });

    ///// EXPORTED METHODS /////
    function getMenuOptions(user){
        if(user.isRegistered){
            return pages.manage.concat(pages.core)     // "MyAccount" option would be first
        } else {
            return pages.core.concat(pages.join)           // "Join" goes last (includes login)
        }
    }
    function getPageInfo(name){ 
        return pages.core
            .concat(pages.join)
            .concat(pages.manage)
            .filter(d => d.name.toLowerCase() === name.toLowerCase())
    }
    function getRandomStockImgPath(index){
        if(index){
            return `./static/img/stock/${stockWaterwaysImgNames[index]}`
        } else {
            return `./static/img/stock/${stockWaterwaysImgNames[Math.floor(Math.random()*stockWaterwaysImgNames.length)]}`
        }
    }
    function getRandomAbstractImgPath(index){
        if(index){
            return `./static/img/abstract/${abstractImgNames[index]}`
        } else {
            return `./static/img/abstract/${abstractImgNames[Math.floor(Math.random()*abstractImgNames.length)]}`
        }
    }
    function getRandomStockSplashImgPath(index){
        if(index){
            return `./static/img/stock/splash/${stockSplashNames[index]}`
        } else {
            return `./static/img/stock/splash/${stockSplashNames[Math.floor(Math.random()*stockSplashNames.length)]}`
        }
    }

    ////////// CONTENT //////////
    let toolName = 'Collaborative tool';
    let pages = {} , componentContent = {};

    async function getContent(){

    	const data = await tsv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQ36HUgHmF_LDKH5Nfn6jLPyo56ygQu5vIgCqHa1md8cQCPvvSXhOGmudo_8zWftxu-Sx3lrU14Pwy4/pub?gid=0&single=true&output=tsv');
        const getHTML = (ref) => data.filter(d => d.reference === ref)[0].content;
        console.log(data);
        toolName = getHTML('toolName');


        // 1. Extract and shape the "Pages section" content
        pages = {
            core:  [
                {
                    name:               getHTML('page.core.Discover.name'),
                    shortDesc:          getHTML('page.core.Discover.shortDesc'),
                    TitleBlock: {
                        title:          getHTML('page.core.Discover.TitleBlock.title'),
                        instruction:    getHTML('page.core.Discover.TitleBlock.instruction')
                    }
                },
                {
                    name:               getHTML('page.core.Connect.name'),
                    shortDesc:          getHTML('page.core.Connect.shortDesc'),
                    TitleBlock: {
                        title:          getHTML('page.core.Connect.TitleBlock.title'),
                        instruction:    getHTML('page.core.Connect.TitleBlock.instruction')
                    }
                },
                {
                    name:               getHTML('page.core.Share.name'),
                    shortDesc:          getHTML('page.core.Share.shortDesc'),
                    TitleBlock: {
                        title:          getHTML('page.core.Share.TitleBlock.title'),
                        instruction:    getHTML('page.core.Share.TitleBlock.instruction')
                    }   
                }
            ],

            join: [
                {
                    name:               getHTML('page.join.name'),
                    shortDesc:          getHTML('page.join.shortDesc'),
                    TitleBlock: {
                        title:          getHTML('page.join.TitleBlock.title'),
                        instruction:    getHTML('page.join.TitleBlock.instruction')
                    }   
                }
            ],

            manage: [
                {
                    name:               getHTML('page.manage.name'),
                    shortDesc:          getHTML('page.manage.shortDesc'),
                    TitleBlock: {
                        title:          getHTML('page.manage.TitleBlock.title'),
                        instruction:    getHTML('page.manage.TitleBlock.instruction')
                    }   
                }
            ]
        };


        // 2. Extract and shape "Component" content 
        componentContent = {
            title: {
                subHeading:      getHTML('toolSubHeader'),
                mainHeading:     `${toolName}`
            },

            about: {
                title:                      `${getHTML('component.about.title')} ${toolName}`,
                intro:                      getHTML('component.about.intro'),
                section_01_title:           getHTML('component.about.section_01_title'),   
                section_01_description:     getHTML('component.about.section_01_description'),   
                section_02_title:           getHTML('component.about.section_02_title'),  
                section_02_description:     getHTML('component.about.section_02_description'),  
                section_03_title:           getHTML('component.about.section_03_title'),   
                section_03_description:     getHTML('component.about.section_03_description'),  
                section_04_title:           getHTML('component.about.section_04_title'),    
                section_04_description:     getHTML('component.about.section_04_description')
            },

            discover: {
                info: {
                    selectionHeader:        getHTML('component.discover.info.selectionHeader'),
                    selectionDefault:       getHTML('component.discover.info.selectionDefault'),
                    searchToolHeader:       getHTML('component.discover.info.searchToolHeader'),
                    searchToolDesc:         getHTML('component.discover.info.searchToolDesc'),
                    filterHeader:           getHTML('component.discover.info.filterHeader'),
                    filterDesc:             getHTML('component.discover.info.filterDesc'),
                    mapHeader:              getHTML('component.discover.info.mapHeader'),
                    mapDesc:                getHTML('component.discover.info.mapDesc'),
                    searchResultsHeader:    getHTML('component.discover.info.searchResultsHeader'),
                    searchResultsDesc:      getHTML('component.discover.info.searchResultsDesc'),
                    searchResultsOptions:   getHTML('component.discover.info.searchResultsOptions'),
                }
            },

            connect: {
                info: {
                    selectionHeader:        getHTML('component.connect.info.selectionHeader'),
                    selectionDefault:       getHTML('component.connect.info.selectionDefault'),
                    searchToolHeader:       getHTML('component.connect.info.searchToolHeader'),
                    searchToolDesc:         getHTML('component.connect.info.searchToolDesc'),
                    filterHeader:           getHTML('component.connect.info.filterHeader'),
                    filterDesc:             getHTML('component.connect.info.filterDesc'),
                    networkHeader:          getHTML('component.connect.info.networkHeader'),
                    networkDesc:            getHTML('component.connect.info.networkDesc'),
                    searchResultsHeader:    getHTML('component.connect.info.searchResultsHeader'),
                    searchResultsDesc:      getHTML('component.connect.info.searchResultsDesc'),
                    searchResultsOptions:   getHTML('component.connect.info.searchResultsOptions'),
                }
            },

            share:{
                new: {
                    aboutHeader:            getHTML('component.share.new.aboutHeader'),
                    aboutDesc:              getHTML('component.share.new.aboutDesc'),
                    instructionHeader:      getHTML('component.share.new.instructionHeader'),
                    instructionDesc:        getHTML('component.share.new.instructionDesc'),
                },
                existing: {
                    aboutHeader:            getHTML('component.share.existing.aboutHeader'),
                    aboutDesc:              getHTML('component.share.existing.aboutDesc'),
                    instructionHeader:      getHTML('component.share.existing.instructionHeader'),
                    instructionDesc:        getHTML('component.share.existing.instructionDesc'),
                    searchResultsHeader:    getHTML('component.share.existing.searchResultsHeader'),
                    searchResultsDesc:      getHTML('component.share.existing.searchResultsDesc'), 
               }
            },
        
            join: {
                info:{
                    header:                 getHTML('component.join.info.header'),
                    desc:                   getHTML('component.join.info.desc'),
                }
            },

            manage: {
                info:{
                    defaultHeader:          getHTML('component.manage.info.defaultHeader'),
                    defaultDesc:            getHTML('component.manage.info.defaultDesc'),
                    myProjectsHeader:       getHTML('component.manage.info.myProjectsHeader'),
                    myProjectsDesc:         getHTML('component.manage.info.myProjectsDesc'),
                    bookmarkedHeader:       getHTML('component.manage.info.bookmarkedHeader'),
                    bookmarkedDesc:         getHTML('component.manage.info.bookmarkedDesc'),
                    feedbackHeader:         getHTML('component.manage.info.feedbackHeader'),
                    feedbackDesc:           getHTML('component.manage.info.feedbackDesc'),
                }
            },
            info: {
                home:{
                    header:                 getHTML('info.home.header'),
                    content:                getHTML('info.home.content')
                },
                manage:{
                    header:                 getHTML('info.manage.header'),
                    content:                getHTML('info.manage.content')
                },
                discover:{
                    header:                 getHTML('info.discover.header'),
                    content:                getHTML('info.discover.content')
                },
                connect:{
                    header:                 getHTML('info.connect.header'),
                    content:                getHTML('info.connect.content')
                },
                share:{
                    header:                 getHTML('info.share.header'),
                    content:                getHTML('info.share.content')
                },
                join:{
                    header:                 getHTML('info.join.header'),
                    content:                getHTML('info.join.content')
                }
            }

        };
    }

    /* Stock image filenames */
    const stockWaterwaysImgNames = [
        "pexels-our-life-in-pixels-7044614.jpg",
        "oak-g0c3060d01_640.jpg",
        "river-g0b82092e4_640.jpg",
        "pexels-pat-whelen-5614640.jpg",
        "landscape-g706ac6ac3_640.jpg",
        "outdoor-g24f1bfea3_640.jpg",
        "nature-g119345a8e_640.jpg",
        "trees-g0fb2b2a74_640.jpg",
        "pexels-pat-whelen-5614637.jpg",
        "river-g75c5ffce1_640.jpg",
        "pexels-matthew-montrone-1179225.jpg",
        "australia-g55a9e9ecb_640.jpg",
        "river-gc963f2535_640.jpg",
        "park-g003d6711b_640.jpg",
        "bridge-g3ecf6639e_640.jpg",
        "creek-gbd505defb_640.jpg",
        "rainforest-gf95400197_640.jpg",
        "pexels-pat-whelen-6742507.jpg",
        "creek-gec33c0f5c_640.jpg",
        "river-gdc7bcb49d_640.jpg",
        "river-g69c8544f8_640.jpg",
        "tasmania-gdbcd44d51_640.jpg",
        "creek-g95689ee28_640.jpg",
        "australia-g0781e5f38_640.jpg",
        "creek-gd490b2825_640.jpg",
        "australia-g3624534c8_640.jpg",
        "boat-ge5ac2be28_640.jpg",
        "waterfall-g7b3cf82fe_640.jpg",
        "melbourne-g556942c08_640.jpg",
        "australia-g27ff2d0a1_640.jpg",
        "sunset-g64f757897_1280.jpg",
        "serene-g69ad65269_640.jpg",
        "flood-g39b39d85d_640.jpg",
        "canyon-gae9ea23d1_640.jpg",
        "yarra-river-g017aabba4_640.jpg",
        "murray-river-gd83bb57da_640.jpg",
        "pexels-pat-whelen-5766206.jpg",
        "pexels-tiff-ng-2097616.jpg",
        "australia-gbaf853e1e_640.jpg",
        "pexels-nicole-avagliano-2152399.jpg",
        "pelicans-gd2c26f9ac_640.jpg",
        "beach-gf2913d919_640.jpg",
        "pexels-oskar-smethurst-6113322.jpg",
        "yellow-water-g3b7f38740_640.jpg",
        "australia-gf97c60c79_640.jpg",
        "melbourne-g08df392d5_640.jpg",
        "pexels-pat-whelen-5579773.jpg",
        "orange-g6c9ba3f45_640.jpg",
        "nature-ga71b3b818_640.jpg",
        "pexels-finn-whelen-5994251.jpg",
        "paddle-boat-g7b00ba9f7_640.jpg",
        "pexels-finn-whelen-6209254.jpg",
        "river-g9a121dedd_640.jpg",
        "pexels-pat-whelen-7328648.jpg",
        "kookaburra-g17426e67a_640.jpg",
        "melbourne-g0404fbfda_640.jpg",
        "australia-g2df671d35_640.jpg",
        "pexels-felix-haumann-3626248.jpg",
        "pexels-pat-whelen-7328644.jpg",
        "pexels-julia-foroni-4664660.jpg",
        "lake-ga55a46fb8_640.jpg",
        "pexels-robert-stokoe-11088585.jpg",
        "pexels-lukas-kloeppel-7777639.jpg",
        "mist-g550405cfa_640.jpg",
        "pexels-finn-whelen-6122285.jpg",
        "pexels-kat-smith-551616.jpg",
        "australian-coot-g529803747_640.jpg",
        "pexels-finn-whelen-5994252.jpg",
        "pexels-pat-whelen-5614720.jpg",
        "pexels-lukas-kloeppel-7777638.jpg",
        "pexels-brittany-87812.jpg",
        "pexels-finn-whelen-6122286.jpg",
        "river-gba83e3dd1_640.jpg",
        "pexels-damon-hall-3041589.jpg",
        "pexels-damon-hall-2336600.jpg",
        "lake-g16baf4910_640.jpg",
        "fishing-g8232b4022_640.jpg",
        "pexels-quang-nguyen-vinh-2172499.jpg",
        "pexels-monique-laats-733090.jpg",
        "pexels-jan-kopřiva-3811727.jpg",
        "pexels-jan-prokes-670237.jpg",
        "pexels-sam-lion-5733177.jpg",
        "pexels-josh-hild-2662182.jpg",
        "pexels-rachel-claire-4857752.jpg",
        "pexels-tobias-bjørkli-2230444.jpg",
        "pexels-artur-roman-534579.jpg",
        "pexels-2170198.jpg",
        "pexels-thierry-fillieul-1046494.jpg",
        "pexels-pixabay-45863.jpg"
    ];

    const abstractImgNames = [
        "elemental_flows_air.png",
        "elemental_flows_detail_1.png",
        "elemental_flows_detail_2.png",
        "elemental_flows_digital.png",
        "elemental_flows_earth.png",
        "elemental_flows_sun.png",
        "elemental_flows_water.png"
    ];

    const stockSplashNames = [
        "jimmy-chang-NP8gd2KUnfw-unsplash.jpg",
        "david-clode-lmLgrnxIALI-unsplash.jpg",
        "izzy-gibson-sFrkWv4ACJg-unsplash.jpg",
        "rohit-morwani-eJQ9VZi-axI-unsplash.jpg",
        "aung-soe-min-WjULnaVRwxU-unsplash.jpg",
        "justin-owens-vh2mgjZ_tXw-unsplash.jpg",
        "aaron-burden-y0h45Oemrx4-unsplash.jpg",
        "jake-charles-dwVToFjYJOo-unsplash.jpg",
        "ian-keefe-NBQhCKtg_9Y-unsplash.jpg",
        "sergio-silva-AFrv2t6jgw4-unsplash.jpg",
        "samara-doole-peaTniZsUQs-unsplash.jpg",
        "samara-doole-mKOKC0dWG5Y-unsplash.jpg"
    ];

    /* src/components/byPage/home/Title.svelte generated by Svelte v3.46.4 */
    const file$1f = "src/components/byPage/home/Title.svelte";

    function create_fragment$1g(ctx) {
    	let section;
    	let h3;
    	let raw0_value = componentContent.title.subHeading + "";
    	let h3_intro;
    	let t;
    	let h1;
    	let raw1_value = componentContent.title.mainHeading + "";
    	let h1_intro;

    	const block = {
    		c: function create() {
    			section = element("section");
    			h3 = element("h3");
    			t = space();
    			h1 = element("h1");
    			attr_dev(h3, "class", "svelte-1y0yq6s");
    			add_location(h3, file$1f, 8, 8, 218);
    			attr_dev(h1, "class", "svelte-1y0yq6s");
    			add_location(h1, file$1f, 11, 8, 339);
    			attr_dev(section, "class", "title-content svelte-1y0yq6s");
    			add_location(section, file$1f, 7, 4, 176);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h3);
    			h3.innerHTML = raw0_value;
    			append_dev(section, t);
    			append_dev(section, h1);
    			h1.innerHTML = raw1_value;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (!h3_intro) {
    				add_render_callback(() => {
    					h3_intro = create_in_transition(h3, fly, { y: -50, duration: 1000 });
    					h3_intro.start();
    				});
    			}

    			if (!h1_intro) {
    				add_render_callback(() => {
    					h1_intro = create_in_transition(h1, fly, { y: -100, duration: 1000 });
    					h1_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1g($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Title', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Title> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fly, fade, componentContent });
    	return [];
    }

    class Title extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1g, create_fragment$1g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Title",
    			options,
    			id: create_fragment$1g.name
    		});
    	}
    }

    /* src/components/byPage/home/MenuCard.svelte generated by Svelte v3.46.4 */
    const file$1e = "src/components/byPage/home/MenuCard.svelte";

    function create_fragment$1f(ctx) {
    	let div1;
    	let h3;
    	let raw0_value = /*pageData*/ ctx[0].name + "";
    	let t0;
    	let hr;
    	let t1;
    	let div0;
    	let p;
    	let raw1_value = /*pageData*/ ctx[0].shortDesc + "";
    	let div1_class_value;
    	let div1_name_value;
    	let div1_intro;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h3 = element("h3");
    			t0 = space();
    			hr = element("hr");
    			t1 = space();
    			div0 = element("div");
    			p = element("p");
    			attr_dev(h3, "class", "svelte-1efygao");
    			add_location(h3, file$1e, 19, 4, 471);
    			attr_dev(hr, "class", "svelte-1efygao");
    			add_location(hr, file$1e, 20, 4, 506);
    			attr_dev(p, "class", "svelte-1efygao");
    			add_location(p, file$1e, 22, 8, 529);
    			add_location(div0, file$1e, 21, 4, 515);
    			attr_dev(div1, "class", div1_class_value = "card card-" + /*index*/ ctx[1] + " svelte-1efygao");
    			attr_dev(div1, "name", div1_name_value = /*pageData*/ ctx[0].name);
    			add_location(div1, file$1e, 15, 0, 307);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h3);
    			h3.innerHTML = raw0_value;
    			append_dev(div1, t0);
    			append_dev(div1, hr);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			p.innerHTML = raw1_value;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*switchPage*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*pageData*/ 1 && raw0_value !== (raw0_value = /*pageData*/ ctx[0].name + "")) h3.innerHTML = raw0_value;			if (dirty & /*pageData*/ 1 && raw1_value !== (raw1_value = /*pageData*/ ctx[0].shortDesc + "")) p.innerHTML = raw1_value;
    			if (dirty & /*index*/ 2 && div1_class_value !== (div1_class_value = "card card-" + /*index*/ ctx[1] + " svelte-1efygao")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (dirty & /*pageData*/ 1 && div1_name_value !== (div1_name_value = /*pageData*/ ctx[0].name)) {
    				attr_dev(div1, "name", div1_name_value);
    			}
    		},
    		i: function intro(local) {
    			if (!div1_intro) {
    				add_render_callback(() => {
    					div1_intro = create_in_transition(div1, fly, {
    						y: 200 * (/*index*/ ctx[1] % 2 - 0.5),
    						duration: 1200,
    						delay: 1800
    					});

    					div1_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1f($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(3, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MenuCard', slots, []);
    	let { pageData } = $$props;
    	let { index } = $$props;

    	function switchPage() {
    		set_store_value(ui, $ui.page = this.getAttribute('name').toLowerCase(), $ui);
    		set_store_value(ui, $ui.showNav = true, $ui);
    	}
    	const writable_props = ['pageData', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MenuCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('pageData' in $$props) $$invalidate(0, pageData = $$props.pageData);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		ui,
    		fade,
    		fly,
    		pageData,
    		index,
    		switchPage,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('pageData' in $$props) $$invalidate(0, pageData = $$props.pageData);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [pageData, index, switchPage];
    }

    class MenuCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1f, create_fragment$1f, safe_not_equal, { pageData: 0, index: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MenuCard",
    			options,
    			id: create_fragment$1f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*pageData*/ ctx[0] === undefined && !('pageData' in props)) {
    			console.warn("<MenuCard> was created without expected prop 'pageData'");
    		}

    		if (/*index*/ ctx[1] === undefined && !('index' in props)) {
    			console.warn("<MenuCard> was created without expected prop 'index'");
    		}
    	}

    	get pageData() {
    		throw new Error("<MenuCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pageData(value) {
    		throw new Error("<MenuCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<MenuCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<MenuCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var byteLength_1 = byteLength;
    var toByteArray_1 = toByteArray;
    var fromByteArray_1 = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    } // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications


    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;

    function getLens(b64) {
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4');
      } // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42


      var validLen = b64.indexOf('=');
      if (validLen === -1) validLen = len;
      var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    } // base64 is 4/3 + up to two characters of the original data


    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }

    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

      var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i;

      for (i = 0; i < len; i += 4) {
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
      }

      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
      }

      return arr;
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
    }

    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];

      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
      }

      return output.join('');
    }

    function fromByteArray(uint8) {
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3
      // go through the array every three bytes, we'll deal with trailing stuff later

      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
      } // pad the end with zeros, but make sure to not forget the extra bytes


      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
      }

      return parts.join('');
    }

    var base64Js = {
      byteLength: byteLength_1,
      toByteArray: toByteArray_1,
      fromByteArray: fromByteArray_1
    };

    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    var read = function read(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;

      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;

      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }

      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };

    var write = function write(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);

        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }

        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }

        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = e << mLen | m;
      eLen += mLen;

      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    };

    var ieee754 = {
      read: read,
      write: write
    };

    var buffer$1 = createCommonjsModule(function (module, exports) {

      var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? // eslint-disable-line dot-notation
      Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
      : null;
      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 0x7fffffff;
      exports.kMaxLength = K_MAX_LENGTH;
      /**
       * If `Buffer.TYPED_ARRAY_SUPPORT`:
       *   === true    Use Uint8Array implementation (fastest)
       *   === false   Print warning and recommend using `buffer` v4.x which has an Object
       *               implementation (most compatible, even IE6)
       *
       * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
       * Opera 11.6+, iOS 4.2+.
       *
       * We report that the browser does not support typed arrays if the are not subclassable
       * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
       * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
       * for __proto__ and has a buggy typed array implementation.
       */

      Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

      if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
        console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
      }

      function typedArraySupport() {
        // Can typed array instances can be augmented?
        try {
          var arr = new Uint8Array(1);
          var proto = {
            foo: function foo() {
              return 42;
            }
          };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }

      Object.defineProperty(Buffer.prototype, 'parent', {
        enumerable: true,
        get: function get() {
          if (!Buffer.isBuffer(this)) return undefined;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer.prototype, 'offset', {
        enumerable: true,
        get: function get() {
          if (!Buffer.isBuffer(this)) return undefined;
          return this.byteOffset;
        }
      });

      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        } // Return an augmented `Uint8Array` instance


        var buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer.prototype);
        return buf;
      }
      /**
       * The Buffer constructor returns instances of `Uint8Array` that have their
       * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
       * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
       * and the `Uint8Array` methods. Square bracket notation works as expected -- it
       * returns a single octet.
       *
       * The `Uint8Array` prototype remains unmodified.
       */


      function Buffer(arg, encodingOrOffset, length) {
        // Common case.
        if (typeof arg === 'number') {
          if (typeof encodingOrOffset === 'string') {
            throw new TypeError('The "string" argument must be of type string. Received type number');
          }

          return allocUnsafe(arg);
        }

        return from(arg, encodingOrOffset, length);
      }

      Buffer.poolSize = 8192; // not used by this implementation

      function from(value, encodingOrOffset, length) {
        if (typeof value === 'string') {
          return fromString(value, encodingOrOffset);
        }

        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }

        if (value == null) {
          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + babelHelpers["typeof"](value));
        }

        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }

        if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }

        if (typeof value === 'number') {
          throw new TypeError('The "value" argument must not be of type number. Received type number');
        }

        var valueOf = value.valueOf && value.valueOf();

        if (valueOf != null && valueOf !== value) {
          return Buffer.from(valueOf, encodingOrOffset, length);
        }

        var b = fromObject(value);
        if (b) return b;

        if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
          return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
        }

        throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + babelHelpers["typeof"](value));
      }
      /**
       * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
       * if value is a number.
       * Buffer.from(str[, encoding])
       * Buffer.from(array)
       * Buffer.from(buffer)
       * Buffer.from(arrayBuffer[, byteOffset[, length]])
       **/


      Buffer.from = function (value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
      // https://github.com/feross/buffer/pull/148


      Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer, Uint8Array);

      function assertSize(size) {
        if (typeof size !== 'number') {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }

      function alloc(size, fill, encoding) {
        assertSize(size);

        if (size <= 0) {
          return createBuffer(size);
        }

        if (fill !== undefined) {
          // Only pay attention to encoding if it's a string. This
          // prevents accidentally sending in a number that would
          // be interpreted as a start offset.
          return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }

        return createBuffer(size);
      }
      /**
       * Creates a new filled Buffer instance.
       * alloc(size[, fill[, encoding]])
       **/


      Buffer.alloc = function (size, fill, encoding) {
        return alloc(size, fill, encoding);
      };

      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      /**
       * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
       * */


      Buffer.allocUnsafe = function (size) {
        return allocUnsafe(size);
      };
      /**
       * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
       */


      Buffer.allocUnsafeSlow = function (size) {
        return allocUnsafe(size);
      };

      function fromString(string, encoding) {
        if (typeof encoding !== 'string' || encoding === '') {
          encoding = 'utf8';
        }

        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding);
        }

        var length = byteLength(string, encoding) | 0;
        var buf = createBuffer(length);
        var actual = buf.write(string, encoding);

        if (actual !== length) {
          // Writing a hex string, for example, that contains invalid characters will
          // cause everything after the first invalid character to be ignored. (e.g.
          // 'abxxcd' will be treated as 'ab')
          buf = buf.slice(0, actual);
        }

        return buf;
      }

      function fromArrayLike(array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        var buf = createBuffer(length);

        for (var i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }

        return buf;
      }

      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          var copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }

        return fromArrayLike(arrayView);
      }

      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }

        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }

        var buf;

        if (byteOffset === undefined && length === undefined) {
          buf = new Uint8Array(array);
        } else if (length === undefined) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        } // Return an augmented `Uint8Array` instance


        Object.setPrototypeOf(buf, Buffer.prototype);
        return buf;
      }

      function fromObject(obj) {
        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          var buf = createBuffer(len);

          if (buf.length === 0) {
            return buf;
          }

          obj.copy(buf, 0, 0, len);
          return buf;
        }

        if (obj.length !== undefined) {
          if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }

          return fromArrayLike(obj);
        }

        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }

      function checked(length) {
        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= K_MAX_LENGTH) {
          throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
        }

        return length | 0;
      }

      function SlowBuffer(length) {
        if (+length != length) {
          // eslint-disable-line eqeqeq
          length = 0;
        }

        return Buffer.alloc(+length);
      }

      Buffer.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
      };

      Buffer.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
          throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        }

        if (a === b) return 0;
        var x = a.length;
        var y = b.length;

        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };

      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'latin1':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return true;

          default:
            return false;
        }
      };

      Buffer.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }

        if (list.length === 0) {
          return Buffer.alloc(0);
        }

        var i;

        if (length === undefined) {
          length = 0;

          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }

        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;

        for (i = 0; i < list.length; ++i) {
          var buf = list[i];

          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              Buffer.from(buf).copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(buffer, buf, pos);
            }
          } else if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }

          pos += buf.length;
        }

        return buffer;
      };

      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) {
          return string.length;
        }

        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }

        if (typeof string !== 'string') {
          throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + babelHelpers["typeof"](string));
        }

        var len = string.length;
        var mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

        var loweredCase = false;

        for (;;) {
          switch (encoding) {
            case 'ascii':
            case 'latin1':
            case 'binary':
              return len;

            case 'utf8':
            case 'utf-8':
              return utf8ToBytes(string).length;

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return len * 2;

            case 'hex':
              return len >>> 1;

            case 'base64':
              return base64ToBytes(string).length;

            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
              }

              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }

      Buffer.byteLength = byteLength;

      function slowToString(encoding, start, end) {
        var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.
        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

        if (start === undefined || start < 0) {
          start = 0;
        } // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.


        if (start > this.length) {
          return '';
        }

        if (end === undefined || end > this.length) {
          end = this.length;
        }

        if (end <= 0) {
          return '';
        } // Force coercion to uint32. This will also coerce falsey/NaN values to 0.


        end >>>= 0;
        start >>>= 0;

        if (end <= start) {
          return '';
        }

        if (!encoding) encoding = 'utf8';

        while (true) {
          switch (encoding) {
            case 'hex':
              return hexSlice(this, start, end);

            case 'utf8':
            case 'utf-8':
              return utf8Slice(this, start, end);

            case 'ascii':
              return asciiSlice(this, start, end);

            case 'latin1':
            case 'binary':
              return latin1Slice(this, start, end);

            case 'base64':
              return base64Slice(this, start, end);

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return utf16leSlice(this, start, end);

            default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
              encoding = (encoding + '').toLowerCase();
              loweredCase = true;
          }
        }
      } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
      // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
      // reliably in a browserify context because there could be multiple different
      // copies of the 'buffer' package in use. This method works even for Buffer
      // instances that were created from another copy of the `buffer` package.
      // See: https://github.com/feross/buffer/issues/154


      Buffer.prototype._isBuffer = true;

      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }

      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;

        if (len % 2 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 16-bits');
        }

        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }

        return this;
      };

      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;

        if (len % 4 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 32-bits');
        }

        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }

        return this;
      };

      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;

        if (len % 8 !== 0) {
          throw new RangeError('Buffer size must be a multiple of 64-bits');
        }

        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }

        return this;
      };

      Buffer.prototype.toString = function toString() {
        var length = this.length;
        if (length === 0) return '';
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };

      Buffer.prototype.toLocaleString = Buffer.prototype.toString;

      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
        if (this === b) return true;
        return Buffer.compare(this, b) === 0;
      };

      Buffer.prototype.inspect = function inspect() {
        var str = '';
        var max = exports.INSPECT_MAX_BYTES;
        str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
        if (this.length > max) str += ' ... ';
        return '<Buffer ' + str + '>';
      };

      if (customInspectSymbol) {
        Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
      }

      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer.from(target, target.offset, target.byteLength);
        }

        if (!Buffer.isBuffer(target)) {
          throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + babelHelpers["typeof"](target));
        }

        if (start === undefined) {
          start = 0;
        }

        if (end === undefined) {
          end = target ? target.length : 0;
        }

        if (thisStart === undefined) {
          thisStart = 0;
        }

        if (thisEnd === undefined) {
          thisEnd = this.length;
        }

        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError('out of range index');
        }

        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }

        if (thisStart >= thisEnd) {
          return -1;
        }

        if (start >= end) {
          return 1;
        }

        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target) return 0;
        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);
        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);

        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
      //
      // Arguments:
      // - buffer - a Buffer to search
      // - val - a string, Buffer, or number
      // - byteOffset - an index into `buffer`; will be clamped to an int32
      // - encoding - an optional encoding, relevant is val is a string
      // - dir - true for indexOf, false for lastIndexOf


      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1; // Normalize byteOffset

        if (typeof byteOffset === 'string') {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 0x7fffffff) {
          byteOffset = 0x7fffffff;
        } else if (byteOffset < -0x80000000) {
          byteOffset = -0x80000000;
        }

        byteOffset = +byteOffset; // Coerce to Number.

        if (numberIsNaN(byteOffset)) {
          // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
          byteOffset = dir ? 0 : buffer.length - 1;
        } // Normalize byteOffset: negative offsets start from the end of the buffer


        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

        if (byteOffset >= buffer.length) {
          if (dir) return -1;else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;else return -1;
        } // Normalize val


        if (typeof val === 'string') {
          val = Buffer.from(val, encoding);
        } // Finally, search either indexOf (if dir is true) or lastIndexOf


        if (Buffer.isBuffer(val)) {
          // Special case: looking for empty string/buffer always fails
          if (val.length === 0) {
            return -1;
          }

          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === 'number') {
          val = val & 0xFF; // Search for a byte value [0-255]

          if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }

          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }

        throw new TypeError('val must be string, number or Buffer');
      }

      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;

        if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();

          if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }

            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }

        function read(buf, i) {
          if (indexSize === 1) {
            return buf[i];
          } else {
            return buf.readUInt16BE(i * indexSize);
          }
        }

        var i;

        if (dir) {
          var foundIndex = -1;

          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

          for (i = byteOffset; i >= 0; i--) {
            var found = true;

            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }

            if (found) return i;
          }
        }

        return -1;
      }

      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };

      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };

      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };

      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;

        if (!length) {
          length = remaining;
        } else {
          length = Number(length);

          if (length > remaining) {
            length = remaining;
          }
        }

        var strLen = string.length;

        if (length > strLen / 2) {
          length = strLen / 2;
        }

        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }

        return i;
      }

      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }

      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }

      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }

      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }

      Buffer.prototype.write = function write(string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
          encoding = 'utf8';
          length = this.length;
          offset = 0; // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === 'string') {
          encoding = offset;
          length = this.length;
          offset = 0; // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
          offset = offset >>> 0;

          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
          } else {
            encoding = length;
            length = undefined;
          }
        } else {
          throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
        }

        var remaining = this.length - offset;
        if (length === undefined || length > remaining) length = remaining;

        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError('Attempt to write outside buffer bounds');
        }

        if (!encoding) encoding = 'utf8';
        var loweredCase = false;

        for (;;) {
          switch (encoding) {
            case 'hex':
              return hexWrite(this, string, offset, length);

            case 'utf8':
            case 'utf-8':
              return utf8Write(this, string, offset, length);

            case 'ascii':
            case 'latin1':
            case 'binary':
              return asciiWrite(this, string, offset, length);

            case 'base64':
              // Warning: maxLength not taken into account in base64Write
              return base64Write(this, string, offset, length);

            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return ucs2Write(this, string, offset, length);

            default:
              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
              encoding = ('' + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };

      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };

      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64Js.fromByteArray(buf);
        } else {
          return base64Js.fromByteArray(buf.slice(start, end));
        }
      }

      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];
        var i = start;

        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;

            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 0x80) {
                  codePoint = firstByte;
                }

                break;

              case 2:
                secondByte = buf[i + 1];

                if ((secondByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                  if (tempCodePoint > 0x7F) {
                    codePoint = tempCodePoint;
                  }
                }

                break;

              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];

                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                  if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                    codePoint = tempCodePoint;
                  }
                }

                break;

              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];

                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                  if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                    codePoint = tempCodePoint;
                  }
                }

            }
          }

          if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
          } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
          }

          res.push(codePoint);
          i += bytesPerSequence;
        }

        return decodeCodePointsArray(res);
      } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
      // the lowest limit is Chrome, with 0x10000 args.
      // We go 1 magnitude less, for safety


      var MAX_ARGUMENTS_LENGTH = 0x1000;

      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;

        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
        } // Decode in chunks to avoid "call stack size exceeded".


        var res = '';
        var i = 0;

        while (i < len) {
          res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
        }

        return res;
      }

      function asciiSlice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 0x7F);
        }

        return ret;
      }

      function latin1Slice(buf, start, end) {
        var ret = '';
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }

        return ret;
      }

      function hexSlice(buf, start, end) {
        var len = buf.length;
        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;
        var out = '';

        for (var i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }

        return out;
      }

      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = ''; // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)

        for (var i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }

        return res;
      }

      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === undefined ? len : ~~end;

        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }

        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }

        if (end < start) end = start;
        var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

        Object.setPrototypeOf(newBuf, Buffer.prototype);
        return newBuf;
      };
      /*
       * Need to make sure that buffer isn't trying to write out of bounds.
       */


      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
      }

      Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;

        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }

        return val;
      };

      Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;

        if (!noAssert) {
          checkOffset(offset, byteLength, this.length);
        }

        var val = this[offset + --byteLength];
        var mul = 1;

        while (byteLength > 0 && (mul *= 0x100)) {
          val += this[offset + --byteLength] * mul;
        }

        return val;
      };

      Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };

      Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };

      Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };

      Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
      };

      Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };

      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var val = this[offset];
        var mul = 1;
        var i = 0;

        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }

        mul *= 0x80;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
        return val;
      };

      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);
        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];

        while (i > 0 && (mul *= 0x100)) {
          val += this[offset + --i] * mul;
        }

        mul *= 0x80;
        if (val >= mul) val -= Math.pow(2, 8 * byteLength);
        return val;
      };

      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 0x80)) return this[offset];
        return (0xff - this[offset] + 1) * -1;
      };

      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | this[offset + 1] << 8;
        return val & 0x8000 ? val | 0xFFFF0000 : val;
      };

      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | this[offset] << 8;
        return val & 0x8000 ? val | 0xFFFF0000 : val;
      };

      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };

      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };

      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };

      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };

      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };

      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };

      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
      }

      Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;

        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var mul = 1;
        var i = 0;
        this[offset] = value & 0xFF;

        while (++i < byteLength && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;

        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = value & 0xFF;

        while (--i >= 0 && (mul *= 0x100)) {
          this[offset + i] = value / mul & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
        this[offset] = value & 0xff;
        return offset + 1;
      };

      Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };

      Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
        return offset + 2;
      };

      Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
        return offset + 4;
      };

      Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
        return offset + 4;
      };

      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;

        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 0xFF;

        while (++i < byteLength && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }

          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;

        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);
          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 0xFF;

        while (--i >= 0 && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }

          this[offset + i] = (value / mul >> 0) - sub & 0xFF;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
        if (value < 0) value = 0xff + value + 1;
        this[offset] = value & 0xff;
        return offset + 1;
      };

      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };

      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
        return offset + 2;
      };

      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };

      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        if (value < 0) value = 0xffffffff + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
        return offset + 4;
      };

      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError('Index out of range');
        if (offset < 0) throw new RangeError('Index out of range');
      }

      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;

        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4);
        }

        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }

      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };

      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;

        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8);
        }

        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }

      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

        if (targetStart < 0) {
          throw new RangeError('targetStart out of bounds');
        }

        if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
        if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

        if (end > this.length) end = this.length;

        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }

        var len = end - start;

        if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
          // Use built-in when available, missing from IE11
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
        }

        return len;
      }; // Usage:
      //    buffer.fill(number[, offset[, end]])
      //    buffer.fill(buffer[, offset[, end]])
      //    buffer.fill(string[, offset[, end]][, encoding])


      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === 'string') {
          if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
          }

          if (encoding !== undefined && typeof encoding !== 'string') {
            throw new TypeError('encoding must be a string');
          }

          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding);
          }

          if (val.length === 1) {
            var code = val.charCodeAt(0);

            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
              // Fast path: If `val` fits into a single byte, use that numeric value.
              val = code;
            }
          }
        } else if (typeof val === 'number') {
          val = val & 255;
        } else if (typeof val === 'boolean') {
          val = Number(val);
        } // Invalid ranges are not set to a default, so can range check early.


        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError('Out of range index');
        }

        if (end <= start) {
          return this;
        }

        start = start >>> 0;
        end = end === undefined ? this.length : end >>> 0;
        if (!val) val = 0;
        var i;

        if (typeof val === 'number') {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
          var len = bytes.length;

          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }

          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }

        return this;
      }; // HELPER FUNCTIONS
      // ================


      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

      function base64clean(str) {
        // Node takes equal signs as end of the Base64 encoding
        str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

        str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

        if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

        while (str.length % 4 !== 0) {
          str = str + '=';
        }

        return str;
      }

      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];

        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i); // is surrogate component

          if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
              // no lead yet
              if (codePoint > 0xDBFF) {
                // unexpected trail
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              } else if (i + 1 === length) {
                // unpaired lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                continue;
              } // valid lead


              leadSurrogate = codePoint;
              continue;
            } // 2 leads in a row


            if (codePoint < 0xDC00) {
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              leadSurrogate = codePoint;
              continue;
            } // valid surrogate pair


            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
          } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          }

          leadSurrogate = null; // encode utf8

          if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
          } else {
            throw new Error('Invalid code point');
          }
        }

        return bytes;
      }

      function asciiToBytes(str) {
        var byteArray = [];

        for (var i = 0; i < str.length; ++i) {
          // Node's code seems to be doing this and not & 0x7F..
          byteArray.push(str.charCodeAt(i) & 0xFF);
        }

        return byteArray;
      }

      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];

        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }

        return byteArray;
      }

      function base64ToBytes(str) {
        return base64Js.toByteArray(base64clean(str));
      }

      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }

        return i;
      } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
      // the `instanceof` check but they should be treated as of that type.
      // See: https://github.com/feross/buffer/issues/166


      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }

      function numberIsNaN(obj) {
        // For IE11 support
        return obj !== obj; // eslint-disable-line no-self-compare
      } // Create lookup table for `toString('hex')`
      // See: https://github.com/feross/buffer/issues/219


      var hexSliceLookupTable = function () {
        var alphabet = '0123456789abcdef';
        var table = new Array(256);

        for (var i = 0; i < 16; ++i) {
          var i16 = i * 16;

          for (var j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }

        return table;
      }();
    });
    var buffer_1 = buffer$1.Buffer;
    buffer$1.SlowBuffer;
    buffer$1.INSPECT_MAX_BYTES;
    buffer$1.kMaxLength;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /** @public */
    var BSONError = /** @class */ (function (_super) {
        __extends(BSONError, _super);
        function BSONError(message) {
            var _this = _super.call(this, message) || this;
            Object.setPrototypeOf(_this, BSONError.prototype);
            return _this;
        }
        Object.defineProperty(BSONError.prototype, "name", {
            get: function () {
                return 'BSONError';
            },
            enumerable: false,
            configurable: true
        });
        return BSONError;
    }(Error));
    /** @public */
    var BSONTypeError = /** @class */ (function (_super) {
        __extends(BSONTypeError, _super);
        function BSONTypeError(message) {
            var _this = _super.call(this, message) || this;
            Object.setPrototypeOf(_this, BSONTypeError.prototype);
            return _this;
        }
        Object.defineProperty(BSONTypeError.prototype, "name", {
            get: function () {
                return 'BSONTypeError';
            },
            enumerable: false,
            configurable: true
        });
        return BSONTypeError;
    }(TypeError));

    function checkForMath(potentialGlobal) {
        // eslint-disable-next-line eqeqeq
        return potentialGlobal && potentialGlobal.Math == Math && potentialGlobal;
    }
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    function getGlobal() {
        // eslint-disable-next-line no-undef
        return (checkForMath(typeof globalThis === 'object' && globalThis) ||
            checkForMath(typeof window === 'object' && window) ||
            checkForMath(typeof self === 'object' && self) ||
            checkForMath(typeof global === 'object' && global) ||
            Function('return this')());
    }
    function isReactNative() {
        var g = getGlobal();
        return typeof g.navigator === 'object' && g.navigator.product === 'ReactNative';
    }
    var insecureRandomBytes = function insecureRandomBytes(size) {
        var insecureWarning = isReactNative()
            ? 'BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.'
            : 'BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.';
        console.warn(insecureWarning);
        var result = buffer_1.alloc(size);
        for (var i = 0; i < size; ++i)
            result[i] = Math.floor(Math.random() * 256);
        return result;
    };
    var detectRandomBytes = function () {
        if (typeof window !== 'undefined') {
            // browser crypto implementation(s)
            var target_1 = window.crypto || window.msCrypto; // allow for IE11
            if (target_1 && target_1.getRandomValues) {
                return function (size) { return target_1.getRandomValues(buffer_1.alloc(size)); };
            }
        }
        if (typeof global !== 'undefined' && global.crypto && global.crypto.getRandomValues) {
            // allow for RN packages such as https://www.npmjs.com/package/react-native-get-random-values to populate global
            return function (size) { return global.crypto.getRandomValues(buffer_1.alloc(size)); };
        }
        var requiredRandomBytes;
        try {
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            requiredRandomBytes = require('crypto').randomBytes;
        }
        catch (e) {
            // keep the fallback
        }
        // NOTE: in transpiled cases the above require might return null/undefined
        return requiredRandomBytes || insecureRandomBytes;
    };
    var randomBytes = detectRandomBytes();
    function isAnyArrayBuffer(value) {
        return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(Object.prototype.toString.call(value));
    }
    function isUint8Array(value) {
        return Object.prototype.toString.call(value) === '[object Uint8Array]';
    }
    function isRegExp(d) {
        return Object.prototype.toString.call(d) === '[object RegExp]';
    }
    // To ensure that 0.4 of node works correctly
    function isDate(d) {
        return isObjectLike(d) && Object.prototype.toString.call(d) === '[object Date]';
    }
    /**
     * @internal
     * this is to solve the `'someKey' in x` problem where x is unknown.
     * https://github.com/typescript-eslint/typescript-eslint/issues/1071#issuecomment-541955753
     */
    function isObjectLike(candidate) {
        return typeof candidate === 'object' && candidate !== null;
    }
    function deprecate(fn, message) {
        var warned = false;
        function deprecated() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (!warned) {
                console.warn(message);
                warned = true;
            }
            return fn.apply(this, args);
        }
        return deprecated;
    }

    /**
     * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.
     *
     * @param potentialBuffer - The potential buffer
     * @returns Buffer the input if potentialBuffer is a buffer, or a buffer that
     * wraps a passed in Uint8Array
     * @throws BSONTypeError If anything other than a Buffer or Uint8Array is passed in
     */
    function ensureBuffer(potentialBuffer) {
        if (ArrayBuffer.isView(potentialBuffer)) {
            return buffer_1.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);
        }
        if (isAnyArrayBuffer(potentialBuffer)) {
            return buffer_1.from(potentialBuffer);
        }
        throw new BSONTypeError('Must use either Buffer or TypedArray');
    }

    // Validation regex for v4 uuid (validates with or without dashes)
    var VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;
    var uuidValidateString = function (str) {
        return typeof str === 'string' && VALIDATION_REGEX.test(str);
    };
    var uuidHexStringToBuffer = function (hexString) {
        if (!uuidValidateString(hexString)) {
            throw new BSONTypeError('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" or "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".');
        }
        var sanitizedHexString = hexString.replace(/-/g, '');
        return buffer_1.from(sanitizedHexString, 'hex');
    };
    var bufferToUuidHexString = function (buffer, includeDashes) {
        if (includeDashes === void 0) { includeDashes = true; }
        return includeDashes
            ? buffer.toString('hex', 0, 4) +
                '-' +
                buffer.toString('hex', 4, 6) +
                '-' +
                buffer.toString('hex', 6, 8) +
                '-' +
                buffer.toString('hex', 8, 10) +
                '-' +
                buffer.toString('hex', 10, 16)
            : buffer.toString('hex');
    };

    var BYTE_LENGTH = 16;
    var kId$1 = Symbol('id');
    /**
     * A class representation of the BSON UUID type.
     * @public
     */
    var UUID = /** @class */ (function () {
        /**
         * Create an UUID type
         *
         * @param input - Can be a 32 or 36 character hex string (dashes excluded/included) or a 16 byte binary Buffer.
         */
        function UUID(input) {
            if (typeof input === 'undefined') {
                // The most common use case (blank id, new UUID() instance)
                this.id = UUID.generate();
            }
            else if (input instanceof UUID) {
                this[kId$1] = buffer_1.from(input.id);
                this.__id = input.__id;
            }
            else if (ArrayBuffer.isView(input) && input.byteLength === BYTE_LENGTH) {
                this.id = ensureBuffer(input);
            }
            else if (typeof input === 'string') {
                this.id = uuidHexStringToBuffer(input);
            }
            else {
                throw new BSONTypeError('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');
            }
        }
        Object.defineProperty(UUID.prototype, "id", {
            /**
             * The UUID bytes
             * @readonly
             */
            get: function () {
                return this[kId$1];
            },
            set: function (value) {
                this[kId$1] = value;
                if (UUID.cacheHexString) {
                    this.__id = bufferToUuidHexString(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Generate a 16 byte uuid v4 buffer used in UUIDs
         */
        /**
         * Returns the UUID id as a 32 or 36 character hex string representation, excluding/including dashes (defaults to 36 character dash separated)
         * @param includeDashes - should the string exclude dash-separators.
         * */
        UUID.prototype.toHexString = function (includeDashes) {
            if (includeDashes === void 0) { includeDashes = true; }
            if (UUID.cacheHexString && this.__id) {
                return this.__id;
            }
            var uuidHexString = bufferToUuidHexString(this.id, includeDashes);
            if (UUID.cacheHexString) {
                this.__id = uuidHexString;
            }
            return uuidHexString;
        };
        /**
         * Converts the id into a 36 character (dashes included) hex string, unless a encoding is specified.
         */
        UUID.prototype.toString = function (encoding) {
            return encoding ? this.id.toString(encoding) : this.toHexString();
        };
        /**
         * Converts the id into its JSON string representation.
         * A 36 character (dashes included) hex string in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
         */
        UUID.prototype.toJSON = function () {
            return this.toHexString();
        };
        /**
         * Compares the equality of this UUID with `otherID`.
         *
         * @param otherId - UUID instance to compare against.
         */
        UUID.prototype.equals = function (otherId) {
            if (!otherId) {
                return false;
            }
            if (otherId instanceof UUID) {
                return otherId.id.equals(this.id);
            }
            try {
                return new UUID(otherId).id.equals(this.id);
            }
            catch (_a) {
                return false;
            }
        };
        /**
         * Creates a Binary instance from the current UUID.
         */
        UUID.prototype.toBinary = function () {
            return new Binary(this.id, Binary.SUBTYPE_UUID);
        };
        /**
         * Generates a populated buffer containing a v4 uuid
         */
        UUID.generate = function () {
            var bytes = randomBytes(BYTE_LENGTH);
            // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
            // Kindly borrowed from https://github.com/uuidjs/uuid/blob/master/src/v4.js
            bytes[6] = (bytes[6] & 0x0f) | 0x40;
            bytes[8] = (bytes[8] & 0x3f) | 0x80;
            return buffer_1.from(bytes);
        };
        /**
         * Checks if a value is a valid bson UUID
         * @param input - UUID, string or Buffer to validate.
         */
        UUID.isValid = function (input) {
            if (!input) {
                return false;
            }
            if (input instanceof UUID) {
                return true;
            }
            if (typeof input === 'string') {
                return uuidValidateString(input);
            }
            if (isUint8Array(input)) {
                // check for length & uuid version (https://tools.ietf.org/html/rfc4122#section-4.1.3)
                if (input.length !== BYTE_LENGTH) {
                    return false;
                }
                try {
                    // get this byte as hex:             xxxxxxxx-xxxx-XXxx-xxxx-xxxxxxxxxxxx
                    // check first part as uuid version: xxxxxxxx-xxxx-Xxxx-xxxx-xxxxxxxxxxxx
                    return parseInt(input[6].toString(16)[0], 10) === Binary.SUBTYPE_UUID;
                }
                catch (_a) {
                    return false;
                }
            }
            return false;
        };
        /**
         * Creates an UUID from a hex string representation of an UUID.
         * @param hexString - 32 or 36 character hex string (dashes excluded/included).
         */
        UUID.createFromHexString = function (hexString) {
            var buffer = uuidHexStringToBuffer(hexString);
            return new UUID(buffer);
        };
        /**
         * Converts to a string representation of this Id.
         *
         * @returns return the 36 character hex string representation.
         * @internal
         */
        UUID.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        UUID.prototype.inspect = function () {
            return "new UUID(\"" + this.toHexString() + "\")";
        };
        return UUID;
    }());
    Object.defineProperty(UUID.prototype, '_bsontype', { value: 'UUID' });

    /**
     * A class representation of the BSON Binary type.
     * @public
     */
    var Binary = /** @class */ (function () {
        /**
         * @param buffer - a buffer object containing the binary data.
         * @param subType - the option binary type.
         */
        function Binary(buffer, subType) {
            if (!(this instanceof Binary))
                return new Binary(buffer, subType);
            if (!(buffer == null) &&
                !(typeof buffer === 'string') &&
                !ArrayBuffer.isView(buffer) &&
                !(buffer instanceof ArrayBuffer) &&
                !Array.isArray(buffer)) {
                throw new BSONTypeError('Binary can only be constructed from string, Buffer, TypedArray, or Array<number>');
            }
            this.sub_type = subType !== null && subType !== void 0 ? subType : Binary.BSON_BINARY_SUBTYPE_DEFAULT;
            if (buffer == null) {
                // create an empty binary buffer
                this.buffer = buffer_1.alloc(Binary.BUFFER_SIZE);
                this.position = 0;
            }
            else {
                if (typeof buffer === 'string') {
                    // string
                    this.buffer = buffer_1.from(buffer, 'binary');
                }
                else if (Array.isArray(buffer)) {
                    // number[]
                    this.buffer = buffer_1.from(buffer);
                }
                else {
                    // Buffer | TypedArray | ArrayBuffer
                    this.buffer = ensureBuffer(buffer);
                }
                this.position = this.buffer.byteLength;
            }
        }
        /**
         * Updates this binary with byte_value.
         *
         * @param byteValue - a single byte we wish to write.
         */
        Binary.prototype.put = function (byteValue) {
            // If it's a string and a has more than one character throw an error
            if (typeof byteValue === 'string' && byteValue.length !== 1) {
                throw new BSONTypeError('only accepts single character String');
            }
            else if (typeof byteValue !== 'number' && byteValue.length !== 1)
                throw new BSONTypeError('only accepts single character Uint8Array or Array');
            // Decode the byte value once
            var decodedByte;
            if (typeof byteValue === 'string') {
                decodedByte = byteValue.charCodeAt(0);
            }
            else if (typeof byteValue === 'number') {
                decodedByte = byteValue;
            }
            else {
                decodedByte = byteValue[0];
            }
            if (decodedByte < 0 || decodedByte > 255) {
                throw new BSONTypeError('only accepts number in a valid unsigned byte range 0-255');
            }
            if (this.buffer.length > this.position) {
                this.buffer[this.position++] = decodedByte;
            }
            else {
                var buffer = buffer_1.alloc(Binary.BUFFER_SIZE + this.buffer.length);
                // Combine the two buffers together
                this.buffer.copy(buffer, 0, 0, this.buffer.length);
                this.buffer = buffer;
                this.buffer[this.position++] = decodedByte;
            }
        };
        /**
         * Writes a buffer or string to the binary.
         *
         * @param sequence - a string or buffer to be written to the Binary BSON object.
         * @param offset - specify the binary of where to write the content.
         */
        Binary.prototype.write = function (sequence, offset) {
            offset = typeof offset === 'number' ? offset : this.position;
            // If the buffer is to small let's extend the buffer
            if (this.buffer.length < offset + sequence.length) {
                var buffer = buffer_1.alloc(this.buffer.length + sequence.length);
                this.buffer.copy(buffer, 0, 0, this.buffer.length);
                // Assign the new buffer
                this.buffer = buffer;
            }
            if (ArrayBuffer.isView(sequence)) {
                this.buffer.set(ensureBuffer(sequence), offset);
                this.position =
                    offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;
            }
            else if (typeof sequence === 'string') {
                this.buffer.write(sequence, offset, sequence.length, 'binary');
                this.position =
                    offset + sequence.length > this.position ? offset + sequence.length : this.position;
            }
        };
        /**
         * Reads **length** bytes starting at **position**.
         *
         * @param position - read from the given position in the Binary.
         * @param length - the number of bytes to read.
         */
        Binary.prototype.read = function (position, length) {
            length = length && length > 0 ? length : this.position;
            // Let's return the data based on the type we have
            return this.buffer.slice(position, position + length);
        };
        /**
         * Returns the value of this binary as a string.
         * @param asRaw - Will skip converting to a string
         * @remarks
         * This is handy when calling this function conditionally for some key value pairs and not others
         */
        Binary.prototype.value = function (asRaw) {
            asRaw = !!asRaw;
            // Optimize to serialize for the situation where the data == size of buffer
            if (asRaw && this.buffer.length === this.position) {
                return this.buffer;
            }
            // If it's a node.js buffer object
            if (asRaw) {
                return this.buffer.slice(0, this.position);
            }
            return this.buffer.toString('binary', 0, this.position);
        };
        /** the length of the binary sequence */
        Binary.prototype.length = function () {
            return this.position;
        };
        Binary.prototype.toJSON = function () {
            return this.buffer.toString('base64');
        };
        Binary.prototype.toString = function (format) {
            return this.buffer.toString(format);
        };
        /** @internal */
        Binary.prototype.toExtendedJSON = function (options) {
            options = options || {};
            var base64String = this.buffer.toString('base64');
            var subType = Number(this.sub_type).toString(16);
            if (options.legacy) {
                return {
                    $binary: base64String,
                    $type: subType.length === 1 ? '0' + subType : subType
                };
            }
            return {
                $binary: {
                    base64: base64String,
                    subType: subType.length === 1 ? '0' + subType : subType
                }
            };
        };
        Binary.prototype.toUUID = function () {
            if (this.sub_type === Binary.SUBTYPE_UUID) {
                return new UUID(this.buffer.slice(0, this.position));
            }
            throw new BSONError("Binary sub_type \"" + this.sub_type + "\" is not supported for converting to UUID. Only \"" + Binary.SUBTYPE_UUID + "\" is currently supported.");
        };
        /** @internal */
        Binary.fromExtendedJSON = function (doc, options) {
            options = options || {};
            var data;
            var type;
            if ('$binary' in doc) {
                if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {
                    type = doc.$type ? parseInt(doc.$type, 16) : 0;
                    data = buffer_1.from(doc.$binary, 'base64');
                }
                else {
                    if (typeof doc.$binary !== 'string') {
                        type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;
                        data = buffer_1.from(doc.$binary.base64, 'base64');
                    }
                }
            }
            else if ('$uuid' in doc) {
                type = 4;
                data = uuidHexStringToBuffer(doc.$uuid);
            }
            if (!data) {
                throw new BSONTypeError("Unexpected Binary Extended JSON format " + JSON.stringify(doc));
            }
            return new Binary(data, type);
        };
        /** @internal */
        Binary.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Binary.prototype.inspect = function () {
            var asBuffer = this.value(true);
            return "new Binary(Buffer.from(\"" + asBuffer.toString('hex') + "\", \"hex\"), " + this.sub_type + ")";
        };
        /**
         * Binary default subtype
         * @internal
         */
        Binary.BSON_BINARY_SUBTYPE_DEFAULT = 0;
        /** Initial buffer default size */
        Binary.BUFFER_SIZE = 256;
        /** Default BSON type */
        Binary.SUBTYPE_DEFAULT = 0;
        /** Function BSON type */
        Binary.SUBTYPE_FUNCTION = 1;
        /** Byte Array BSON type */
        Binary.SUBTYPE_BYTE_ARRAY = 2;
        /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */
        Binary.SUBTYPE_UUID_OLD = 3;
        /** UUID BSON type */
        Binary.SUBTYPE_UUID = 4;
        /** MD5 BSON type */
        Binary.SUBTYPE_MD5 = 5;
        /** Encrypted BSON type */
        Binary.SUBTYPE_ENCRYPTED = 6;
        /** Column BSON type */
        Binary.SUBTYPE_COLUMN = 7;
        /** User BSON type */
        Binary.SUBTYPE_USER_DEFINED = 128;
        return Binary;
    }());
    Object.defineProperty(Binary.prototype, '_bsontype', { value: 'Binary' });

    /**
     * A class representation of the BSON Code type.
     * @public
     */
    var Code = /** @class */ (function () {
        /**
         * @param code - a string or function.
         * @param scope - an optional scope for the function.
         */
        function Code(code, scope) {
            if (!(this instanceof Code))
                return new Code(code, scope);
            this.code = code;
            this.scope = scope;
        }
        Code.prototype.toJSON = function () {
            return { code: this.code, scope: this.scope };
        };
        /** @internal */
        Code.prototype.toExtendedJSON = function () {
            if (this.scope) {
                return { $code: this.code, $scope: this.scope };
            }
            return { $code: this.code };
        };
        /** @internal */
        Code.fromExtendedJSON = function (doc) {
            return new Code(doc.$code, doc.$scope);
        };
        /** @internal */
        Code.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Code.prototype.inspect = function () {
            var codeJson = this.toJSON();
            return "new Code(\"" + codeJson.code + "\"" + (codeJson.scope ? ", " + JSON.stringify(codeJson.scope) : '') + ")";
        };
        return Code;
    }());
    Object.defineProperty(Code.prototype, '_bsontype', { value: 'Code' });

    /** @internal */
    function isDBRefLike(value) {
        return (isObjectLike(value) &&
            value.$id != null &&
            typeof value.$ref === 'string' &&
            (value.$db == null || typeof value.$db === 'string'));
    }
    /**
     * A class representation of the BSON DBRef type.
     * @public
     */
    var DBRef = /** @class */ (function () {
        /**
         * @param collection - the collection name.
         * @param oid - the reference ObjectId.
         * @param db - optional db name, if omitted the reference is local to the current db.
         */
        function DBRef(collection, oid, db, fields) {
            if (!(this instanceof DBRef))
                return new DBRef(collection, oid, db, fields);
            // check if namespace has been provided
            var parts = collection.split('.');
            if (parts.length === 2) {
                db = parts.shift();
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                collection = parts.shift();
            }
            this.collection = collection;
            this.oid = oid;
            this.db = db;
            this.fields = fields || {};
        }
        Object.defineProperty(DBRef.prototype, "namespace", {
            // Property provided for compatibility with the 1.x parser
            // the 1.x parser used a "namespace" property, while 4.x uses "collection"
            /** @internal */
            get: function () {
                return this.collection;
            },
            set: function (value) {
                this.collection = value;
            },
            enumerable: false,
            configurable: true
        });
        DBRef.prototype.toJSON = function () {
            var o = Object.assign({
                $ref: this.collection,
                $id: this.oid
            }, this.fields);
            if (this.db != null)
                o.$db = this.db;
            return o;
        };
        /** @internal */
        DBRef.prototype.toExtendedJSON = function (options) {
            options = options || {};
            var o = {
                $ref: this.collection,
                $id: this.oid
            };
            if (options.legacy) {
                return o;
            }
            if (this.db)
                o.$db = this.db;
            o = Object.assign(o, this.fields);
            return o;
        };
        /** @internal */
        DBRef.fromExtendedJSON = function (doc) {
            var copy = Object.assign({}, doc);
            delete copy.$ref;
            delete copy.$id;
            delete copy.$db;
            return new DBRef(doc.$ref, doc.$id, doc.$db, copy);
        };
        /** @internal */
        DBRef.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        DBRef.prototype.inspect = function () {
            // NOTE: if OID is an ObjectId class it will just print the oid string.
            var oid = this.oid === undefined || this.oid.toString === undefined ? this.oid : this.oid.toString();
            return "new DBRef(\"" + this.namespace + "\", new ObjectId(\"" + oid + "\")" + (this.db ? ", \"" + this.db + "\"" : '') + ")";
        };
        return DBRef;
    }());
    Object.defineProperty(DBRef.prototype, '_bsontype', { value: 'DBRef' });

    /**
     * wasm optimizations, to do native i64 multiplication and divide
     */
    var wasm = undefined;
    try {
        wasm = new WebAssembly.Instance(new WebAssembly.Module(
        // prettier-ignore
        new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
    }
    catch (_a) {
        // no wasm support
    }
    var TWO_PWR_16_DBL = 1 << 16;
    var TWO_PWR_24_DBL = 1 << 24;
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    /** A cache of the Long representations of small integer values. */
    var INT_CACHE = {};
    /** A cache of the Long representations of small unsigned integer values. */
    var UINT_CACHE = {};
    /**
     * A class representing a 64-bit integer
     * @public
     * @remarks
     * The internal representation of a long is the two given signed, 32-bit values.
     * We use 32-bit pieces because these are the size of integers on which
     * Javascript performs bit-operations.  For operations like addition and
     * multiplication, we split each number into 16 bit pieces, which can easily be
     * multiplied within Javascript's floating-point representation without overflow
     * or change in sign.
     * In the algorithms below, we frequently reduce the negative case to the
     * positive case by negating the input(s) and then post-processing the result.
     * Note that we must ALWAYS check specially whether those values are MIN_VALUE
     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
     * a positive number, it overflows back into a negative).  Not handling this
     * case would often result in infinite recursion.
     * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.
     */
    var Long = /** @class */ (function () {
        /**
         * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
         *  See the from* functions below for more convenient ways of constructing Longs.
         *
         * Acceptable signatures are:
         * - Long(low, high, unsigned?)
         * - Long(bigint, unsigned?)
         * - Long(string, unsigned?)
         *
         * @param low - The low (signed) 32 bits of the long
         * @param high - The high (signed) 32 bits of the long
         * @param unsigned - Whether unsigned or not, defaults to signed
         */
        function Long(low, high, unsigned) {
            if (low === void 0) { low = 0; }
            if (!(this instanceof Long))
                return new Long(low, high, unsigned);
            if (typeof low === 'bigint') {
                Object.assign(this, Long.fromBigInt(low, !!high));
            }
            else if (typeof low === 'string') {
                Object.assign(this, Long.fromString(low, !!high));
            }
            else {
                this.low = low | 0;
                this.high = high | 0;
                this.unsigned = !!unsigned;
            }
            Object.defineProperty(this, '__isLong__', {
                value: true,
                configurable: false,
                writable: false,
                enumerable: false
            });
        }
        /**
         * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.
         * Each is assumed to use 32 bits.
         * @param lowBits - The low 32 bits
         * @param highBits - The high 32 bits
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @returns The corresponding Long value
         */
        Long.fromBits = function (lowBits, highBits, unsigned) {
            return new Long(lowBits, highBits, unsigned);
        };
        /**
         * Returns a Long representing the given 32 bit integer value.
         * @param value - The 32 bit integer in question
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @returns The corresponding Long value
         */
        Long.fromInt = function (value, unsigned) {
            var obj, cachedObj, cache;
            if (unsigned) {
                value >>>= 0;
                if ((cache = 0 <= value && value < 256)) {
                    cachedObj = UINT_CACHE[value];
                    if (cachedObj)
                        return cachedObj;
                }
                obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);
                if (cache)
                    UINT_CACHE[value] = obj;
                return obj;
            }
            else {
                value |= 0;
                if ((cache = -128 <= value && value < 128)) {
                    cachedObj = INT_CACHE[value];
                    if (cachedObj)
                        return cachedObj;
                }
                obj = Long.fromBits(value, value < 0 ? -1 : 0, false);
                if (cache)
                    INT_CACHE[value] = obj;
                return obj;
            }
        };
        /**
         * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
         * @param value - The number in question
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @returns The corresponding Long value
         */
        Long.fromNumber = function (value, unsigned) {
            if (isNaN(value))
                return unsigned ? Long.UZERO : Long.ZERO;
            if (unsigned) {
                if (value < 0)
                    return Long.UZERO;
                if (value >= TWO_PWR_64_DBL)
                    return Long.MAX_UNSIGNED_VALUE;
            }
            else {
                if (value <= -TWO_PWR_63_DBL)
                    return Long.MIN_VALUE;
                if (value + 1 >= TWO_PWR_63_DBL)
                    return Long.MAX_VALUE;
            }
            if (value < 0)
                return Long.fromNumber(-value, unsigned).neg();
            return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
        };
        /**
         * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
         * @param value - The number in question
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @returns The corresponding Long value
         */
        Long.fromBigInt = function (value, unsigned) {
            return Long.fromString(value.toString(), unsigned);
        };
        /**
         * Returns a Long representation of the given string, written using the specified radix.
         * @param str - The textual representation of the Long
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @param radix - The radix in which the text is written (2-36), defaults to 10
         * @returns The corresponding Long value
         */
        Long.fromString = function (str, unsigned, radix) {
            if (str.length === 0)
                throw Error('empty string');
            if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity')
                return Long.ZERO;
            if (typeof unsigned === 'number') {
                // For goog.math.long compatibility
                (radix = unsigned), (unsigned = false);
            }
            else {
                unsigned = !!unsigned;
            }
            radix = radix || 10;
            if (radix < 2 || 36 < radix)
                throw RangeError('radix');
            var p;
            if ((p = str.indexOf('-')) > 0)
                throw Error('interior hyphen');
            else if (p === 0) {
                return Long.fromString(str.substring(1), unsigned, radix).neg();
            }
            // Do several (8) digits each time through the loop, so as to
            // minimize the calls to the very expensive emulated div.
            var radixToPower = Long.fromNumber(Math.pow(radix, 8));
            var result = Long.ZERO;
            for (var i = 0; i < str.length; i += 8) {
                var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
                if (size < 8) {
                    var power = Long.fromNumber(Math.pow(radix, size));
                    result = result.mul(power).add(Long.fromNumber(value));
                }
                else {
                    result = result.mul(radixToPower);
                    result = result.add(Long.fromNumber(value));
                }
            }
            result.unsigned = unsigned;
            return result;
        };
        /**
         * Creates a Long from its byte representation.
         * @param bytes - Byte representation
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @param le - Whether little or big endian, defaults to big endian
         * @returns The corresponding Long value
         */
        Long.fromBytes = function (bytes, unsigned, le) {
            return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
        };
        /**
         * Creates a Long from its little endian byte representation.
         * @param bytes - Little endian byte representation
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @returns The corresponding Long value
         */
        Long.fromBytesLE = function (bytes, unsigned) {
            return new Long(bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24), bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24), unsigned);
        };
        /**
         * Creates a Long from its big endian byte representation.
         * @param bytes - Big endian byte representation
         * @param unsigned - Whether unsigned or not, defaults to signed
         * @returns The corresponding Long value
         */
        Long.fromBytesBE = function (bytes, unsigned) {
            return new Long((bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7], (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3], unsigned);
        };
        /**
         * Tests if the specified object is a Long.
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
        Long.isLong = function (value) {
            return isObjectLike(value) && value['__isLong__'] === true;
        };
        /**
         * Converts the specified value to a Long.
         * @param unsigned - Whether unsigned or not, defaults to signed
         */
        Long.fromValue = function (val, unsigned) {
            if (typeof val === 'number')
                return Long.fromNumber(val, unsigned);
            if (typeof val === 'string')
                return Long.fromString(val, unsigned);
            // Throws for non-objects, converts non-instanceof Long:
            return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
        };
        /** Returns the sum of this and the specified Long. */
        Long.prototype.add = function (addend) {
            if (!Long.isLong(addend))
                addend = Long.fromValue(addend);
            // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
            var a48 = this.high >>> 16;
            var a32 = this.high & 0xffff;
            var a16 = this.low >>> 16;
            var a00 = this.low & 0xffff;
            var b48 = addend.high >>> 16;
            var b32 = addend.high & 0xffff;
            var b16 = addend.low >>> 16;
            var b00 = addend.low & 0xffff;
            var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
            c00 += a00 + b00;
            c16 += c00 >>> 16;
            c00 &= 0xffff;
            c16 += a16 + b16;
            c32 += c16 >>> 16;
            c16 &= 0xffff;
            c32 += a32 + b32;
            c48 += c32 >>> 16;
            c32 &= 0xffff;
            c48 += a48 + b48;
            c48 &= 0xffff;
            return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
        };
        /**
         * Returns the sum of this and the specified Long.
         * @returns Sum
         */
        Long.prototype.and = function (other) {
            if (!Long.isLong(other))
                other = Long.fromValue(other);
            return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
        };
        /**
         * Compares this Long's value with the specified's.
         * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater
         */
        Long.prototype.compare = function (other) {
            if (!Long.isLong(other))
                other = Long.fromValue(other);
            if (this.eq(other))
                return 0;
            var thisNeg = this.isNegative(), otherNeg = other.isNegative();
            if (thisNeg && !otherNeg)
                return -1;
            if (!thisNeg && otherNeg)
                return 1;
            // At this point the sign bits are the same
            if (!this.unsigned)
                return this.sub(other).isNegative() ? -1 : 1;
            // Both are positive if at least one is unsigned
            return other.high >>> 0 > this.high >>> 0 ||
                (other.high === this.high && other.low >>> 0 > this.low >>> 0)
                ? -1
                : 1;
        };
        /** This is an alias of {@link Long.compare} */
        Long.prototype.comp = function (other) {
            return this.compare(other);
        };
        /**
         * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.
         * @returns Quotient
         */
        Long.prototype.divide = function (divisor) {
            if (!Long.isLong(divisor))
                divisor = Long.fromValue(divisor);
            if (divisor.isZero())
                throw Error('division by zero');
            // use wasm support if present
            if (wasm) {
                // guard against signed division overflow: the largest
                // negative number / -1 would be 1 larger than the largest
                // positive number, due to two's complement.
                if (!this.unsigned &&
                    this.high === -0x80000000 &&
                    divisor.low === -1 &&
                    divisor.high === -1) {
                    // be consistent with non-wasm code path
                    return this;
                }
                var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
                return Long.fromBits(low, wasm.get_high(), this.unsigned);
            }
            if (this.isZero())
                return this.unsigned ? Long.UZERO : Long.ZERO;
            var approx, rem, res;
            if (!this.unsigned) {
                // This section is only relevant for signed longs and is derived from the
                // closure library as a whole.
                if (this.eq(Long.MIN_VALUE)) {
                    if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE))
                        return Long.MIN_VALUE;
                    // recall that -MIN_VALUE == MIN_VALUE
                    else if (divisor.eq(Long.MIN_VALUE))
                        return Long.ONE;
                    else {
                        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                        var halfThis = this.shr(1);
                        approx = halfThis.div(divisor).shl(1);
                        if (approx.eq(Long.ZERO)) {
                            return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;
                        }
                        else {
                            rem = this.sub(divisor.mul(approx));
                            res = approx.add(rem.div(divisor));
                            return res;
                        }
                    }
                }
                else if (divisor.eq(Long.MIN_VALUE))
                    return this.unsigned ? Long.UZERO : Long.ZERO;
                if (this.isNegative()) {
                    if (divisor.isNegative())
                        return this.neg().div(divisor.neg());
                    return this.neg().div(divisor).neg();
                }
                else if (divisor.isNegative())
                    return this.div(divisor.neg()).neg();
                res = Long.ZERO;
            }
            else {
                // The algorithm below has not been made for unsigned longs. It's therefore
                // required to take special care of the MSB prior to running it.
                if (!divisor.unsigned)
                    divisor = divisor.toUnsigned();
                if (divisor.gt(this))
                    return Long.UZERO;
                if (divisor.gt(this.shru(1)))
                    // 15 >>> 1 = 7 ; with divisor = 8 ; true
                    return Long.UONE;
                res = Long.UZERO;
            }
            // Repeat the following until the remainder is less than other:  find a
            // floating-point that approximates remainder / other *from below*, add this
            // into the result, and subtract it from the remainder.  It is critical that
            // the approximate value is less than or equal to the real value so that the
            // remainder never becomes negative.
            rem = this;
            while (rem.gte(divisor)) {
                // Approximate the result of division. This may be a little greater or
                // smaller than the actual value.
                approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
                // We will tweak the approximate result by changing it in the 48-th digit or
                // the smallest non-fractional digit, whichever is larger.
                var log2 = Math.ceil(Math.log(approx) / Math.LN2);
                var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
                // Decrease the approximation until it is smaller than the remainder.  Note
                // that if it is too large, the product overflows and is negative.
                var approxRes = Long.fromNumber(approx);
                var approxRem = approxRes.mul(divisor);
                while (approxRem.isNegative() || approxRem.gt(rem)) {
                    approx -= delta;
                    approxRes = Long.fromNumber(approx, this.unsigned);
                    approxRem = approxRes.mul(divisor);
                }
                // We know the answer can't be zero... and actually, zero would cause
                // infinite recursion since we would make no progress.
                if (approxRes.isZero())
                    approxRes = Long.ONE;
                res = res.add(approxRes);
                rem = rem.sub(approxRem);
            }
            return res;
        };
        /**This is an alias of {@link Long.divide} */
        Long.prototype.div = function (divisor) {
            return this.divide(divisor);
        };
        /**
         * Tests if this Long's value equals the specified's.
         * @param other - Other value
         */
        Long.prototype.equals = function (other) {
            if (!Long.isLong(other))
                other = Long.fromValue(other);
            if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
                return false;
            return this.high === other.high && this.low === other.low;
        };
        /** This is an alias of {@link Long.equals} */
        Long.prototype.eq = function (other) {
            return this.equals(other);
        };
        /** Gets the high 32 bits as a signed integer. */
        Long.prototype.getHighBits = function () {
            return this.high;
        };
        /** Gets the high 32 bits as an unsigned integer. */
        Long.prototype.getHighBitsUnsigned = function () {
            return this.high >>> 0;
        };
        /** Gets the low 32 bits as a signed integer. */
        Long.prototype.getLowBits = function () {
            return this.low;
        };
        /** Gets the low 32 bits as an unsigned integer. */
        Long.prototype.getLowBitsUnsigned = function () {
            return this.low >>> 0;
        };
        /** Gets the number of bits needed to represent the absolute value of this Long. */
        Long.prototype.getNumBitsAbs = function () {
            if (this.isNegative()) {
                // Unsigned Longs are never negative
                return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
            }
            var val = this.high !== 0 ? this.high : this.low;
            var bit;
            for (bit = 31; bit > 0; bit--)
                if ((val & (1 << bit)) !== 0)
                    break;
            return this.high !== 0 ? bit + 33 : bit + 1;
        };
        /** Tests if this Long's value is greater than the specified's. */
        Long.prototype.greaterThan = function (other) {
            return this.comp(other) > 0;
        };
        /** This is an alias of {@link Long.greaterThan} */
        Long.prototype.gt = function (other) {
            return this.greaterThan(other);
        };
        /** Tests if this Long's value is greater than or equal the specified's. */
        Long.prototype.greaterThanOrEqual = function (other) {
            return this.comp(other) >= 0;
        };
        /** This is an alias of {@link Long.greaterThanOrEqual} */
        Long.prototype.gte = function (other) {
            return this.greaterThanOrEqual(other);
        };
        /** This is an alias of {@link Long.greaterThanOrEqual} */
        Long.prototype.ge = function (other) {
            return this.greaterThanOrEqual(other);
        };
        /** Tests if this Long's value is even. */
        Long.prototype.isEven = function () {
            return (this.low & 1) === 0;
        };
        /** Tests if this Long's value is negative. */
        Long.prototype.isNegative = function () {
            return !this.unsigned && this.high < 0;
        };
        /** Tests if this Long's value is odd. */
        Long.prototype.isOdd = function () {
            return (this.low & 1) === 1;
        };
        /** Tests if this Long's value is positive. */
        Long.prototype.isPositive = function () {
            return this.unsigned || this.high >= 0;
        };
        /** Tests if this Long's value equals zero. */
        Long.prototype.isZero = function () {
            return this.high === 0 && this.low === 0;
        };
        /** Tests if this Long's value is less than the specified's. */
        Long.prototype.lessThan = function (other) {
            return this.comp(other) < 0;
        };
        /** This is an alias of {@link Long#lessThan}. */
        Long.prototype.lt = function (other) {
            return this.lessThan(other);
        };
        /** Tests if this Long's value is less than or equal the specified's. */
        Long.prototype.lessThanOrEqual = function (other) {
            return this.comp(other) <= 0;
        };
        /** This is an alias of {@link Long.lessThanOrEqual} */
        Long.prototype.lte = function (other) {
            return this.lessThanOrEqual(other);
        };
        /** Returns this Long modulo the specified. */
        Long.prototype.modulo = function (divisor) {
            if (!Long.isLong(divisor))
                divisor = Long.fromValue(divisor);
            // use wasm support if present
            if (wasm) {
                var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
                return Long.fromBits(low, wasm.get_high(), this.unsigned);
            }
            return this.sub(this.div(divisor).mul(divisor));
        };
        /** This is an alias of {@link Long.modulo} */
        Long.prototype.mod = function (divisor) {
            return this.modulo(divisor);
        };
        /** This is an alias of {@link Long.modulo} */
        Long.prototype.rem = function (divisor) {
            return this.modulo(divisor);
        };
        /**
         * Returns the product of this and the specified Long.
         * @param multiplier - Multiplier
         * @returns Product
         */
        Long.prototype.multiply = function (multiplier) {
            if (this.isZero())
                return Long.ZERO;
            if (!Long.isLong(multiplier))
                multiplier = Long.fromValue(multiplier);
            // use wasm support if present
            if (wasm) {
                var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
                return Long.fromBits(low, wasm.get_high(), this.unsigned);
            }
            if (multiplier.isZero())
                return Long.ZERO;
            if (this.eq(Long.MIN_VALUE))
                return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;
            if (multiplier.eq(Long.MIN_VALUE))
                return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
            if (this.isNegative()) {
                if (multiplier.isNegative())
                    return this.neg().mul(multiplier.neg());
                else
                    return this.neg().mul(multiplier).neg();
            }
            else if (multiplier.isNegative())
                return this.mul(multiplier.neg()).neg();
            // If both longs are small, use float multiplication
            if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))
                return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
            // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
            // We can skip products that would overflow.
            var a48 = this.high >>> 16;
            var a32 = this.high & 0xffff;
            var a16 = this.low >>> 16;
            var a00 = this.low & 0xffff;
            var b48 = multiplier.high >>> 16;
            var b32 = multiplier.high & 0xffff;
            var b16 = multiplier.low >>> 16;
            var b00 = multiplier.low & 0xffff;
            var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
            c00 += a00 * b00;
            c16 += c00 >>> 16;
            c00 &= 0xffff;
            c16 += a16 * b00;
            c32 += c16 >>> 16;
            c16 &= 0xffff;
            c16 += a00 * b16;
            c32 += c16 >>> 16;
            c16 &= 0xffff;
            c32 += a32 * b00;
            c48 += c32 >>> 16;
            c32 &= 0xffff;
            c32 += a16 * b16;
            c48 += c32 >>> 16;
            c32 &= 0xffff;
            c32 += a00 * b32;
            c48 += c32 >>> 16;
            c32 &= 0xffff;
            c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
            c48 &= 0xffff;
            return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
        };
        /** This is an alias of {@link Long.multiply} */
        Long.prototype.mul = function (multiplier) {
            return this.multiply(multiplier);
        };
        /** Returns the Negation of this Long's value. */
        Long.prototype.negate = function () {
            if (!this.unsigned && this.eq(Long.MIN_VALUE))
                return Long.MIN_VALUE;
            return this.not().add(Long.ONE);
        };
        /** This is an alias of {@link Long.negate} */
        Long.prototype.neg = function () {
            return this.negate();
        };
        /** Returns the bitwise NOT of this Long. */
        Long.prototype.not = function () {
            return Long.fromBits(~this.low, ~this.high, this.unsigned);
        };
        /** Tests if this Long's value differs from the specified's. */
        Long.prototype.notEquals = function (other) {
            return !this.equals(other);
        };
        /** This is an alias of {@link Long.notEquals} */
        Long.prototype.neq = function (other) {
            return this.notEquals(other);
        };
        /** This is an alias of {@link Long.notEquals} */
        Long.prototype.ne = function (other) {
            return this.notEquals(other);
        };
        /**
         * Returns the bitwise OR of this Long and the specified.
         */
        Long.prototype.or = function (other) {
            if (!Long.isLong(other))
                other = Long.fromValue(other);
            return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
        };
        /**
         * Returns this Long with bits shifted to the left by the given amount.
         * @param numBits - Number of bits
         * @returns Shifted Long
         */
        Long.prototype.shiftLeft = function (numBits) {
            if (Long.isLong(numBits))
                numBits = numBits.toInt();
            if ((numBits &= 63) === 0)
                return this;
            else if (numBits < 32)
                return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
            else
                return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);
        };
        /** This is an alias of {@link Long.shiftLeft} */
        Long.prototype.shl = function (numBits) {
            return this.shiftLeft(numBits);
        };
        /**
         * Returns this Long with bits arithmetically shifted to the right by the given amount.
         * @param numBits - Number of bits
         * @returns Shifted Long
         */
        Long.prototype.shiftRight = function (numBits) {
            if (Long.isLong(numBits))
                numBits = numBits.toInt();
            if ((numBits &= 63) === 0)
                return this;
            else if (numBits < 32)
                return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
            else
                return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
        };
        /** This is an alias of {@link Long.shiftRight} */
        Long.prototype.shr = function (numBits) {
            return this.shiftRight(numBits);
        };
        /**
         * Returns this Long with bits logically shifted to the right by the given amount.
         * @param numBits - Number of bits
         * @returns Shifted Long
         */
        Long.prototype.shiftRightUnsigned = function (numBits) {
            if (Long.isLong(numBits))
                numBits = numBits.toInt();
            numBits &= 63;
            if (numBits === 0)
                return this;
            else {
                var high = this.high;
                if (numBits < 32) {
                    var low = this.low;
                    return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
                }
                else if (numBits === 32)
                    return Long.fromBits(high, 0, this.unsigned);
                else
                    return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);
            }
        };
        /** This is an alias of {@link Long.shiftRightUnsigned} */
        Long.prototype.shr_u = function (numBits) {
            return this.shiftRightUnsigned(numBits);
        };
        /** This is an alias of {@link Long.shiftRightUnsigned} */
        Long.prototype.shru = function (numBits) {
            return this.shiftRightUnsigned(numBits);
        };
        /**
         * Returns the difference of this and the specified Long.
         * @param subtrahend - Subtrahend
         * @returns Difference
         */
        Long.prototype.subtract = function (subtrahend) {
            if (!Long.isLong(subtrahend))
                subtrahend = Long.fromValue(subtrahend);
            return this.add(subtrahend.neg());
        };
        /** This is an alias of {@link Long.subtract} */
        Long.prototype.sub = function (subtrahend) {
            return this.subtract(subtrahend);
        };
        /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */
        Long.prototype.toInt = function () {
            return this.unsigned ? this.low >>> 0 : this.low;
        };
        /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */
        Long.prototype.toNumber = function () {
            if (this.unsigned)
                return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
            return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
        };
        /** Converts the Long to a BigInt (arbitrary precision). */
        Long.prototype.toBigInt = function () {
            return BigInt(this.toString());
        };
        /**
         * Converts this Long to its byte representation.
         * @param le - Whether little or big endian, defaults to big endian
         * @returns Byte representation
         */
        Long.prototype.toBytes = function (le) {
            return le ? this.toBytesLE() : this.toBytesBE();
        };
        /**
         * Converts this Long to its little endian byte representation.
         * @returns Little endian byte representation
         */
        Long.prototype.toBytesLE = function () {
            var hi = this.high, lo = this.low;
            return [
                lo & 0xff,
                (lo >>> 8) & 0xff,
                (lo >>> 16) & 0xff,
                lo >>> 24,
                hi & 0xff,
                (hi >>> 8) & 0xff,
                (hi >>> 16) & 0xff,
                hi >>> 24
            ];
        };
        /**
         * Converts this Long to its big endian byte representation.
         * @returns Big endian byte representation
         */
        Long.prototype.toBytesBE = function () {
            var hi = this.high, lo = this.low;
            return [
                hi >>> 24,
                (hi >>> 16) & 0xff,
                (hi >>> 8) & 0xff,
                hi & 0xff,
                lo >>> 24,
                (lo >>> 16) & 0xff,
                (lo >>> 8) & 0xff,
                lo & 0xff
            ];
        };
        /**
         * Converts this Long to signed.
         */
        Long.prototype.toSigned = function () {
            if (!this.unsigned)
                return this;
            return Long.fromBits(this.low, this.high, false);
        };
        /**
         * Converts the Long to a string written in the specified radix.
         * @param radix - Radix (2-36), defaults to 10
         * @throws RangeError If `radix` is out of range
         */
        Long.prototype.toString = function (radix) {
            radix = radix || 10;
            if (radix < 2 || 36 < radix)
                throw RangeError('radix');
            if (this.isZero())
                return '0';
            if (this.isNegative()) {
                // Unsigned Longs are never negative
                if (this.eq(Long.MIN_VALUE)) {
                    // We need to change the Long value before it can be negated, so we remove
                    // the bottom-most digit in this base and then recurse to do the rest.
                    var radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
                    return div.toString(radix) + rem1.toInt().toString(radix);
                }
                else
                    return '-' + this.neg().toString(radix);
            }
            // Do several (6) digits each time through the loop, so as to
            // minimize the calls to the very expensive emulated div.
            var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var rem = this;
            var result = '';
            // eslint-disable-next-line no-constant-condition
            while (true) {
                var remDiv = rem.div(radixToPower);
                var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;
                var digits = intval.toString(radix);
                rem = remDiv;
                if (rem.isZero()) {
                    return digits + result;
                }
                else {
                    while (digits.length < 6)
                        digits = '0' + digits;
                    result = '' + digits + result;
                }
            }
        };
        /** Converts this Long to unsigned. */
        Long.prototype.toUnsigned = function () {
            if (this.unsigned)
                return this;
            return Long.fromBits(this.low, this.high, true);
        };
        /** Returns the bitwise XOR of this Long and the given one. */
        Long.prototype.xor = function (other) {
            if (!Long.isLong(other))
                other = Long.fromValue(other);
            return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
        };
        /** This is an alias of {@link Long.isZero} */
        Long.prototype.eqz = function () {
            return this.isZero();
        };
        /** This is an alias of {@link Long.lessThanOrEqual} */
        Long.prototype.le = function (other) {
            return this.lessThanOrEqual(other);
        };
        /*
         ****************************************************************
         *                  BSON SPECIFIC ADDITIONS                     *
         ****************************************************************
         */
        Long.prototype.toExtendedJSON = function (options) {
            if (options && options.relaxed)
                return this.toNumber();
            return { $numberLong: this.toString() };
        };
        Long.fromExtendedJSON = function (doc, options) {
            var result = Long.fromString(doc.$numberLong);
            return options && options.relaxed ? result.toNumber() : result;
        };
        /** @internal */
        Long.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Long.prototype.inspect = function () {
            return "new Long(\"" + this.toString() + "\"" + (this.unsigned ? ', true' : '') + ")";
        };
        Long.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);
        /** Maximum unsigned value. */
        Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);
        /** Signed zero */
        Long.ZERO = Long.fromInt(0);
        /** Unsigned zero. */
        Long.UZERO = Long.fromInt(0, true);
        /** Signed one. */
        Long.ONE = Long.fromInt(1);
        /** Unsigned one. */
        Long.UONE = Long.fromInt(1, true);
        /** Signed negative one. */
        Long.NEG_ONE = Long.fromInt(-1);
        /** Maximum signed value. */
        Long.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);
        /** Minimum signed value. */
        Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);
        return Long;
    }());
    Object.defineProperty(Long.prototype, '__isLong__', { value: true });
    Object.defineProperty(Long.prototype, '_bsontype', { value: 'Long' });

    var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
    var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
    var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
    var EXPONENT_MAX = 6111;
    var EXPONENT_MIN = -6176;
    var EXPONENT_BIAS = 6176;
    var MAX_DIGITS = 34;
    // Nan value bits as 32 bit values (due to lack of longs)
    var NAN_BUFFER = [
        0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ].reverse();
    // Infinity value bits 32 bit values (due to lack of longs)
    var INF_NEGATIVE_BUFFER = [
        0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ].reverse();
    var INF_POSITIVE_BUFFER = [
        0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ].reverse();
    var EXPONENT_REGEX = /^([-+])?(\d+)?$/;
    // Extract least significant 5 bits
    var COMBINATION_MASK = 0x1f;
    // Extract least significant 14 bits
    var EXPONENT_MASK = 0x3fff;
    // Value of combination field for Inf
    var COMBINATION_INFINITY = 30;
    // Value of combination field for NaN
    var COMBINATION_NAN = 31;
    // Detect if the value is a digit
    function isDigit(value) {
        return !isNaN(parseInt(value, 10));
    }
    // Divide two uint128 values
    function divideu128(value) {
        var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);
        var _rem = Long.fromNumber(0);
        if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
            return { quotient: value, rem: _rem };
        }
        for (var i = 0; i <= 3; i++) {
            // Adjust remainder to match value of next dividend
            _rem = _rem.shiftLeft(32);
            // Add the divided to _rem
            _rem = _rem.add(new Long(value.parts[i], 0));
            value.parts[i] = _rem.div(DIVISOR).low;
            _rem = _rem.modulo(DIVISOR);
        }
        return { quotient: value, rem: _rem };
    }
    // Multiply two Long values and return the 128 bit value
    function multiply64x2(left, right) {
        if (!left && !right) {
            return { high: Long.fromNumber(0), low: Long.fromNumber(0) };
        }
        var leftHigh = left.shiftRightUnsigned(32);
        var leftLow = new Long(left.getLowBits(), 0);
        var rightHigh = right.shiftRightUnsigned(32);
        var rightLow = new Long(right.getLowBits(), 0);
        var productHigh = leftHigh.multiply(rightHigh);
        var productMid = leftHigh.multiply(rightLow);
        var productMid2 = leftLow.multiply(rightHigh);
        var productLow = leftLow.multiply(rightLow);
        productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
        productMid = new Long(productMid.getLowBits(), 0)
            .add(productMid2)
            .add(productLow.shiftRightUnsigned(32));
        productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
        productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));
        // Return the 128 bit result
        return { high: productHigh, low: productLow };
    }
    function lessThan(left, right) {
        // Make values unsigned
        var uhleft = left.high >>> 0;
        var uhright = right.high >>> 0;
        // Compare high bits first
        if (uhleft < uhright) {
            return true;
        }
        else if (uhleft === uhright) {
            var ulleft = left.low >>> 0;
            var ulright = right.low >>> 0;
            if (ulleft < ulright)
                return true;
        }
        return false;
    }
    function invalidErr(string, message) {
        throw new BSONTypeError("\"" + string + "\" is not a valid Decimal128 string - " + message);
    }
    /**
     * A class representation of the BSON Decimal128 type.
     * @public
     */
    var Decimal128 = /** @class */ (function () {
        /**
         * @param bytes - a buffer containing the raw Decimal128 bytes in little endian order,
         *                or a string representation as returned by .toString()
         */
        function Decimal128(bytes) {
            if (!(this instanceof Decimal128))
                return new Decimal128(bytes);
            if (typeof bytes === 'string') {
                this.bytes = Decimal128.fromString(bytes).bytes;
            }
            else if (isUint8Array(bytes)) {
                if (bytes.byteLength !== 16) {
                    throw new BSONTypeError('Decimal128 must take a Buffer of 16 bytes');
                }
                this.bytes = bytes;
            }
            else {
                throw new BSONTypeError('Decimal128 must take a Buffer or string');
            }
        }
        /**
         * Create a Decimal128 instance from a string representation
         *
         * @param representation - a numeric string representation.
         */
        Decimal128.fromString = function (representation) {
            // Parse state tracking
            var isNegative = false;
            var sawRadix = false;
            var foundNonZero = false;
            // Total number of significant digits (no leading or trailing zero)
            var significantDigits = 0;
            // Total number of significand digits read
            var nDigitsRead = 0;
            // Total number of digits (no leading zeros)
            var nDigits = 0;
            // The number of the digits after radix
            var radixPosition = 0;
            // The index of the first non-zero in *str*
            var firstNonZero = 0;
            // Digits Array
            var digits = [0];
            // The number of digits in digits
            var nDigitsStored = 0;
            // Insertion pointer for digits
            var digitsInsert = 0;
            // The index of the first non-zero digit
            var firstDigit = 0;
            // The index of the last digit
            var lastDigit = 0;
            // Exponent
            var exponent = 0;
            // loop index over array
            var i = 0;
            // The high 17 digits of the significand
            var significandHigh = new Long(0, 0);
            // The low 17 digits of the significand
            var significandLow = new Long(0, 0);
            // The biased exponent
            var biasedExponent = 0;
            // Read index
            var index = 0;
            // Naively prevent against REDOS attacks.
            // TODO: implementing a custom parsing for this, or refactoring the regex would yield
            //       further gains.
            if (representation.length >= 7000) {
                throw new BSONTypeError('' + representation + ' not a valid Decimal128 string');
            }
            // Results
            var stringMatch = representation.match(PARSE_STRING_REGEXP);
            var infMatch = representation.match(PARSE_INF_REGEXP);
            var nanMatch = representation.match(PARSE_NAN_REGEXP);
            // Validate the string
            if ((!stringMatch && !infMatch && !nanMatch) || representation.length === 0) {
                throw new BSONTypeError('' + representation + ' not a valid Decimal128 string');
            }
            if (stringMatch) {
                // full_match = stringMatch[0]
                // sign = stringMatch[1]
                var unsignedNumber = stringMatch[2];
                // stringMatch[3] is undefined if a whole number (ex "1", 12")
                // but defined if a number w/ decimal in it (ex "1.0, 12.2")
                var e = stringMatch[4];
                var expSign = stringMatch[5];
                var expNumber = stringMatch[6];
                // they provided e, but didn't give an exponent number. for ex "1e"
                if (e && expNumber === undefined)
                    invalidErr(representation, 'missing exponent power');
                // they provided e, but didn't give a number before it. for ex "e1"
                if (e && unsignedNumber === undefined)
                    invalidErr(representation, 'missing exponent base');
                if (e === undefined && (expSign || expNumber)) {
                    invalidErr(representation, 'missing e before exponent');
                }
            }
            // Get the negative or positive sign
            if (representation[index] === '+' || representation[index] === '-') {
                isNegative = representation[index++] === '-';
            }
            // Check if user passed Infinity or NaN
            if (!isDigit(representation[index]) && representation[index] !== '.') {
                if (representation[index] === 'i' || representation[index] === 'I') {
                    return new Decimal128(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
                }
                else if (representation[index] === 'N') {
                    return new Decimal128(buffer_1.from(NAN_BUFFER));
                }
            }
            // Read all the digits
            while (isDigit(representation[index]) || representation[index] === '.') {
                if (representation[index] === '.') {
                    if (sawRadix)
                        invalidErr(representation, 'contains multiple periods');
                    sawRadix = true;
                    index = index + 1;
                    continue;
                }
                if (nDigitsStored < 34) {
                    if (representation[index] !== '0' || foundNonZero) {
                        if (!foundNonZero) {
                            firstNonZero = nDigitsRead;
                        }
                        foundNonZero = true;
                        // Only store 34 digits
                        digits[digitsInsert++] = parseInt(representation[index], 10);
                        nDigitsStored = nDigitsStored + 1;
                    }
                }
                if (foundNonZero)
                    nDigits = nDigits + 1;
                if (sawRadix)
                    radixPosition = radixPosition + 1;
                nDigitsRead = nDigitsRead + 1;
                index = index + 1;
            }
            if (sawRadix && !nDigitsRead)
                throw new BSONTypeError('' + representation + ' not a valid Decimal128 string');
            // Read exponent if exists
            if (representation[index] === 'e' || representation[index] === 'E') {
                // Read exponent digits
                var match = representation.substr(++index).match(EXPONENT_REGEX);
                // No digits read
                if (!match || !match[2])
                    return new Decimal128(buffer_1.from(NAN_BUFFER));
                // Get exponent
                exponent = parseInt(match[0], 10);
                // Adjust the index
                index = index + match[0].length;
            }
            // Return not a number
            if (representation[index])
                return new Decimal128(buffer_1.from(NAN_BUFFER));
            // Done reading input
            // Find first non-zero digit in digits
            firstDigit = 0;
            if (!nDigitsStored) {
                firstDigit = 0;
                lastDigit = 0;
                digits[0] = 0;
                nDigits = 1;
                nDigitsStored = 1;
                significantDigits = 0;
            }
            else {
                lastDigit = nDigitsStored - 1;
                significantDigits = nDigits;
                if (significantDigits !== 1) {
                    while (digits[firstNonZero + significantDigits - 1] === 0) {
                        significantDigits = significantDigits - 1;
                    }
                }
            }
            // Normalization of exponent
            // Correct exponent based on radix position, and shift significand as needed
            // to represent user input
            // Overflow prevention
            if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
                exponent = EXPONENT_MIN;
            }
            else {
                exponent = exponent - radixPosition;
            }
            // Attempt to normalize the exponent
            while (exponent > EXPONENT_MAX) {
                // Shift exponent to significand and decrease
                lastDigit = lastDigit + 1;
                if (lastDigit - firstDigit > MAX_DIGITS) {
                    // Check if we have a zero then just hard clamp, otherwise fail
                    var digitsString = digits.join('');
                    if (digitsString.match(/^0+$/)) {
                        exponent = EXPONENT_MAX;
                        break;
                    }
                    invalidErr(representation, 'overflow');
                }
                exponent = exponent - 1;
            }
            while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
                // Shift last digit. can only do this if < significant digits than # stored.
                if (lastDigit === 0 && significantDigits < nDigitsStored) {
                    exponent = EXPONENT_MIN;
                    significantDigits = 0;
                    break;
                }
                if (nDigitsStored < nDigits) {
                    // adjust to match digits not stored
                    nDigits = nDigits - 1;
                }
                else {
                    // adjust to round
                    lastDigit = lastDigit - 1;
                }
                if (exponent < EXPONENT_MAX) {
                    exponent = exponent + 1;
                }
                else {
                    // Check if we have a zero then just hard clamp, otherwise fail
                    var digitsString = digits.join('');
                    if (digitsString.match(/^0+$/)) {
                        exponent = EXPONENT_MAX;
                        break;
                    }
                    invalidErr(representation, 'overflow');
                }
            }
            // Round
            // We've normalized the exponent, but might still need to round.
            if (lastDigit - firstDigit + 1 < significantDigits) {
                var endOfString = nDigitsRead;
                // If we have seen a radix point, 'string' is 1 longer than we have
                // documented with ndigits_read, so inc the position of the first nonzero
                // digit and the position that digits are read to.
                if (sawRadix) {
                    firstNonZero = firstNonZero + 1;
                    endOfString = endOfString + 1;
                }
                // if negative, we need to increment again to account for - sign at start.
                if (isNegative) {
                    firstNonZero = firstNonZero + 1;
                    endOfString = endOfString + 1;
                }
                var roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);
                var roundBit = 0;
                if (roundDigit >= 5) {
                    roundBit = 1;
                    if (roundDigit === 5) {
                        roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;
                        for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {
                            if (parseInt(representation[i], 10)) {
                                roundBit = 1;
                                break;
                            }
                        }
                    }
                }
                if (roundBit) {
                    var dIdx = lastDigit;
                    for (; dIdx >= 0; dIdx--) {
                        if (++digits[dIdx] > 9) {
                            digits[dIdx] = 0;
                            // overflowed most significant digit
                            if (dIdx === 0) {
                                if (exponent < EXPONENT_MAX) {
                                    exponent = exponent + 1;
                                    digits[dIdx] = 1;
                                }
                                else {
                                    return new Decimal128(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
                                }
                            }
                        }
                    }
                }
            }
            // Encode significand
            // The high 17 digits of the significand
            significandHigh = Long.fromNumber(0);
            // The low 17 digits of the significand
            significandLow = Long.fromNumber(0);
            // read a zero
            if (significantDigits === 0) {
                significandHigh = Long.fromNumber(0);
                significandLow = Long.fromNumber(0);
            }
            else if (lastDigit - firstDigit < 17) {
                var dIdx = firstDigit;
                significandLow = Long.fromNumber(digits[dIdx++]);
                significandHigh = new Long(0, 0);
                for (; dIdx <= lastDigit; dIdx++) {
                    significandLow = significandLow.multiply(Long.fromNumber(10));
                    significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
                }
            }
            else {
                var dIdx = firstDigit;
                significandHigh = Long.fromNumber(digits[dIdx++]);
                for (; dIdx <= lastDigit - 17; dIdx++) {
                    significandHigh = significandHigh.multiply(Long.fromNumber(10));
                    significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));
                }
                significandLow = Long.fromNumber(digits[dIdx++]);
                for (; dIdx <= lastDigit; dIdx++) {
                    significandLow = significandLow.multiply(Long.fromNumber(10));
                    significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
                }
            }
            var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));
            significand.low = significand.low.add(significandLow);
            if (lessThan(significand.low, significandLow)) {
                significand.high = significand.high.add(Long.fromNumber(1));
            }
            // Biased exponent
            biasedExponent = exponent + EXPONENT_BIAS;
            var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };
            // Encode combination, exponent, and significand.
            if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {
                // Encode '11' into bits 1 to 3
                dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));
                dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));
                dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));
            }
            else {
                dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));
                dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));
            }
            dec.low = significand.low;
            // Encode sign
            if (isNegative) {
                dec.high = dec.high.or(Long.fromString('9223372036854775808'));
            }
            // Encode into a buffer
            var buffer = buffer_1.alloc(16);
            index = 0;
            // Encode the low 64 bits of the decimal
            // Encode low bits
            buffer[index++] = dec.low.low & 0xff;
            buffer[index++] = (dec.low.low >> 8) & 0xff;
            buffer[index++] = (dec.low.low >> 16) & 0xff;
            buffer[index++] = (dec.low.low >> 24) & 0xff;
            // Encode high bits
            buffer[index++] = dec.low.high & 0xff;
            buffer[index++] = (dec.low.high >> 8) & 0xff;
            buffer[index++] = (dec.low.high >> 16) & 0xff;
            buffer[index++] = (dec.low.high >> 24) & 0xff;
            // Encode the high 64 bits of the decimal
            // Encode low bits
            buffer[index++] = dec.high.low & 0xff;
            buffer[index++] = (dec.high.low >> 8) & 0xff;
            buffer[index++] = (dec.high.low >> 16) & 0xff;
            buffer[index++] = (dec.high.low >> 24) & 0xff;
            // Encode high bits
            buffer[index++] = dec.high.high & 0xff;
            buffer[index++] = (dec.high.high >> 8) & 0xff;
            buffer[index++] = (dec.high.high >> 16) & 0xff;
            buffer[index++] = (dec.high.high >> 24) & 0xff;
            // Return the new Decimal128
            return new Decimal128(buffer);
        };
        /** Create a string representation of the raw Decimal128 value */
        Decimal128.prototype.toString = function () {
            // Note: bits in this routine are referred to starting at 0,
            // from the sign bit, towards the coefficient.
            // decoded biased exponent (14 bits)
            var biased_exponent;
            // the number of significand digits
            var significand_digits = 0;
            // the base-10 digits in the significand
            var significand = new Array(36);
            for (var i = 0; i < significand.length; i++)
                significand[i] = 0;
            // read pointer into significand
            var index = 0;
            // true if the number is zero
            var is_zero = false;
            // the most significant significand bits (50-46)
            var significand_msb;
            // temporary storage for significand decoding
            var significand128 = { parts: [0, 0, 0, 0] };
            // indexing variables
            var j, k;
            // Output string
            var string = [];
            // Unpack index
            index = 0;
            // Buffer reference
            var buffer = this.bytes;
            // Unpack the low 64bits into a long
            // bits 96 - 127
            var low = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
            // bits 64 - 95
            var midl = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
            // Unpack the high 64bits into a long
            // bits 32 - 63
            var midh = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
            // bits 0 - 31
            var high = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
            // Unpack index
            index = 0;
            // Create the state of the decimal
            var dec = {
                low: new Long(low, midl),
                high: new Long(midh, high)
            };
            if (dec.high.lessThan(Long.ZERO)) {
                string.push('-');
            }
            // Decode combination field and exponent
            // bits 1 - 5
            var combination = (high >> 26) & COMBINATION_MASK;
            if (combination >> 3 === 3) {
                // Check for 'special' values
                if (combination === COMBINATION_INFINITY) {
                    return string.join('') + 'Infinity';
                }
                else if (combination === COMBINATION_NAN) {
                    return 'NaN';
                }
                else {
                    biased_exponent = (high >> 15) & EXPONENT_MASK;
                    significand_msb = 0x08 + ((high >> 14) & 0x01);
                }
            }
            else {
                significand_msb = (high >> 14) & 0x07;
                biased_exponent = (high >> 17) & EXPONENT_MASK;
            }
            // unbiased exponent
            var exponent = biased_exponent - EXPONENT_BIAS;
            // Create string of significand digits
            // Convert the 114-bit binary number represented by
            // (significand_high, significand_low) to at most 34 decimal
            // digits through modulo and division.
            significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);
            significand128.parts[1] = midh;
            significand128.parts[2] = midl;
            significand128.parts[3] = low;
            if (significand128.parts[0] === 0 &&
                significand128.parts[1] === 0 &&
                significand128.parts[2] === 0 &&
                significand128.parts[3] === 0) {
                is_zero = true;
            }
            else {
                for (k = 3; k >= 0; k--) {
                    var least_digits = 0;
                    // Perform the divide
                    var result = divideu128(significand128);
                    significand128 = result.quotient;
                    least_digits = result.rem.low;
                    // We now have the 9 least significant digits (in base 2).
                    // Convert and output to string.
                    if (!least_digits)
                        continue;
                    for (j = 8; j >= 0; j--) {
                        // significand[k * 9 + j] = Math.round(least_digits % 10);
                        significand[k * 9 + j] = least_digits % 10;
                        // least_digits = Math.round(least_digits / 10);
                        least_digits = Math.floor(least_digits / 10);
                    }
                }
            }
            // Output format options:
            // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd
            // Regular    - ddd.ddd
            if (is_zero) {
                significand_digits = 1;
                significand[index] = 0;
            }
            else {
                significand_digits = 36;
                while (!significand[index]) {
                    significand_digits = significand_digits - 1;
                    index = index + 1;
                }
            }
            // the exponent if scientific notation is used
            var scientific_exponent = significand_digits - 1 + exponent;
            // The scientific exponent checks are dictated by the string conversion
            // specification and are somewhat arbitrary cutoffs.
            //
            // We must check exponent > 0, because if this is the case, the number
            // has trailing zeros.  However, we *cannot* output these trailing zeros,
            // because doing so would change the precision of the value, and would
            // change stored data if the string converted number is round tripped.
            if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
                // Scientific format
                // if there are too many significant digits, we should just be treating numbers
                // as + or - 0 and using the non-scientific exponent (this is for the "invalid
                // representation should be treated as 0/-0" spec cases in decimal128-1.json)
                if (significand_digits > 34) {
                    string.push("" + 0);
                    if (exponent > 0)
                        string.push('E+' + exponent);
                    else if (exponent < 0)
                        string.push('E' + exponent);
                    return string.join('');
                }
                string.push("" + significand[index++]);
                significand_digits = significand_digits - 1;
                if (significand_digits) {
                    string.push('.');
                }
                for (var i = 0; i < significand_digits; i++) {
                    string.push("" + significand[index++]);
                }
                // Exponent
                string.push('E');
                if (scientific_exponent > 0) {
                    string.push('+' + scientific_exponent);
                }
                else {
                    string.push("" + scientific_exponent);
                }
            }
            else {
                // Regular format with no decimal place
                if (exponent >= 0) {
                    for (var i = 0; i < significand_digits; i++) {
                        string.push("" + significand[index++]);
                    }
                }
                else {
                    var radix_position = significand_digits + exponent;
                    // non-zero digits before radix
                    if (radix_position > 0) {
                        for (var i = 0; i < radix_position; i++) {
                            string.push("" + significand[index++]);
                        }
                    }
                    else {
                        string.push('0');
                    }
                    string.push('.');
                    // add leading zeros after radix
                    while (radix_position++ < 0) {
                        string.push('0');
                    }
                    for (var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {
                        string.push("" + significand[index++]);
                    }
                }
            }
            return string.join('');
        };
        Decimal128.prototype.toJSON = function () {
            return { $numberDecimal: this.toString() };
        };
        /** @internal */
        Decimal128.prototype.toExtendedJSON = function () {
            return { $numberDecimal: this.toString() };
        };
        /** @internal */
        Decimal128.fromExtendedJSON = function (doc) {
            return Decimal128.fromString(doc.$numberDecimal);
        };
        /** @internal */
        Decimal128.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Decimal128.prototype.inspect = function () {
            return "new Decimal128(\"" + this.toString() + "\")";
        };
        return Decimal128;
    }());
    Object.defineProperty(Decimal128.prototype, '_bsontype', { value: 'Decimal128' });

    /**
     * A class representation of the BSON Double type.
     * @public
     */
    var Double = /** @class */ (function () {
        /**
         * Create a Double type
         *
         * @param value - the number we want to represent as a double.
         */
        function Double(value) {
            if (!(this instanceof Double))
                return new Double(value);
            if (value instanceof Number) {
                value = value.valueOf();
            }
            this.value = +value;
        }
        /**
         * Access the number value.
         *
         * @returns returns the wrapped double number.
         */
        Double.prototype.valueOf = function () {
            return this.value;
        };
        Double.prototype.toJSON = function () {
            return this.value;
        };
        Double.prototype.toString = function (radix) {
            return this.value.toString(radix);
        };
        /** @internal */
        Double.prototype.toExtendedJSON = function (options) {
            if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {
                return this.value;
            }
            // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user
            // explicitly provided `-0` then we need to ensure the sign makes it into the output
            if (Object.is(Math.sign(this.value), -0)) {
                return { $numberDouble: "-" + this.value.toFixed(1) };
            }
            var $numberDouble;
            if (Number.isInteger(this.value)) {
                $numberDouble = this.value.toFixed(1);
                if ($numberDouble.length >= 13) {
                    $numberDouble = this.value.toExponential(13).toUpperCase();
                }
            }
            else {
                $numberDouble = this.value.toString();
            }
            return { $numberDouble: $numberDouble };
        };
        /** @internal */
        Double.fromExtendedJSON = function (doc, options) {
            var doubleValue = parseFloat(doc.$numberDouble);
            return options && options.relaxed ? doubleValue : new Double(doubleValue);
        };
        /** @internal */
        Double.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Double.prototype.inspect = function () {
            var eJSON = this.toExtendedJSON();
            return "new Double(" + eJSON.$numberDouble + ")";
        };
        return Double;
    }());
    Object.defineProperty(Double.prototype, '_bsontype', { value: 'Double' });

    /**
     * A class representation of a BSON Int32 type.
     * @public
     */
    var Int32 = /** @class */ (function () {
        /**
         * Create an Int32 type
         *
         * @param value - the number we want to represent as an int32.
         */
        function Int32(value) {
            if (!(this instanceof Int32))
                return new Int32(value);
            if (value instanceof Number) {
                value = value.valueOf();
            }
            this.value = +value | 0;
        }
        /**
         * Access the number value.
         *
         * @returns returns the wrapped int32 number.
         */
        Int32.prototype.valueOf = function () {
            return this.value;
        };
        Int32.prototype.toString = function (radix) {
            return this.value.toString(radix);
        };
        Int32.prototype.toJSON = function () {
            return this.value;
        };
        /** @internal */
        Int32.prototype.toExtendedJSON = function (options) {
            if (options && (options.relaxed || options.legacy))
                return this.value;
            return { $numberInt: this.value.toString() };
        };
        /** @internal */
        Int32.fromExtendedJSON = function (doc, options) {
            return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);
        };
        /** @internal */
        Int32.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Int32.prototype.inspect = function () {
            return "new Int32(" + this.valueOf() + ")";
        };
        return Int32;
    }());
    Object.defineProperty(Int32.prototype, '_bsontype', { value: 'Int32' });

    /**
     * A class representation of the BSON MaxKey type.
     * @public
     */
    var MaxKey = /** @class */ (function () {
        function MaxKey() {
            if (!(this instanceof MaxKey))
                return new MaxKey();
        }
        /** @internal */
        MaxKey.prototype.toExtendedJSON = function () {
            return { $maxKey: 1 };
        };
        /** @internal */
        MaxKey.fromExtendedJSON = function () {
            return new MaxKey();
        };
        /** @internal */
        MaxKey.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        MaxKey.prototype.inspect = function () {
            return 'new MaxKey()';
        };
        return MaxKey;
    }());
    Object.defineProperty(MaxKey.prototype, '_bsontype', { value: 'MaxKey' });

    /**
     * A class representation of the BSON MinKey type.
     * @public
     */
    var MinKey = /** @class */ (function () {
        function MinKey() {
            if (!(this instanceof MinKey))
                return new MinKey();
        }
        /** @internal */
        MinKey.prototype.toExtendedJSON = function () {
            return { $minKey: 1 };
        };
        /** @internal */
        MinKey.fromExtendedJSON = function () {
            return new MinKey();
        };
        /** @internal */
        MinKey.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        MinKey.prototype.inspect = function () {
            return 'new MinKey()';
        };
        return MinKey;
    }());
    Object.defineProperty(MinKey.prototype, '_bsontype', { value: 'MinKey' });

    // Regular expression that checks for hex value
    var checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');
    // Unique sequence for the current process (initialized on first use)
    var PROCESS_UNIQUE = null;
    var kId = Symbol('id');
    /**
     * A class representation of the BSON ObjectId type.
     * @public
     */
    var ObjectId = /** @class */ (function () {
        /**
         * Create an ObjectId type
         *
         * @param inputId - Can be a 24 character hex string, 12 byte binary Buffer, or a number.
         */
        function ObjectId(inputId) {
            if (!(this instanceof ObjectId))
                return new ObjectId(inputId);
            // workingId is set based on type of input and whether valid id exists for the input
            var workingId;
            if (typeof inputId === 'object' && inputId && 'id' in inputId) {
                if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {
                    throw new BSONTypeError('Argument passed in must have an id that is of type string or Buffer');
                }
                if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {
                    workingId = buffer_1.from(inputId.toHexString(), 'hex');
                }
                else {
                    workingId = inputId.id;
                }
            }
            else {
                workingId = inputId;
            }
            // the following cases use workingId to construct an ObjectId
            if (workingId == null || typeof workingId === 'number') {
                // The most common use case (blank id, new objectId instance)
                // Generate a new id
                this[kId] = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);
            }
            else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {
                this[kId] = ensureBuffer(workingId);
            }
            else if (typeof workingId === 'string') {
                if (workingId.length === 12) {
                    var bytes = buffer_1.from(workingId);
                    if (bytes.byteLength === 12) {
                        this[kId] = bytes;
                    }
                    else {
                        throw new BSONTypeError('Argument passed in must be a string of 12 bytes');
                    }
                }
                else if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {
                    this[kId] = buffer_1.from(workingId, 'hex');
                }
                else {
                    throw new BSONTypeError('Argument passed in must be a string of 12 bytes or a string of 24 hex characters');
                }
            }
            else {
                throw new BSONTypeError('Argument passed in does not match the accepted types');
            }
            // If we are caching the hex string
            if (ObjectId.cacheHexString) {
                this.__id = this.id.toString('hex');
            }
        }
        Object.defineProperty(ObjectId.prototype, "id", {
            /**
             * The ObjectId bytes
             * @readonly
             */
            get: function () {
                return this[kId];
            },
            set: function (value) {
                this[kId] = value;
                if (ObjectId.cacheHexString) {
                    this.__id = value.toString('hex');
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ObjectId.prototype, "generationTime", {
            /**
             * The generation time of this ObjectId instance
             * @deprecated Please use getTimestamp / createFromTime which returns an int32 epoch
             */
            get: function () {
                return this.id.readInt32BE(0);
            },
            set: function (value) {
                // Encode time into first 4 bytes
                this.id.writeUInt32BE(value, 0);
            },
            enumerable: false,
            configurable: true
        });
        /** Returns the ObjectId id as a 24 character hex string representation */
        ObjectId.prototype.toHexString = function () {
            if (ObjectId.cacheHexString && this.__id) {
                return this.__id;
            }
            var hexString = this.id.toString('hex');
            if (ObjectId.cacheHexString && !this.__id) {
                this.__id = hexString;
            }
            return hexString;
        };
        /**
         * Update the ObjectId index
         * @privateRemarks
         * Used in generating new ObjectId's on the driver
         * @internal
         */
        ObjectId.getInc = function () {
            return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);
        };
        /**
         * Generate a 12 byte id buffer used in ObjectId's
         *
         * @param time - pass in a second based timestamp.
         */
        ObjectId.generate = function (time) {
            if ('number' !== typeof time) {
                time = Math.floor(Date.now() / 1000);
            }
            var inc = ObjectId.getInc();
            var buffer = buffer_1.alloc(12);
            // 4-byte timestamp
            buffer.writeUInt32BE(time, 0);
            // set PROCESS_UNIQUE if yet not initialized
            if (PROCESS_UNIQUE === null) {
                PROCESS_UNIQUE = randomBytes(5);
            }
            // 5-byte process unique
            buffer[4] = PROCESS_UNIQUE[0];
            buffer[5] = PROCESS_UNIQUE[1];
            buffer[6] = PROCESS_UNIQUE[2];
            buffer[7] = PROCESS_UNIQUE[3];
            buffer[8] = PROCESS_UNIQUE[4];
            // 3-byte counter
            buffer[11] = inc & 0xff;
            buffer[10] = (inc >> 8) & 0xff;
            buffer[9] = (inc >> 16) & 0xff;
            return buffer;
        };
        /**
         * Converts the id into a 24 character hex string for printing
         *
         * @param format - The Buffer toString format parameter.
         */
        ObjectId.prototype.toString = function (format) {
            // Is the id a buffer then use the buffer toString method to return the format
            if (format)
                return this.id.toString(format);
            return this.toHexString();
        };
        /** Converts to its JSON the 24 character hex string representation. */
        ObjectId.prototype.toJSON = function () {
            return this.toHexString();
        };
        /**
         * Compares the equality of this ObjectId with `otherID`.
         *
         * @param otherId - ObjectId instance to compare against.
         */
        ObjectId.prototype.equals = function (otherId) {
            if (otherId === undefined || otherId === null) {
                return false;
            }
            if (otherId instanceof ObjectId) {
                return this.toString() === otherId.toString();
            }
            if (typeof otherId === 'string' &&
                ObjectId.isValid(otherId) &&
                otherId.length === 12 &&
                isUint8Array(this.id)) {
                return otherId === buffer_1.prototype.toString.call(this.id, 'latin1');
            }
            if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) {
                return otherId.toLowerCase() === this.toHexString();
            }
            if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) {
                return buffer_1.from(otherId).equals(this.id);
            }
            if (typeof otherId === 'object' &&
                'toHexString' in otherId &&
                typeof otherId.toHexString === 'function') {
                return otherId.toHexString() === this.toHexString();
            }
            return false;
        };
        /** Returns the generation date (accurate up to the second) that this ID was generated. */
        ObjectId.prototype.getTimestamp = function () {
            var timestamp = new Date();
            var time = this.id.readUInt32BE(0);
            timestamp.setTime(Math.floor(time) * 1000);
            return timestamp;
        };
        /** @internal */
        ObjectId.createPk = function () {
            return new ObjectId();
        };
        /**
         * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.
         *
         * @param time - an integer number representing a number of seconds.
         */
        ObjectId.createFromTime = function (time) {
            var buffer = buffer_1.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            // Encode time into first 4 bytes
            buffer.writeUInt32BE(time, 0);
            // Return the new objectId
            return new ObjectId(buffer);
        };
        /**
         * Creates an ObjectId from a hex string representation of an ObjectId.
         *
         * @param hexString - create a ObjectId from a passed in 24 character hexstring.
         */
        ObjectId.createFromHexString = function (hexString) {
            // Throw an error if it's not a valid setup
            if (typeof hexString === 'undefined' || (hexString != null && hexString.length !== 24)) {
                throw new BSONTypeError('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');
            }
            return new ObjectId(buffer_1.from(hexString, 'hex'));
        };
        /**
         * Checks if a value is a valid bson ObjectId
         *
         * @param id - ObjectId instance to validate.
         */
        ObjectId.isValid = function (id) {
            if (id == null)
                return false;
            try {
                new ObjectId(id);
                return true;
            }
            catch (_a) {
                return false;
            }
        };
        /** @internal */
        ObjectId.prototype.toExtendedJSON = function () {
            if (this.toHexString)
                return { $oid: this.toHexString() };
            return { $oid: this.toString('hex') };
        };
        /** @internal */
        ObjectId.fromExtendedJSON = function (doc) {
            return new ObjectId(doc.$oid);
        };
        /**
         * Converts to a string representation of this Id.
         *
         * @returns return the 24 character hex string representation.
         * @internal
         */
        ObjectId.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        ObjectId.prototype.inspect = function () {
            return "new ObjectId(\"" + this.toHexString() + "\")";
        };
        /** @internal */
        ObjectId.index = Math.floor(Math.random() * 0xffffff);
        return ObjectId;
    }());
    // Deprecated methods
    Object.defineProperty(ObjectId.prototype, 'generate', {
        value: deprecate(function (time) { return ObjectId.generate(time); }, 'Please use the static `ObjectId.generate(time)` instead')
    });
    Object.defineProperty(ObjectId.prototype, 'getInc', {
        value: deprecate(function () { return ObjectId.getInc(); }, 'Please use the static `ObjectId.getInc()` instead')
    });
    Object.defineProperty(ObjectId.prototype, 'get_inc', {
        value: deprecate(function () { return ObjectId.getInc(); }, 'Please use the static `ObjectId.getInc()` instead')
    });
    Object.defineProperty(ObjectId, 'get_inc', {
        value: deprecate(function () { return ObjectId.getInc(); }, 'Please use the static `ObjectId.getInc()` instead')
    });
    Object.defineProperty(ObjectId.prototype, '_bsontype', { value: 'ObjectID' });

    function alphabetize(str) {
        return str.split('').sort().join('');
    }
    /**
     * A class representation of the BSON RegExp type.
     * @public
     */
    var BSONRegExp = /** @class */ (function () {
        /**
         * @param pattern - The regular expression pattern to match
         * @param options - The regular expression options
         */
        function BSONRegExp(pattern, options) {
            if (!(this instanceof BSONRegExp))
                return new BSONRegExp(pattern, options);
            this.pattern = pattern;
            this.options = alphabetize(options !== null && options !== void 0 ? options : '');
            if (this.pattern.indexOf('\x00') !== -1) {
                throw new BSONError("BSON Regex patterns cannot contain null bytes, found: " + JSON.stringify(this.pattern));
            }
            if (this.options.indexOf('\x00') !== -1) {
                throw new BSONError("BSON Regex options cannot contain null bytes, found: " + JSON.stringify(this.options));
            }
            // Validate options
            for (var i = 0; i < this.options.length; i++) {
                if (!(this.options[i] === 'i' ||
                    this.options[i] === 'm' ||
                    this.options[i] === 'x' ||
                    this.options[i] === 'l' ||
                    this.options[i] === 's' ||
                    this.options[i] === 'u')) {
                    throw new BSONError("The regular expression option [" + this.options[i] + "] is not supported");
                }
            }
        }
        BSONRegExp.parseOptions = function (options) {
            return options ? options.split('').sort().join('') : '';
        };
        /** @internal */
        BSONRegExp.prototype.toExtendedJSON = function (options) {
            options = options || {};
            if (options.legacy) {
                return { $regex: this.pattern, $options: this.options };
            }
            return { $regularExpression: { pattern: this.pattern, options: this.options } };
        };
        /** @internal */
        BSONRegExp.fromExtendedJSON = function (doc) {
            if ('$regex' in doc) {
                if (typeof doc.$regex !== 'string') {
                    // This is for $regex query operators that have extended json values.
                    if (doc.$regex._bsontype === 'BSONRegExp') {
                        return doc;
                    }
                }
                else {
                    return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));
                }
            }
            if ('$regularExpression' in doc) {
                return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));
            }
            throw new BSONTypeError("Unexpected BSONRegExp EJSON object form: " + JSON.stringify(doc));
        };
        return BSONRegExp;
    }());
    Object.defineProperty(BSONRegExp.prototype, '_bsontype', { value: 'BSONRegExp' });

    /**
     * A class representation of the BSON Symbol type.
     * @public
     */
    var BSONSymbol = /** @class */ (function () {
        /**
         * @param value - the string representing the symbol.
         */
        function BSONSymbol(value) {
            if (!(this instanceof BSONSymbol))
                return new BSONSymbol(value);
            this.value = value;
        }
        /** Access the wrapped string value. */
        BSONSymbol.prototype.valueOf = function () {
            return this.value;
        };
        BSONSymbol.prototype.toString = function () {
            return this.value;
        };
        /** @internal */
        BSONSymbol.prototype.inspect = function () {
            return "new BSONSymbol(\"" + this.value + "\")";
        };
        BSONSymbol.prototype.toJSON = function () {
            return this.value;
        };
        /** @internal */
        BSONSymbol.prototype.toExtendedJSON = function () {
            return { $symbol: this.value };
        };
        /** @internal */
        BSONSymbol.fromExtendedJSON = function (doc) {
            return new BSONSymbol(doc.$symbol);
        };
        /** @internal */
        BSONSymbol.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        return BSONSymbol;
    }());
    Object.defineProperty(BSONSymbol.prototype, '_bsontype', { value: 'Symbol' });

    /** @public */
    var LongWithoutOverridesClass = Long;
    /** @public */
    var Timestamp = /** @class */ (function (_super) {
        __extends(Timestamp, _super);
        function Timestamp(low, high) {
            var _this = this;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            ///@ts-expect-error
            if (!(_this instanceof Timestamp))
                return new Timestamp(low, high);
            if (Long.isLong(low)) {
                _this = _super.call(this, low.low, low.high, true) || this;
            }
            else if (isObjectLike(low) && typeof low.t !== 'undefined' && typeof low.i !== 'undefined') {
                _this = _super.call(this, low.i, low.t, true) || this;
            }
            else {
                _this = _super.call(this, low, high, true) || this;
            }
            Object.defineProperty(_this, '_bsontype', {
                value: 'Timestamp',
                writable: false,
                configurable: false,
                enumerable: false
            });
            return _this;
        }
        Timestamp.prototype.toJSON = function () {
            return {
                $timestamp: this.toString()
            };
        };
        /** Returns a Timestamp represented by the given (32-bit) integer value. */
        Timestamp.fromInt = function (value) {
            return new Timestamp(Long.fromInt(value, true));
        };
        /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */
        Timestamp.fromNumber = function (value) {
            return new Timestamp(Long.fromNumber(value, true));
        };
        /**
         * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.
         *
         * @param lowBits - the low 32-bits.
         * @param highBits - the high 32-bits.
         */
        Timestamp.fromBits = function (lowBits, highBits) {
            return new Timestamp(lowBits, highBits);
        };
        /**
         * Returns a Timestamp from the given string, optionally using the given radix.
         *
         * @param str - the textual representation of the Timestamp.
         * @param optRadix - the radix in which the text is written.
         */
        Timestamp.fromString = function (str, optRadix) {
            return new Timestamp(Long.fromString(str, true, optRadix));
        };
        /** @internal */
        Timestamp.prototype.toExtendedJSON = function () {
            return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };
        };
        /** @internal */
        Timestamp.fromExtendedJSON = function (doc) {
            return new Timestamp(doc.$timestamp);
        };
        /** @internal */
        Timestamp.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return this.inspect();
        };
        Timestamp.prototype.inspect = function () {
            return "new Timestamp({ t: " + this.getHighBits() + ", i: " + this.getLowBits() + " })";
        };
        Timestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;
        return Timestamp;
    }(LongWithoutOverridesClass));

    function isBSONType(value) {
        return (isObjectLike(value) && Reflect.has(value, '_bsontype') && typeof value._bsontype === 'string');
    }
    // INT32 boundaries
    var BSON_INT32_MAX$1 = 0x7fffffff;
    var BSON_INT32_MIN$1 = -0x80000000;
    // INT64 boundaries
    var BSON_INT64_MAX$1 = 0x7fffffffffffffff;
    var BSON_INT64_MIN$1 = -0x8000000000000000;
    // all the types where we don't need to do any special processing and can just pass the EJSON
    //straight to type.fromExtendedJSON
    var keysToCodecs = {
        $oid: ObjectId,
        $binary: Binary,
        $uuid: Binary,
        $symbol: BSONSymbol,
        $numberInt: Int32,
        $numberDecimal: Decimal128,
        $numberDouble: Double,
        $numberLong: Long,
        $minKey: MinKey,
        $maxKey: MaxKey,
        $regex: BSONRegExp,
        $regularExpression: BSONRegExp,
        $timestamp: Timestamp
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function deserializeValue(value, options) {
        if (options === void 0) { options = {}; }
        if (typeof value === 'number') {
            if (options.relaxed || options.legacy) {
                return value;
            }
            // if it's an integer, should interpret as smallest BSON integer
            // that can represent it exactly. (if out of range, interpret as double.)
            if (Math.floor(value) === value) {
                if (value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1)
                    return new Int32(value);
                if (value >= BSON_INT64_MIN$1 && value <= BSON_INT64_MAX$1)
                    return Long.fromNumber(value);
            }
            // If the number is a non-integer or out of integer range, should interpret as BSON Double.
            return new Double(value);
        }
        // from here on out we're looking for bson types, so bail if its not an object
        if (value == null || typeof value !== 'object')
            return value;
        // upgrade deprecated undefined to null
        if (value.$undefined)
            return null;
        var keys = Object.keys(value).filter(function (k) { return k.startsWith('$') && value[k] != null; });
        for (var i = 0; i < keys.length; i++) {
            var c = keysToCodecs[keys[i]];
            if (c)
                return c.fromExtendedJSON(value, options);
        }
        if (value.$date != null) {
            var d = value.$date;
            var date = new Date();
            if (options.legacy) {
                if (typeof d === 'number')
                    date.setTime(d);
                else if (typeof d === 'string')
                    date.setTime(Date.parse(d));
            }
            else {
                if (typeof d === 'string')
                    date.setTime(Date.parse(d));
                else if (Long.isLong(d))
                    date.setTime(d.toNumber());
                else if (typeof d === 'number' && options.relaxed)
                    date.setTime(d);
            }
            return date;
        }
        if (value.$code != null) {
            var copy = Object.assign({}, value);
            if (value.$scope) {
                copy.$scope = deserializeValue(value.$scope);
            }
            return Code.fromExtendedJSON(value);
        }
        if (isDBRefLike(value) || value.$dbPointer) {
            var v = value.$ref ? value : value.$dbPointer;
            // we run into this in a "degenerate EJSON" case (with $id and $ref order flipped)
            // because of the order JSON.parse goes through the document
            if (v instanceof DBRef)
                return v;
            var dollarKeys = Object.keys(v).filter(function (k) { return k.startsWith('$'); });
            var valid_1 = true;
            dollarKeys.forEach(function (k) {
                if (['$ref', '$id', '$db'].indexOf(k) === -1)
                    valid_1 = false;
            });
            // only make DBRef if $ keys are all valid
            if (valid_1)
                return DBRef.fromExtendedJSON(v);
        }
        return value;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function serializeArray(array, options) {
        return array.map(function (v, index) {
            options.seenObjects.push({ propertyName: "index " + index, obj: null });
            try {
                return serializeValue(v, options);
            }
            finally {
                options.seenObjects.pop();
            }
        });
    }
    function getISOString(date) {
        var isoStr = date.toISOString();
        // we should only show milliseconds in timestamp if they're non-zero
        return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function serializeValue(value, options) {
        if ((typeof value === 'object' || typeof value === 'function') && value !== null) {
            var index = options.seenObjects.findIndex(function (entry) { return entry.obj === value; });
            if (index !== -1) {
                var props = options.seenObjects.map(function (entry) { return entry.propertyName; });
                var leadingPart = props
                    .slice(0, index)
                    .map(function (prop) { return prop + " -> "; })
                    .join('');
                var alreadySeen = props[index];
                var circularPart = ' -> ' +
                    props
                        .slice(index + 1, props.length - 1)
                        .map(function (prop) { return prop + " -> "; })
                        .join('');
                var current = props[props.length - 1];
                var leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);
                var dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);
                throw new BSONTypeError('Converting circular structure to EJSON:\n' +
                    ("    " + leadingPart + alreadySeen + circularPart + current + "\n") +
                    ("    " + leadingSpace + "\\" + dashes + "/"));
            }
            options.seenObjects[options.seenObjects.length - 1].obj = value;
        }
        if (Array.isArray(value))
            return serializeArray(value, options);
        if (value === undefined)
            return null;
        if (value instanceof Date || isDate(value)) {
            var dateNum = value.getTime(), 
            // is it in year range 1970-9999?
            inRange = dateNum > -1 && dateNum < 253402318800000;
            if (options.legacy) {
                return options.relaxed && inRange
                    ? { $date: value.getTime() }
                    : { $date: getISOString(value) };
            }
            return options.relaxed && inRange
                ? { $date: getISOString(value) }
                : { $date: { $numberLong: value.getTime().toString() } };
        }
        if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {
            // it's an integer
            if (Math.floor(value) === value) {
                var int32Range = value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1, int64Range = value >= BSON_INT64_MIN$1 && value <= BSON_INT64_MAX$1;
                // interpret as being of the smallest BSON integer type that can represent the number exactly
                if (int32Range)
                    return { $numberInt: value.toString() };
                if (int64Range)
                    return { $numberLong: value.toString() };
            }
            return { $numberDouble: value.toString() };
        }
        if (value instanceof RegExp || isRegExp(value)) {
            var flags = value.flags;
            if (flags === undefined) {
                var match = value.toString().match(/[gimuy]*$/);
                if (match) {
                    flags = match[0];
                }
            }
            var rx = new BSONRegExp(value.source, flags);
            return rx.toExtendedJSON(options);
        }
        if (value != null && typeof value === 'object')
            return serializeDocument(value, options);
        return value;
    }
    var BSON_TYPE_MAPPINGS = {
        Binary: function (o) { return new Binary(o.value(), o.sub_type); },
        Code: function (o) { return new Code(o.code, o.scope); },
        DBRef: function (o) { return new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields); },
        Decimal128: function (o) { return new Decimal128(o.bytes); },
        Double: function (o) { return new Double(o.value); },
        Int32: function (o) { return new Int32(o.value); },
        Long: function (o) {
            return Long.fromBits(
            // underscore variants for 1.x backwards compatibility
            o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_);
        },
        MaxKey: function () { return new MaxKey(); },
        MinKey: function () { return new MinKey(); },
        ObjectID: function (o) { return new ObjectId(o); },
        ObjectId: function (o) { return new ObjectId(o); },
        BSONRegExp: function (o) { return new BSONRegExp(o.pattern, o.options); },
        Symbol: function (o) { return new BSONSymbol(o.value); },
        Timestamp: function (o) { return Timestamp.fromBits(o.low, o.high); }
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function serializeDocument(doc, options) {
        if (doc == null || typeof doc !== 'object')
            throw new BSONError('not an object instance');
        var bsontype = doc._bsontype;
        if (typeof bsontype === 'undefined') {
            // It's a regular object. Recursively serialize its property values.
            var _doc = {};
            for (var name in doc) {
                options.seenObjects.push({ propertyName: name, obj: null });
                try {
                    _doc[name] = serializeValue(doc[name], options);
                }
                finally {
                    options.seenObjects.pop();
                }
            }
            return _doc;
        }
        else if (isBSONType(doc)) {
            // the "document" is really just a BSON type object
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var outDoc = doc;
            if (typeof outDoc.toExtendedJSON !== 'function') {
                // There's no EJSON serialization function on the object. It's probably an
                // object created by a previous version of this library (or another library)
                // that's duck-typing objects to look like they were generated by this library).
                // Copy the object into this library's version of that type.
                var mapper = BSON_TYPE_MAPPINGS[doc._bsontype];
                if (!mapper) {
                    throw new BSONTypeError('Unrecognized or invalid _bsontype: ' + doc._bsontype);
                }
                outDoc = mapper(outDoc);
            }
            // Two BSON types may have nested objects that may need to be serialized too
            if (bsontype === 'Code' && outDoc.scope) {
                outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));
            }
            else if (bsontype === 'DBRef' && outDoc.oid) {
                outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));
            }
            return outDoc.toExtendedJSON(options);
        }
        else {
            throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);
        }
    }
    /**
     * EJSON parse / stringify API
     * @public
     */
    // the namespace here is used to emulate `export * as EJSON from '...'`
    // which as of now (sept 2020) api-extractor does not support
    // eslint-disable-next-line @typescript-eslint/no-namespace
    var EJSON;
    (function (EJSON) {
        /**
         * Parse an Extended JSON string, constructing the JavaScript value or object described by that
         * string.
         *
         * @example
         * ```js
         * const { EJSON } = require('bson');
         * const text = '{ "int32": { "$numberInt": "10" } }';
         *
         * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }
         * console.log(EJSON.parse(text, { relaxed: false }));
         *
         * // prints { int32: 10 }
         * console.log(EJSON.parse(text));
         * ```
         */
        function parse(text, options) {
            var finalOptions = Object.assign({}, { relaxed: true, legacy: false }, options);
            // relaxed implies not strict
            if (typeof finalOptions.relaxed === 'boolean')
                finalOptions.strict = !finalOptions.relaxed;
            if (typeof finalOptions.strict === 'boolean')
                finalOptions.relaxed = !finalOptions.strict;
            return JSON.parse(text, function (key, value) {
                if (key.indexOf('\x00') !== -1) {
                    throw new BSONError("BSON Document field names cannot contain null bytes, found: " + JSON.stringify(key));
                }
                return deserializeValue(value, finalOptions);
            });
        }
        EJSON.parse = parse;
        /**
         * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer
         * function is specified or optionally including only the specified properties if a replacer array
         * is specified.
         *
         * @param value - The value to convert to extended JSON
         * @param replacer - A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string
         * @param space - A String or Number object that's used to insert white space into the output JSON string for readability purposes.
         * @param options - Optional settings
         *
         * @example
         * ```js
         * const { EJSON } = require('bson');
         * const Int32 = require('mongodb').Int32;
         * const doc = { int32: new Int32(10) };
         *
         * // prints '{"int32":{"$numberInt":"10"}}'
         * console.log(EJSON.stringify(doc, { relaxed: false }));
         *
         * // prints '{"int32":10}'
         * console.log(EJSON.stringify(doc));
         * ```
         */
        function stringify(value, 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        replacer, space, options) {
            if (space != null && typeof space === 'object') {
                options = space;
                space = 0;
            }
            if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {
                options = replacer;
                replacer = undefined;
                space = 0;
            }
            var serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {
                seenObjects: [{ propertyName: '(root)', obj: null }]
            });
            var doc = serializeValue(value, serializeOptions);
            return JSON.stringify(doc, replacer, space);
        }
        EJSON.stringify = stringify;
        /**
         * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.
         *
         * @param value - The object to serialize
         * @param options - Optional settings passed to the `stringify` function
         */
        function serialize(value, options) {
            options = options || {};
            return JSON.parse(stringify(value, options));
        }
        EJSON.serialize = serialize;
        /**
         * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types
         *
         * @param ejson - The Extended JSON object to deserialize
         * @param options - Optional settings passed to the parse method
         */
        function deserialize(ejson, options) {
            options = options || {};
            return parse(JSON.stringify(ejson), options);
        }
        EJSON.deserialize = deserialize;
    })(EJSON || (EJSON = {}));
    var bsonGlobal = getGlobal();
    if (bsonGlobal.Map) ;
    else {
        // We will return a polyfill
        /** @class */ ((function () {
            function Map(array) {
                if (array === void 0) { array = []; }
                this._keys = [];
                this._values = {};
                for (var i = 0; i < array.length; i++) {
                    if (array[i] == null)
                        continue; // skip null and undefined
                    var entry = array[i];
                    var key = entry[0];
                    var value = entry[1];
                    // Add the key to the list of keys in order
                    this._keys.push(key);
                    // Add the key and value to the values dictionary with a point
                    // to the location in the ordered keys list
                    this._values[key] = { v: value, i: this._keys.length - 1 };
                }
            }
            Map.prototype.clear = function () {
                this._keys = [];
                this._values = {};
            };
            Map.prototype.delete = function (key) {
                var value = this._values[key];
                if (value == null)
                    return false;
                // Delete entry
                delete this._values[key];
                // Remove the key from the ordered keys list
                this._keys.splice(value.i, 1);
                return true;
            };
            Map.prototype.entries = function () {
                var _this = this;
                var index = 0;
                return {
                    next: function () {
                        var key = _this._keys[index++];
                        return {
                            value: key !== undefined ? [key, _this._values[key].v] : undefined,
                            done: key !== undefined ? false : true
                        };
                    }
                };
            };
            Map.prototype.forEach = function (callback, self) {
                self = self || this;
                for (var i = 0; i < this._keys.length; i++) {
                    var key = this._keys[i];
                    // Call the forEach callback
                    callback.call(self, this._values[key].v, key, self);
                }
            };
            Map.prototype.get = function (key) {
                return this._values[key] ? this._values[key].v : undefined;
            };
            Map.prototype.has = function (key) {
                return this._values[key] != null;
            };
            Map.prototype.keys = function () {
                var _this = this;
                var index = 0;
                return {
                    next: function () {
                        var key = _this._keys[index++];
                        return {
                            value: key !== undefined ? key : undefined,
                            done: key !== undefined ? false : true
                        };
                    }
                };
            };
            Map.prototype.set = function (key, value) {
                if (this._values[key]) {
                    this._values[key].v = value;
                    return this;
                }
                // Add the key to the list of keys in order
                this._keys.push(key);
                // Add the key and value to the values dictionary with a point
                // to the location in the ordered keys list
                this._values[key] = { v: value, i: this._keys.length - 1 };
                return this;
            };
            Map.prototype.values = function () {
                var _this = this;
                var index = 0;
                return {
                    next: function () {
                        var key = _this._keys[index++];
                        return {
                            value: key !== undefined ? _this._values[key].v : undefined,
                            done: key !== undefined ? false : true
                        };
                    }
                };
            };
            Object.defineProperty(Map.prototype, "size", {
                get: function () {
                    return this._keys.length;
                },
                enumerable: false,
                configurable: true
            });
            return Map;
        })());
    }
    /**
     * Any integer up to 2^53 can be precisely represented by a double.
     * @internal
     */
    var JS_INT_MAX = Math.pow(2, 53);
    /**
     * Any integer down to -2^53 can be precisely represented by a double.
     * @internal
     */
    var JS_INT_MIN = -Math.pow(2, 53);

    // Internal long versions
    Long.fromNumber(JS_INT_MAX);
    Long.fromNumber(JS_INT_MIN);

    /** @internal */
    // Default Max Size
    var MAXSIZE = 1024 * 1024 * 17;
    // Current Internal Temporary Serialization Buffer
    buffer_1.alloc(MAXSIZE);

    var __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };
    var BrowserInfo = /** @class */ (function () {
        function BrowserInfo(name, version, os) {
            this.name = name;
            this.version = version;
            this.os = os;
            this.type = 'browser';
        }
        return BrowserInfo;
    }());
    var NodeInfo = /** @class */ (function () {
        function NodeInfo(version) {
            this.version = version;
            this.type = 'node';
            this.name = 'node';
            this.os = process.platform;
        }
        return NodeInfo;
    }());
    var SearchBotDeviceInfo = /** @class */ (function () {
        function SearchBotDeviceInfo(name, version, os, bot) {
            this.name = name;
            this.version = version;
            this.os = os;
            this.bot = bot;
            this.type = 'bot-device';
        }
        return SearchBotDeviceInfo;
    }());
    var BotInfo = /** @class */ (function () {
        function BotInfo() {
            this.type = 'bot';
            this.bot = true; // NOTE: deprecated test name instead
            this.name = 'bot';
            this.version = null;
            this.os = null;
        }
        return BotInfo;
    }());
    var ReactNativeInfo = /** @class */ (function () {
        function ReactNativeInfo() {
            this.type = 'react-native';
            this.name = 'react-native';
            this.version = null;
            this.os = null;
        }
        return ReactNativeInfo;
    }());
    // tslint:disable-next-line:max-line-length
    var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
    var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
    var REQUIRED_VERSION_PARTS = 3;
    var userAgentRules = [
        ['aol', /AOLShield\/([0-9\._]+)/],
        ['edge', /Edge\/([0-9\._]+)/],
        ['edge-ios', /EdgiOS\/([0-9\._]+)/],
        ['yandexbrowser', /YaBrowser\/([0-9\._]+)/],
        ['kakaotalk', /KAKAOTALK\s([0-9\.]+)/],
        ['samsung', /SamsungBrowser\/([0-9\.]+)/],
        ['silk', /\bSilk\/([0-9._-]+)\b/],
        ['miui', /MiuiBrowser\/([0-9\.]+)$/],
        ['beaker', /BeakerBrowser\/([0-9\.]+)/],
        ['edge-chromium', /EdgA?\/([0-9\.]+)/],
        [
            'chromium-webview',
            /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/,
        ],
        ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
        ['phantomjs', /PhantomJS\/([0-9\.]+)(:?\s|$)/],
        ['crios', /CriOS\/([0-9\.]+)(:?\s|$)/],
        ['firefox', /Firefox\/([0-9\.]+)(?:\s|$)/],
        ['fxios', /FxiOS\/([0-9\.]+)/],
        ['opera-mini', /Opera Mini.*Version\/([0-9\.]+)/],
        ['opera', /Opera\/([0-9\.]+)(?:\s|$)/],
        ['opera', /OPR\/([0-9\.]+)(:?\s|$)/],
        ['ie', /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
        ['ie', /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
        ['ie', /MSIE\s(7\.0)/],
        ['bb10', /BB10;\sTouch.*Version\/([0-9\.]+)/],
        ['android', /Android\s([0-9\.]+)/],
        ['ios', /Version\/([0-9\._]+).*Mobile.*Safari.*/],
        ['safari', /Version\/([0-9\._]+).*Safari/],
        ['facebook', /FB[AS]V\/([0-9\.]+)/],
        ['instagram', /Instagram\s([0-9\.]+)/],
        ['ios-webview', /AppleWebKit\/([0-9\.]+).*Mobile/],
        ['ios-webview', /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
        ['curl', /^curl\/([0-9\.]+)$/],
        ['searchbot', SEARCHBOX_UA_REGEX],
    ];
    var operatingSystemRules = [
        ['iOS', /iP(hone|od|ad)/],
        ['Android OS', /Android/],
        ['BlackBerry OS', /BlackBerry|BB10/],
        ['Windows Mobile', /IEMobile/],
        ['Amazon OS', /Kindle/],
        ['Windows 3.11', /Win16/],
        ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],
        ['Windows 98', /(Windows 98)|(Win98)/],
        ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],
        ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],
        ['Windows Server 2003', /(Windows NT 5.2)/],
        ['Windows Vista', /(Windows NT 6.0)/],
        ['Windows 7', /(Windows NT 6.1)/],
        ['Windows 8', /(Windows NT 6.2)/],
        ['Windows 8.1', /(Windows NT 6.3)/],
        ['Windows 10', /(Windows NT 10.0)/],
        ['Windows ME', /Windows ME/],
        ['Open BSD', /OpenBSD/],
        ['Sun OS', /SunOS/],
        ['Chrome OS', /CrOS/],
        ['Linux', /(Linux)|(X11)/],
        ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],
        ['QNX', /QNX/],
        ['BeOS', /BeOS/],
        ['OS/2', /OS\/2/],
    ];
    function detect(userAgent) {
        if (!!userAgent) {
            return parseUserAgent(userAgent);
        }
        if (typeof document === 'undefined' &&
            typeof navigator !== 'undefined' &&
            navigator.product === 'ReactNative') {
            return new ReactNativeInfo();
        }
        if (typeof navigator !== 'undefined') {
            return parseUserAgent(navigator.userAgent);
        }
        return getNodeVersion();
    }
    function matchUserAgent(ua) {
        // opted for using reduce here rather than Array#first with a regex.test call
        // this is primarily because using the reduce we only perform the regex
        // execution once rather than once for the test and for the exec again below
        // probably something that needs to be benchmarked though
        return (ua !== '' &&
            userAgentRules.reduce(function (matched, _a) {
                var browser = _a[0], regex = _a[1];
                if (matched) {
                    return matched;
                }
                var uaMatch = regex.exec(ua);
                return !!uaMatch && [browser, uaMatch];
            }, false));
    }
    function parseUserAgent(ua) {
        var matchedRule = matchUserAgent(ua);
        if (!matchedRule) {
            return null;
        }
        var name = matchedRule[0], match = matchedRule[1];
        if (name === 'searchbot') {
            return new BotInfo();
        }
        // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)
        var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);
        if (versionParts) {
            if (versionParts.length < REQUIRED_VERSION_PARTS) {
                versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
            }
        }
        else {
            versionParts = [];
        }
        var version = versionParts.join('.');
        var os = detectOS(ua);
        var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
        if (searchBotMatch && searchBotMatch[1]) {
            return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);
        }
        return new BrowserInfo(name, version, os);
    }
    function detectOS(ua) {
        for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
            var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
            var match = regex.exec(ua);
            if (match) {
                return os;
            }
        }
        return null;
    }
    function getNodeVersion() {
        var isNode = typeof process !== 'undefined' && process.version;
        return isNode ? new NodeInfo(process.version.slice(1)) : null;
    }
    function createVersionParts(count) {
        var output = [];
        for (var ii = 0; ii < count; ii++) {
            output.push('0');
        }
        return output;
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    class DefaultNetworkTransport {
        constructor() {
            if (!DefaultNetworkTransport.fetch) {
                throw new Error("DefaultNetworkTransport.fetch must be set before it's used");
            }
            if (!DefaultNetworkTransport.AbortController) {
                throw new Error("DefaultNetworkTransport.AbortController must be set before it's used");
            }
        }
        fetchWithCallbacks(request, handler) {
            // tslint:disable-next-line: no-console
            this.fetch(request)
                .then(async (response) => {
                const decodedBody = await response.text();
                // Pull out the headers of the response
                const responseHeaders = {};
                response.headers.forEach((value, key) => {
                    responseHeaders[key] = value;
                });
                return {
                    statusCode: response.status,
                    headers: responseHeaders,
                    body: decodedBody,
                };
            })
                .then((r) => handler.onSuccess(r))
                .catch((e) => handler.onError(e));
        }
        async fetch(request) {
            const { timeoutMs, url, ...rest } = request;
            const { signal, cancelTimeout } = this.createTimeoutSignal(timeoutMs);
            try {
                // We'll await the response to catch throw our own error
                return await DefaultNetworkTransport.fetch(url, {
                    ...DefaultNetworkTransport.extraFetchOptions,
                    signal,
                    ...rest,
                });
            }
            finally {
                // Whatever happens, cancel any timeout
                cancelTimeout();
            }
        }
        createTimeoutSignal(timeoutMs) {
            if (typeof timeoutMs === "number") {
                const controller = new DefaultNetworkTransport.AbortController();
                // Call abort after a specific number of milliseconds
                const timeout = setTimeout(() => {
                    controller.abort();
                }, timeoutMs);
                return {
                    signal: controller.signal,
                    cancelTimeout: () => {
                        clearTimeout(timeout);
                    },
                };
            }
            else {
                return {
                    signal: undefined,
                    cancelTimeout: () => {
                        /* No-op */
                    },
                };
            }
        }
    }
    DefaultNetworkTransport.DEFAULT_HEADERS = {
        "Content-Type": "application/json",
    };

    ////////////////////////////////////////////////////////////////////////////
    DefaultNetworkTransport.fetch = globalThis.fetch.bind(globalThis);
    DefaultNetworkTransport.AbortController = globalThis.AbortController;

    /**
     *  base64.ts
     *
     *  Licensed under the BSD 3-Clause License.
     *    http://opensource.org/licenses/BSD-3-Clause
     *
     *  References:
     *    http://en.wikipedia.org/wiki/Base64
     *
     * @author Dan Kogai (https://github.com/dankogai)
     */
    const version = '3.7.2';
    /**
     * @deprecated use lowercase `version`.
     */
    const VERSION = version;
    const _hasatob = typeof atob === 'function';
    const _hasbtoa = typeof btoa === 'function';
    const _hasBuffer = typeof Buffer === 'function';
    const _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;
    const _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;
    const b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    const b64chs = Array.prototype.slice.call(b64ch);
    const b64tab = ((a) => {
        let tab = {};
        a.forEach((c, i) => tab[c] = i);
        return tab;
    })(b64chs);
    const b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
    const _fromCC = String.fromCharCode.bind(String);
    const _U8Afrom = typeof Uint8Array.from === 'function'
        ? Uint8Array.from.bind(Uint8Array)
        : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
    const _mkUriSafe = (src) => src
        .replace(/=/g, '').replace(/[+\/]/g, (m0) => m0 == '+' ? '-' : '_');
    const _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\+\/]/g, '');
    /**
     * polyfill version of `btoa`
     */
    const btoaPolyfill = (bin) => {
        // console.log('polyfilled');
        let u32, c0, c1, c2, asc = '';
        const pad = bin.length % 3;
        for (let i = 0; i < bin.length;) {
            if ((c0 = bin.charCodeAt(i++)) > 255 ||
                (c1 = bin.charCodeAt(i++)) > 255 ||
                (c2 = bin.charCodeAt(i++)) > 255)
                throw new TypeError('invalid character found');
            u32 = (c0 << 16) | (c1 << 8) | c2;
            asc += b64chs[u32 >> 18 & 63]
                + b64chs[u32 >> 12 & 63]
                + b64chs[u32 >> 6 & 63]
                + b64chs[u32 & 63];
        }
        return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
    };
    /**
     * does what `window.btoa` of web browsers do.
     * @param {String} bin binary string
     * @returns {string} Base64-encoded string
     */
    const _btoa = _hasbtoa ? (bin) => btoa(bin)
        : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')
            : btoaPolyfill;
    const _fromUint8Array = _hasBuffer
        ? (u8a) => Buffer.from(u8a).toString('base64')
        : (u8a) => {
            // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326
            const maxargs = 0x1000;
            let strs = [];
            for (let i = 0, l = u8a.length; i < l; i += maxargs) {
                strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
            }
            return _btoa(strs.join(''));
        };
    /**
     * converts a Uint8Array to a Base64 string.
     * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5
     * @returns {string} Base64 string
     */
    const fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
    // This trick is found broken https://github.com/dankogai/js-base64/issues/130
    // const utob = (src: string) => unescape(encodeURIComponent(src));
    // reverting good old fationed regexp
    const cb_utob = (c) => {
        if (c.length < 2) {
            var cc = c.charCodeAt(0);
            return cc < 0x80 ? c
                : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))
                    + _fromCC(0x80 | (cc & 0x3f)))
                    : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))
                        + _fromCC(0x80 | ((cc >>> 6) & 0x3f))
                        + _fromCC(0x80 | (cc & 0x3f)));
        }
        else {
            var cc = 0x10000
                + (c.charCodeAt(0) - 0xD800) * 0x400
                + (c.charCodeAt(1) - 0xDC00);
            return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))
                + _fromCC(0x80 | ((cc >>> 12) & 0x3f))
                + _fromCC(0x80 | ((cc >>> 6) & 0x3f))
                + _fromCC(0x80 | (cc & 0x3f)));
        }
    };
    const re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
    /**
     * @deprecated should have been internal use only.
     * @param {string} src UTF-8 string
     * @returns {string} UTF-16 string
     */
    const utob = (u) => u.replace(re_utob, cb_utob);
    //
    const _encode = _hasBuffer
        ? (s) => Buffer.from(s, 'utf8').toString('base64')
        : _TE
            ? (s) => _fromUint8Array(_TE.encode(s))
            : (s) => _btoa(utob(s));
    /**
     * converts a UTF-8-encoded string to a Base64 string.
     * @param {boolean} [urlsafe] if `true` make the result URL-safe
     * @returns {string} Base64 string
     */
    const encode = (src, urlsafe = false) => urlsafe
        ? _mkUriSafe(_encode(src))
        : _encode(src);
    /**
     * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.
     * @returns {string} Base64 string
     */
    const encodeURI = (src) => encode(src, true);
    // This trick is found broken https://github.com/dankogai/js-base64/issues/130
    // const btou = (src: string) => decodeURIComponent(escape(src));
    // reverting good old fationed regexp
    const re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
    const cb_btou = (cccc) => {
        switch (cccc.length) {
            case 4:
                var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                    | ((0x3f & cccc.charCodeAt(1)) << 12)
                    | ((0x3f & cccc.charCodeAt(2)) << 6)
                    | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;
                return (_fromCC((offset >>> 10) + 0xD800)
                    + _fromCC((offset & 0x3FF) + 0xDC00));
            case 3:
                return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)
                    | ((0x3f & cccc.charCodeAt(1)) << 6)
                    | (0x3f & cccc.charCodeAt(2)));
            default:
                return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)
                    | (0x3f & cccc.charCodeAt(1)));
        }
    };
    /**
     * @deprecated should have been internal use only.
     * @param {string} src UTF-16 string
     * @returns {string} UTF-8 string
     */
    const btou = (b) => b.replace(re_btou, cb_btou);
    /**
     * polyfill version of `atob`
     */
    const atobPolyfill = (asc) => {
        // console.log('polyfilled');
        asc = asc.replace(/\s+/g, '');
        if (!b64re.test(asc))
            throw new TypeError('malformed base64.');
        asc += '=='.slice(2 - (asc.length & 3));
        let u24, bin = '', r1, r2;
        for (let i = 0; i < asc.length;) {
            u24 = b64tab[asc.charAt(i++)] << 18
                | b64tab[asc.charAt(i++)] << 12
                | (r1 = b64tab[asc.charAt(i++)]) << 6
                | (r2 = b64tab[asc.charAt(i++)]);
            bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)
                : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)
                    : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
        }
        return bin;
    };
    /**
     * does what `window.atob` of web browsers do.
     * @param {String} asc Base64-encoded string
     * @returns {string} binary string
     */
    const _atob = _hasatob ? (asc) => atob(_tidyB64(asc))
        : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')
            : atobPolyfill;
    //
    const _toUint8Array = _hasBuffer
        ? (a) => _U8Afrom(Buffer.from(a, 'base64'))
        : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));
    /**
     * converts a Base64 string to a Uint8Array.
     */
    const toUint8Array = (a) => _toUint8Array(_unURI(a));
    //
    const _decode = _hasBuffer
        ? (a) => Buffer.from(a, 'base64').toString('utf8')
        : _TD
            ? (a) => _TD.decode(_toUint8Array(a))
            : (a) => btou(_atob(a));
    const _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));
    /**
     * converts a Base64 string to a UTF-8 string.
     * @param {String} src Base64 string.  Both normal and URL-safe are supported
     * @returns {string} UTF-8 string
     */
    const decode = (src) => _decode(_unURI(src));
    /**
     * check if a value is a valid Base64 string
     * @param {String} src a value to check
      */
    const isValid = (src) => {
        if (typeof src !== 'string')
            return false;
        const s = src.replace(/\s+/g, '').replace(/={0,2}$/, '');
        return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
    };
    //
    const _noEnum = (v) => {
        return {
            value: v, enumerable: false, writable: true, configurable: true
        };
    };
    /**
     * extend String.prototype with relevant methods
     */
    const extendString = function () {
        const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
        _add('fromBase64', function () { return decode(this); });
        _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });
        _add('toBase64URI', function () { return encode(this, true); });
        _add('toBase64URL', function () { return encode(this, true); });
        _add('toUint8Array', function () { return toUint8Array(this); });
    };
    /**
     * extend Uint8Array.prototype with relevant methods
     */
    const extendUint8Array = function () {
        const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
        _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });
        _add('toBase64URI', function () { return fromUint8Array(this, true); });
        _add('toBase64URL', function () { return fromUint8Array(this, true); });
    };
    /**
     * extend Builtin prototypes with relevant methods
     */
    const extendBuiltins = () => {
        extendString();
        extendUint8Array();
    };
    const gBase64 = {
        version: version,
        VERSION: VERSION,
        atob: _atob,
        atobPolyfill: atobPolyfill,
        btoa: _btoa,
        btoaPolyfill: btoaPolyfill,
        fromBase64: decode,
        toBase64: encode,
        encode: encode,
        encodeURI: encodeURI,
        encodeURL: encodeURI,
        utob: utob,
        btou: btou,
        decode: decode,
        isValid: isValid,
        fromUint8Array: fromUint8Array,
        toUint8Array: toUint8Array,
        extendString: extendString,
        extendUint8Array: extendUint8Array,
        extendBuiltins: extendBuiltins,
    };

    ////////////////////////////////////////////////////////////////////////////
    const SERIALIZATION_OPTIONS = {
        relaxed: false, // Ensure Canonical mode
    };
    /**
     * Serialize an object containing BSON types into extended-JSON.
     *
     * @param obj The object containing BSON types.
     * @returns The document in extended-JSON format.
     */
    function serialize(obj) {
        return EJSON.serialize(obj, SERIALIZATION_OPTIONS);
    }
    /**
     * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.
     *
     * @param obj The object or array of objects in extended-JSON format.
     * @returns The object or array of objects with inflated BSON types.
     */
    function deserialize(obj) {
        if (Array.isArray(obj)) {
            return obj.map((doc) => EJSON.deserialize(doc));
        }
        else {
            return EJSON.deserialize(obj);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * The type of a user.
     */
    var UserType;
    (function (UserType) {
        /**
         * A normal end-user created this user.
         */
        UserType["Normal"] = "normal";
        /**
         * The user was created by the server.
         */
        UserType["Server"] = "server";
    })(UserType || (UserType = {}));
    /** @ignore */
    var DataKey;
    (function (DataKey) {
        /** @ignore */
        DataKey["NAME"] = "name";
        /** @ignore */
        DataKey["EMAIL"] = "email";
        /** @ignore */
        DataKey["PICTURE"] = "picture";
        /** @ignore */
        DataKey["FIRST_NAME"] = "first_name";
        /** @ignore */
        DataKey["LAST_NAME"] = "last_name";
        /** @ignore */
        DataKey["GENDER"] = "gender";
        /** @ignore */
        DataKey["BIRTHDAY"] = "birthday";
        /** @ignore */
        DataKey["MIN_AGE"] = "min_age";
        /** @ignore */
        DataKey["MAX_AGE"] = "max_age";
    })(DataKey || (DataKey = {}));
    const DATA_MAPPING = {
        [DataKey.NAME]: "name",
        [DataKey.EMAIL]: "email",
        [DataKey.PICTURE]: "pictureUrl",
        [DataKey.FIRST_NAME]: "firstName",
        [DataKey.LAST_NAME]: "lastName",
        [DataKey.GENDER]: "gender",
        [DataKey.BIRTHDAY]: "birthday",
        [DataKey.MIN_AGE]: "minAge",
        [DataKey.MAX_AGE]: "maxAge",
    };
    /** @inheritdoc */
    class UserProfile {
        /**
         * @param response The response of a call fetching the users profile.
         */
        constructor(response) {
            /** @ignore */
            this.type = UserType.Normal;
            /** @ignore */
            this.identities = [];
            if (typeof response === "object" && response !== null) {
                const { type, identities, data } = response;
                if (typeof type === "string") {
                    this.type = type;
                }
                else {
                    throw new Error("Expected 'type' in the response body");
                }
                if (Array.isArray(identities)) {
                    this.identities = identities.map((identity) => {
                        const { id, provider_type: providerType } = identity;
                        return { id, providerType };
                    });
                }
                else {
                    throw new Error("Expected 'identities' in the response body");
                }
                if (typeof data === "object" && data !== null) {
                    const mappedData = Object.fromEntries(Object.entries(data).map(([key, value]) => {
                        if (key in DATA_MAPPING) {
                            // Translate any known data field to its JS idiomatic alias
                            return [DATA_MAPPING[key], value];
                        }
                        else {
                            // Pass through any other values
                            return [key, value];
                        }
                    }));
                    // We can use `any` since we trust the user supplies the correct type
                    this.data = deserialize(mappedData);
                }
                else {
                    throw new Error("Expected 'data' in the response body");
                }
            }
            else {
                this.data = {};
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * A `Storage` which will prefix a key part to every operation.
     */
    class PrefixedStorage {
        /**
         * Construct a `Storage` which will prefix a key part to every operation.
         *
         * @param storage The underlying storage to use for operations.
         * @param keyPart The part of the key to prefix when performing operations.
         */
        constructor(storage, keyPart) {
            this.storage = storage;
            this.keyPart = keyPart;
        }
        /** @inheritdoc */
        get(key) {
            return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);
        }
        /** @inheritdoc */
        set(key, value) {
            return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);
        }
        /** @inheritdoc */
        remove(key) {
            return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);
        }
        /** @inheritdoc */
        prefix(keyPart) {
            return new PrefixedStorage(this, keyPart);
        }
        /** @inheritdoc */
        clear(prefix = "") {
            return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);
        }
        /** @inheritdoc */
        addListener(listener) {
            return this.storage.addListener(listener);
        }
        /** @inheritdoc */
        removeListener(listener) {
            return this.storage.addListener(listener);
        }
    }
    /**
     * The string separating two parts.
     */
    PrefixedStorage.PART_SEPARATOR = ":";

    ////////////////////////////////////////////////////////////////////////////
    /**
     * In-memory storage that will not be persisted.
     */
    class MemoryStorage {
        constructor() {
            /**
             * Internal state of the storage.
             */
            this.storage = {};
            /**
             * A set of listners.
             */
            this.listeners = new Set();
        }
        /** @inheritdoc */
        get(key) {
            if (key in this.storage) {
                return this.storage[key];
            }
            else {
                return null;
            }
        }
        /** @inheritdoc */
        set(key, value) {
            this.storage[key] = value;
            // Fire the listeners
            this.fireListeners();
        }
        /** @inheritdoc */
        remove(key) {
            delete this.storage[key];
            // Fire the listeners
            this.fireListeners();
        }
        /** @inheritdoc */
        prefix(keyPart) {
            return new PrefixedStorage(this, keyPart);
        }
        /** @inheritdoc */
        clear(prefix) {
            // Iterate all keys and delete their values if they have a matching prefix
            for (const key of Object.keys(this.storage)) {
                if (!prefix || key.startsWith(prefix)) {
                    delete this.storage[key];
                }
            }
            // Fire the listeners
            this.fireListeners();
        }
        /** @inheritdoc */
        addListener(listener) {
            this.listeners.add(listener);
        }
        /** @inheritdoc */
        removeListener(listener) {
            this.listeners.delete(listener);
        }
        /**
         * Tell the listeners that a change occurred.
         */
        fireListeners() {
            this.listeners.forEach((listener) => listener());
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const ACCESS_TOKEN_STORAGE_KEY = "accessToken";
    const REFRESH_TOKEN_STORAGE_KEY = "refreshToken";
    const PROFILE_STORAGE_KEY = "profile";
    const PROVIDER_TYPE_STORAGE_KEY = "providerType";
    /**
     * Storage specific to the app.
     */
    class UserStorage extends PrefixedStorage {
        /**
         * Construct a storage for a `User`.
         *
         * @param storage The underlying storage to wrap.
         * @param userId The id of the user.
         */
        constructor(storage, userId) {
            super(storage, `user(${userId})`);
        }
        /**
         * Get the access token from storage.
         *
         * @returns Access token (null if unknown).
         */
        get accessToken() {
            return this.get(ACCESS_TOKEN_STORAGE_KEY);
        }
        /**
         * Set the access token in storage.
         *
         * @param value Access token (null if unknown).
         */
        set accessToken(value) {
            if (value === null) {
                this.remove(ACCESS_TOKEN_STORAGE_KEY);
            }
            else {
                this.set(ACCESS_TOKEN_STORAGE_KEY, value);
            }
        }
        /**
         * Get the refresh token from storage.
         *
         * @returns Refresh token (null if unknown and user is logged out).
         */
        get refreshToken() {
            return this.get(REFRESH_TOKEN_STORAGE_KEY);
        }
        /**
         * Set the refresh token in storage.
         *
         * @param value Refresh token (null if unknown and user is logged out).
         */
        set refreshToken(value) {
            if (value === null) {
                this.remove(REFRESH_TOKEN_STORAGE_KEY);
            }
            else {
                this.set(REFRESH_TOKEN_STORAGE_KEY, value);
            }
        }
        /**
         * Get the user profile from storage.
         *
         * @returns User profile (undefined if its unknown).
         */
        get profile() {
            const value = this.get(PROFILE_STORAGE_KEY);
            if (value) {
                const profile = new UserProfile();
                // Patch in the values
                Object.assign(profile, JSON.parse(value));
                return profile;
            }
        }
        /**
         * Set the user profile in storage.
         *
         * @param value User profile (undefined if its unknown).
         */
        set profile(value) {
            if (value) {
                this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));
            }
            else {
                this.remove(PROFILE_STORAGE_KEY);
            }
        }
        /**
         * Get the type of authentication provider used to authenticate
         *
         * @returns User profile (undefined if its unknown).
         */
        get providerType() {
            const value = this.get(PROVIDER_TYPE_STORAGE_KEY);
            if (value) {
                return value;
            }
        }
        /**
         * Set the type of authentication provider used to authenticate
         *
         * @param value Type of authentication provider.
         */
        set providerType(value) {
            if (value) {
                this.set(PROVIDER_TYPE_STORAGE_KEY, value);
            }
            else {
                this.remove(PROVIDER_TYPE_STORAGE_KEY);
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * @param obj The object to remove keys (and undefined values from)
     * @returns A new object without the keys where the value is undefined.
     */
    function removeKeysWithUndefinedValues(obj) {
        return Object.fromEntries(Object.entries(obj).filter((entry) => typeof entry[1] !== "undefined"));
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Generate a random sequence of characters.
     *
     * @param length The length of the string.
     * @param alphabet The alphabet of characters to pick from.
     * @returns A string of characters picked randomly from `alphabet`.
     */
    function generateRandomString(length, alphabet) {
        let result = "";
        for (let i = 0; i < length; i++) {
            result += alphabet[Math.floor(Math.random() * alphabet.length)];
        }
        return result;
    }
    /**
     * Encode an object mapping from string to string, into a query string to be appended a URL.
     *
     * @param params The parameters to include in the string.
     * @param prefixed Should the "?" prefix be added if values exists?
     * @returns A URL encoded representation of the parameters (omitting a "?" prefix).
     */
    function encodeQueryString(params, prefixed = true) {
        // Filter out undefined values
        const cleanedParams = removeKeysWithUndefinedValues(params);
        // Determine if a prefixed "?" is appropreate
        const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? "?" : "";
        // Transform keys and values to a query string
        return (prefix +
            Object.entries(cleanedParams)
                .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)
                .join("&"));
    }
    /**
     * Decodes a query string into an object.
     *
     * @param str The query string to decode.
     * @returns The decoded query string.
     */
    function decodeQueryString(str) {
        const cleanStr = str[0] === "?" ? str.substr(1) : str;
        return Object.fromEntries(cleanStr
            .split("&")
            .filter((s) => s.length > 0)
            .map((kvp) => kvp.split("="))
            .map(([k, v]) => [k, decodeURIComponent(v)]));
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * A list of names that functions cannot have to be callable through the functions proxy.
     */
    const RESERVED_NAMES = [
        "inspect",
        "callFunction",
        "callFunctionStreaming",
        // Methods defined on the Object.prototype might be "typeof probed" and called by libraries and runtime environments.
        ...Object.getOwnPropertyNames(Object.prototype),
    ];
    /**
     * Remove the key for any fields with undefined values.
     *
     * @param args The arguments to clean.
     * @returns The cleaned arguments.
     */
    function cleanArgs(args) {
        for (const arg of args) {
            if (typeof arg === "object" && arg) {
                for (const [key, value] of Object.entries(arg)) {
                    if (value === undefined) {
                        delete arg[key];
                    }
                }
            }
        }
        return args;
    }
    /**
     * Remove keys for any undefined values and serialize to EJSON.
     *
     * @param args The arguments to clean and serialize.
     * @returns The cleaned and serialized arguments.
     */
    function cleanArgsAndSerialize(args) {
        const cleaned = cleanArgs(args);
        return cleaned.map((arg) => (typeof arg === "object" ? serialize(arg) : arg));
    }
    /**
     * Defines how functions are called.
     */
    class FunctionsFactory {
        /**
         * @param fetcher The underlying fetcher to use when sending requests.
         * @param config Additional configuration parameters.
         */
        constructor(fetcher, config = {}) {
            this.fetcher = fetcher;
            this.serviceName = config.serviceName;
            this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;
        }
        /**
         * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.
         *
         * @param fetcher The underlying fetcher to use when requesting.
         * @param config Additional configuration parameters.
         * @returns The newly created factory of functions.
         */
        static create(fetcher, config = {}) {
            // Create a proxy, wrapping a simple object returning methods that calls functions
            // TODO: Lazily fetch available functions and return these from the ownKeys() trap
            const factory = new FunctionsFactory(fetcher, config);
            // Wrap the factory in a proxy that calls the internal call method
            return new Proxy(factory, {
                get(target, p, receiver) {
                    if (typeof p === "string" && RESERVED_NAMES.indexOf(p) === -1) {
                        return target.callFunction.bind(target, p);
                    }
                    else {
                        const prop = Reflect.get(target, p, receiver);
                        return typeof prop === "function" ? prop.bind(target) : prop;
                    }
                },
            });
        }
        /**
         * Call a remote function by it's name.
         *
         * @param name Name of the remote function.
         * @param args Arguments to pass to the remote function.
         * @returns A promise of the value returned when executing the remote function.
         */
        async callFunction(name, ...args) {
            // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts
            const body = {
                name,
                arguments: this.argsTransformation ? this.argsTransformation(args) : args,
            };
            if (this.serviceName) {
                body.service = this.serviceName;
            }
            const appRoute = this.fetcher.appRoute;
            return this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.functionsCall().path,
                body,
            });
        }
        /**
         * Call a remote function by it's name.
         *
         * @param name Name of the remote function.
         * @param args Arguments to pass to the remote function.
         * @returns A promise of the value returned when executing the remote function.
         */
        callFunctionStreaming(name, ...args) {
            const body = {
                name,
                arguments: this.argsTransformation ? this.argsTransformation(args) : args,
            };
            if (this.serviceName) {
                body.service = this.serviceName;
            }
            const appRoute = this.fetcher.appRoute;
            const qs = encodeQueryString({
                ["baas_request"]: gBase64.encode(JSON.stringify(body)),
            });
            return this.fetcher.fetchStream({
                method: "GET",
                path: appRoute.functionsCall().path + qs,
            });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2021 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * Check whether the user's app is running in "development mode" (e.g. `npm run dev`
     * for a React app, or `NODE_ENV=development` for a Node app). Each platform's entry
     * point should define the value of this using `setIsDevelopmentMode`.
     * The default behaviour is to always return `false`.
     *
     * @returns true if the user's app is running in development mode, false otherwise
     */
    let isDevelopmentMode = false;
    /**
     * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)
     * to use its own method for determining whether we are in development mode.
     *
     * @param state A boolean indicating whether the user's app is running in
     * development mode or not.
     */
    const setIsDevelopmentMode = (state) => {
        isDevelopmentMode = state;
    };

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Display a deprecation warning for features being removed in the next major version
     * to users in development mode (as best as we can detect this, see `isDevelopmentMode`)
     *
     * @param deprecatedItem The method signature or name of the deprecated item
     * @param suggestedReplacement The method signature or name of the suggested replacement
     */
    const deprecationWarning = (deprecatedItem, suggestedReplacement) => {
        if (!isDevelopmentMode)
            return;
        console.warn(`Deprecation warning from Realm: ${deprecatedItem} is deprecated and will be removed in a future major release. Consider switching to ${suggestedReplacement}.`);
    };
    /**
     * Helper function for migrating from positional arguments to a single dictionary argument.
     * Check the arguments passed to a function, if the first argument is not an object (i.e. it
     * is presumed to be a deprecated positional-style call), shows a deprecation warning and
     * converts the positional arguments into an object matching the expected "new" shape.
     *
     * @param args Array of arguments passed to the function (captured with `...args`).
     * @param methodName The name of the method, used to show the deprecation warning.
     * @param argNames The list of positional argument names, used to covert them into
     * an object if a deprecated call is made and to show the deprecation warning.
     * @param hasRestArgs Optional flag indicating that the function's final argument is
     * `...args` (to capture any extra arguments), in which case we capture them and return
     * as the second element of the return array.
     *
     * @returns An object containing:
     *
     * argsObject: a dictionary of function arguments, either passed through from args[0] if
     * args[0] is an object, or created from `args` and `argNames` if the args are a
     * deprecated positional argument call.
     *
     * restArgs: an array of the "...args" passed to the function if `hasRestArgs` is true;
     * otherwise it is `undefined`.
     */
    // Allow use of `object` type
    // eslint-disable-next-line @typescript-eslint/ban-types
    const handleDeprecatedPositionalArgs = (args, methodName, argNames, hasRestArgs) => {
        if (typeof args[0] !== "object") {
            const restArgsText = hasRestArgs ? ", ...args" : "";
            deprecationWarning(`${methodName}(${argNames.join(", ")}${restArgsText})`, `${methodName}({ ${argNames.join(", ")} }${restArgsText})`);
            // Convert the array of arguments into a dictionary keyed by the relevant argName
            const argsObject = argNames.reduce((prev, argName, index) => {
                return { ...prev, [argName]: args[index] };
            }, {});
            const restArgs = hasRestArgs ? args.slice(argNames.length) : undefined;
            return { argsObject, restArgs };
        }
        return { argsObject: args[0], restArgs: hasRestArgs ? args.slice(1) : undefined };
    };

    ////////////////////////////////////////////////////////////////////////////
    // React/React Native set a global __DEV__ variable when running in dev mode
    setIsDevelopmentMode(typeof __DEV__ !== "undefined" && __DEV__);

    ////////////////////////////////////////////////////////////////////////////
    /** @inheritdoc */
    class EmailPasswordAuth {
        /**
         * Construct an interface to the email / password authentication provider.
         *
         * @param fetcher The underlying fetcher used to request the services.
         * @param providerName Optional custom name of the authentication provider.
         */
        constructor(fetcher, providerName = "local-userpass") {
            this.fetcher = fetcher;
            this.providerName = providerName;
        }
        async registerUser(...args) {
            const { argsObject: userDetails } = handleDeprecatedPositionalArgs(args, "registerUser", ["email", "password"]);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).register().path,
                body: userDetails,
            });
        }
        async confirmUser(...args) {
            const { argsObject: tokenDetails } = handleDeprecatedPositionalArgs(args, "confirmUser", ["token", "tokenId"]);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).confirm().path,
                body: tokenDetails,
            });
        }
        async resendConfirmationEmail(...args) {
            const { argsObject: emailDetails } = handleDeprecatedPositionalArgs(args, "resendConfirmationEmail", ["email"]);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).confirmSend().path,
                body: emailDetails,
            });
        }
        async retryCustomConfirmation(...args) {
            const { argsObject: emailDetails } = handleDeprecatedPositionalArgs(args, "retryCustomConfirmation", ["email"]);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).confirmCall().path,
                body: emailDetails,
            });
        }
        async resetPassword(...args) {
            const { argsObject: resetDetails } = handleDeprecatedPositionalArgs(args, "resetPassword", ["token", "tokenId", "password"]);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).reset().path,
                body: resetDetails,
            });
        }
        async sendResetPasswordEmail(...args) {
            const { argsObject: emailDetails } = handleDeprecatedPositionalArgs(args, "sendResetPasswordEmail", ["email"]);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).resetSend().path,
                body: emailDetails,
            });
        }
        async callResetPasswordFunction(...args) {
            const { argsObject: resetDetails, restArgs, } = handleDeprecatedPositionalArgs(args, "callResetPasswordFunction", ["email", "password"], true);
            const appRoute = this.fetcher.appRoute;
            await this.fetcher.fetchJSON({
                method: "POST",
                path: appRoute.emailPasswordAuth(this.providerName).resetCall().path,
                body: { ...resetDetails, arguments: restArgs },
            });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * @returns The base api route.
     */
    function api() {
        return {
            path: "/api/client/v2.0",
            /**
             * @param appId The id of the app.
             * @returns The URL of the app endpoint.
             */
            app(appId) {
                return {
                    path: this.path + `/app/${appId}`,
                    /**
                     * @returns The URL of the app location endpoint.
                     */
                    location() {
                        return {
                            path: this.path + "/location",
                        };
                    },
                    /**
                     * @param providerName The name of the provider.
                     * @returns The app url concatinated with the /auth/providers/{providerName}
                     */
                    authProvider(providerName) {
                        return {
                            path: this.path + `/auth/providers/${providerName}`,
                            /**
                             * @returns Get the URL of an authentication provider.
                             */
                            login() {
                                return { path: this.path + "/login" };
                            },
                        };
                    },
                    /**
                     * @param providerName The name of the provider.
                     * @returns The app url concatinated with the /auth/providers/{providerName}
                     */
                    emailPasswordAuth(providerName) {
                        const authProviderRoutes = this.authProvider(providerName);
                        return {
                            ...authProviderRoutes,
                            register() {
                                return { path: this.path + "/register" };
                            },
                            confirm() {
                                return { path: this.path + "/confirm" };
                            },
                            confirmSend() {
                                return { path: this.path + "/confirm/send" };
                            },
                            confirmCall() {
                                return { path: this.path + "/confirm/call" };
                            },
                            reset() {
                                return { path: this.path + "/reset" };
                            },
                            resetSend() {
                                return { path: this.path + "/reset/send" };
                            },
                            resetCall() {
                                return { path: this.path + "/reset/call" };
                            },
                        };
                    },
                    functionsCall() {
                        return {
                            path: this.path + "/functions/call",
                        };
                    },
                };
            },
            auth() {
                return {
                    path: this.path + "/auth",
                    apiKeys() {
                        return {
                            path: this.path + "/api_keys",
                            key(id) {
                                return {
                                    path: this.path + `/${id}`,
                                    enable() {
                                        return { path: this.path + "/enable" };
                                    },
                                    disable() {
                                        return { path: this.path + "/disable" };
                                    },
                                };
                            },
                        };
                    },
                    profile() {
                        return { path: this.path + "/profile" };
                    },
                    session() {
                        return { path: this.path + "/session" };
                    },
                    delete() {
                        return { path: this.path + "/delete" };
                    },
                };
            },
        };
    }
    var routes = { api };

    ////////////////////////////////////////////////////////////////////////////
    /** @inheritdoc */
    class ApiKeyAuth {
        /**
         * Construct an interface to the API-key authentication provider.
         *
         * @param fetcher The fetcher used to send requests to services.
         */
        constructor(fetcher) {
            this.fetcher = fetcher;
        }
        /** @inheritdoc */
        create(name) {
            return this.fetcher.fetchJSON({
                method: "POST",
                body: { name },
                path: routes.api().auth().apiKeys().path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        fetch(keyId) {
            return this.fetcher.fetchJSON({
                method: "GET",
                path: routes.api().auth().apiKeys().key(keyId).path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        fetchAll() {
            return this.fetcher.fetchJSON({
                method: "GET",
                tokenType: "refresh",
                path: routes.api().auth().apiKeys().path,
            });
        }
        /** @inheritdoc */
        async delete(keyId) {
            await this.fetcher.fetchJSON({
                method: "DELETE",
                path: routes.api().auth().apiKeys().key(keyId).path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        async enable(keyId) {
            await this.fetcher.fetchJSON({
                method: "PUT",
                path: routes.api().auth().apiKeys().key(keyId).enable().path,
                tokenType: "refresh",
            });
        }
        /** @inheritdoc */
        async disable(keyId) {
            await this.fetcher.fetchJSON({
                method: "PUT",
                path: routes.api().auth().apiKeys().key(keyId).disable().path,
                tokenType: "refresh",
            });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    let environment = null;
    /**
     * Set the environment of execution.
     * Note: This should be called as the first thing before executing any code which calls getEnvironment()
     *
     * @param e An object containing environment specific implementations.
     */
    function setEnvironment(e) {
        environment = e;
    }
    /**
     * Get the environment of execution.
     *
     * @returns An object containing environment specific implementations.
     */
    function getEnvironment() {
        if (environment) {
            return environment;
        }
        else {
            throw new Error("Cannot get environment before it's set");
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    /**
     * An error occured during the parsing of a watch stream.
     */
    class WatchError extends Error {
        constructor({ message, code }) {
            super(message);
            /**
             * The name of this type of error
             */
            this.name = "WatchError";
            this.code = code;
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    // NOTE: this is a fully processed event, not a single "data: foo" line!
    /**
     * The state of a WatchStream.
     */
    var WatchStreamState;
    (function (WatchStreamState) {
        /**
         * Need to call one of the feed functions.
         */
        WatchStreamState["NEED_DATA"] = "NEED_DATA";
        /**
         * Call nextEvent() to consume an event.
         */
        WatchStreamState["HAVE_EVENT"] = "HAVE_EVENT";
        /**
         * Call error().
         */
        WatchStreamState["HAVE_ERROR"] = "HAVE_ERROR";
    })(WatchStreamState || (WatchStreamState = {}));
    /**
     * Represents a stream of events
     */
    class WatchStream {
        constructor() {
            this._state = WatchStreamState.NEED_DATA;
            this._error = null;
            // Used by feedBuffer to construct lines
            this._textDecoder = new (getEnvironment().TextDecoder)();
            this._buffer = "";
            this._bufferOffset = 0;
            // Used by feedLine for building the next SSE
            this._eventType = "";
            this._dataBuffer = "";
        }
        // Call these when you have data, in whatever shape is easiest for your SDK to get.
        // Pick one, mixing and matching on a single instance isn't supported.
        // These can only be called in NEED_DATA state, which is the initial state.
        feedBuffer(buffer) {
            this.assertState(WatchStreamState.NEED_DATA);
            this._buffer += this._textDecoder.decode(buffer, { stream: true });
            this.advanceBufferState();
        }
        feedLine(line) {
            this.assertState(WatchStreamState.NEED_DATA);
            // This is an implementation of the algorithm described at
            // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.
            // Currently the server does not use id or retry lines, so that processing isn't implemented.
            // ignore trailing LF if not removed by SDK.
            if (line.endsWith("\n"))
                line = line.substr(0, line.length - 1);
            // ignore trailing CR from CRLF
            if (line.endsWith("\r"))
                line = line.substr(0, line.length - 1);
            if (line.length === 0) {
                // This is the "dispatch the event" portion of the algorithm.
                if (this._dataBuffer.length === 0) {
                    this._eventType = "";
                    return;
                }
                if (this._dataBuffer.endsWith("\n"))
                    this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);
                this.feedSse({
                    data: this._dataBuffer,
                    eventType: this._eventType,
                });
                this._dataBuffer = "";
                this._eventType = "";
            }
            if (line[0] === ":")
                return;
            const colon = line.indexOf(":");
            const field = line.substr(0, colon);
            let value = colon === -1 ? "" : line.substr(colon + 1);
            if (value.startsWith(" "))
                value = value.substr(1);
            if (field === "event") {
                this._eventType = value;
            }
            else if (field === "data") {
                this._dataBuffer += value;
                this._dataBuffer += "\n";
            }
            else ;
        }
        feedSse(sse) {
            this.assertState(WatchStreamState.NEED_DATA);
            const firstPercentIndex = sse.data.indexOf("%");
            if (firstPercentIndex !== -1) {
                // For some reason, the stich server decided to add percent-encoding for '%', '\n', and '\r' to its
                // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use
                // uri_percent_decode() here.
                let buffer = "";
                let start = 0;
                for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf("%", start)) {
                    buffer += sse.data.substr(start, percentIndex - start);
                    const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %
                    if (encoded === "%25") {
                        buffer += "%";
                    }
                    else if (encoded === "%0A") {
                        buffer += "\x0A"; // '\n'
                    }
                    else if (encoded === "%0D") {
                        buffer += "\x0D"; // '\r'
                    }
                    else {
                        buffer += encoded; // propagate as-is
                    }
                    start = percentIndex + encoded.length;
                }
                // Advance the buffer with the last part
                buffer += sse.data.substr(start);
                sse.data = buffer;
            }
            if (!sse.eventType || sse.eventType === "message") {
                try {
                    const parsed = EJSON.parse(sse.data);
                    if (typeof parsed === "object") {
                        // ???
                        this._nextEvent = parsed;
                        this._state = WatchStreamState.HAVE_EVENT;
                        return;
                    }
                }
                catch {
                    // fallthrough to same handling as for non-document value.
                }
                this._state = WatchStreamState.HAVE_ERROR;
                this._error = new WatchError({
                    message: "server returned malformed event: " + sse.data,
                    code: "bad bson parse",
                });
            }
            else if (sse.eventType === "error") {
                this._state = WatchStreamState.HAVE_ERROR;
                // default error message if we have issues parsing the reply.
                this._error = new WatchError({
                    message: sse.data,
                    code: "unknown",
                });
                try {
                    const { error_code: errorCode, error } = EJSON.parse(sse.data);
                    if (typeof errorCode !== "string")
                        return;
                    if (typeof error !== "string")
                        return;
                    // XXX in realm-js, object-store will error if the error_code is not one of the known
                    // error code enum values.
                    this._error = new WatchError({
                        message: error,
                        code: errorCode,
                    });
                }
                catch {
                    return; // Use the default state.
                }
            }
            else ;
        }
        get state() {
            return this._state;
        }
        // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,
        // so you need to call state() again to see what to do next.
        nextEvent() {
            this.assertState(WatchStreamState.HAVE_EVENT);
            // We can use "as ChangeEvent<T>" since we just asserted the state.
            const out = this._nextEvent;
            this._state = WatchStreamState.NEED_DATA;
            this.advanceBufferState();
            return out;
        }
        // Once this enters the error state, it stays that way. You should not feed any more data.
        get error() {
            return this._error;
        }
        ////////////////////////////////////////////
        advanceBufferState() {
            this.assertState(WatchStreamState.NEED_DATA);
            while (this.state === WatchStreamState.NEED_DATA) {
                if (this._bufferOffset === this._buffer.length) {
                    this._buffer = "";
                    this._bufferOffset = 0;
                    return;
                }
                // NOTE not supporting CR-only newlines, just LF and CRLF.
                const nextNewlineIndex = this._buffer.indexOf("\n", this._bufferOffset);
                if (nextNewlineIndex === -1) {
                    // We have a partial line.
                    if (this._bufferOffset !== 0) {
                        // Slide the partial line down to the front of the buffer.
                        this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);
                        this._bufferOffset = 0;
                    }
                    return;
                }
                this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));
                this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.
            }
        }
        assertState(state) {
            if (this._state !== state) {
                throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * A remote collection of documents.
     */
    class MongoDBCollection {
        /**
         * Construct a remote collection of documents.
         *
         * @param fetcher The fetcher to use when requesting the service.
         * @param serviceName The name of the remote service.
         * @param databaseName The name of the database.
         * @param collectionName The name of the remote collection.
         */
        constructor(fetcher, serviceName, databaseName, collectionName) {
            this.functions = FunctionsFactory.create(fetcher, {
                serviceName,
            });
            this.databaseName = databaseName;
            this.collectionName = collectionName;
            this.serviceName = serviceName;
            this.fetcher = fetcher;
        }
        /** @inheritdoc */
        find(filter = {}, options = {}) {
            return this.functions.find({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                project: options.projection,
                sort: options.sort,
                limit: options.limit,
            });
        }
        /** @inheritdoc */
        findOne(filter = {}, options = {}) {
            return this.functions.findOne({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                project: options.projection,
                sort: options.sort,
            });
        }
        /** @inheritdoc */
        findOneAndUpdate(filter = {}, update, options = {}) {
            return this.functions.findOneAndUpdate({
                database: this.databaseName,
                collection: this.collectionName,
                filter,
                update,
                sort: options.sort,
                projection: options.projection,
                upsert: options.upsert,
                returnNewDocument: options.returnNewDocument,
            });
        }
        /** @inheritdoc */
        findOneAndReplace(filter = {}, replacement, options = {}) {
            return this.functions.findOneAndReplace({
                database: this.databaseName,
                collection: this.collectionName,
                filter: filter,
                update: replacement,
                sort: options.sort,
                projection: options.projection,
                upsert: options.upsert,
                returnNewDocument: options.returnNewDocument,
            });
        }
        /** @inheritdoc */
        findOneAndDelete(filter = {}, options = {}) {
            return this.functions.findOneAndReplace({
                database: this.databaseName,
                collection: this.collectionName,
                filter,
                sort: options.sort,
                projection: options.projection,
            });
        }
        /** @inheritdoc */
        aggregate(pipeline) {
            return this.functions.aggregate({
                database: this.databaseName,
                collection: this.collectionName,
                pipeline,
            });
        }
        /** @inheritdoc */
        count(filter = {}, options = {}) {
            return this.functions.count({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                limit: options.limit,
            });
        }
        /** @inheritdoc */
        insertOne(document) {
            return this.functions.insertOne({
                database: this.databaseName,
                collection: this.collectionName,
                document,
            });
        }
        /** @inheritdoc */
        insertMany(documents) {
            return this.functions.insertMany({
                database: this.databaseName,
                collection: this.collectionName,
                documents,
            });
        }
        /** @inheritdoc */
        deleteOne(filter = {}) {
            return this.functions.deleteOne({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
            });
        }
        /** @inheritdoc */
        deleteMany(filter = {}) {
            return this.functions.deleteMany({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
            });
        }
        /** @inheritdoc */
        updateOne(filter, update, options = {}) {
            return this.functions.updateOne({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                update,
                upsert: options.upsert,
                arrayFilters: options.arrayFilters,
            });
        }
        /** @inheritdoc */
        updateMany(filter, update, options = {}) {
            return this.functions.updateMany({
                database: this.databaseName,
                collection: this.collectionName,
                query: filter,
                update,
                upsert: options.upsert,
                arrayFilters: options.arrayFilters,
            });
        }
        async *watch({ ids, filter, } = {}) {
            const iterator = await this.functions.callFunctionStreaming("watch", {
                database: this.databaseName,
                collection: this.collectionName,
                ids,
                filter,
            });
            const watchStream = new WatchStream();
            for await (const chunk of iterator) {
                if (!chunk)
                    continue;
                watchStream.feedBuffer(chunk);
                while (watchStream.state == WatchStreamState.HAVE_EVENT) {
                    yield watchStream.nextEvent();
                }
                if (watchStream.state == WatchStreamState.HAVE_ERROR)
                    // XXX this is just throwing an error like {error_code: "BadRequest, error: "message"},
                    // which matches realm-js, but is different from how errors are handled in realm-web
                    throw watchStream.error;
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Creates an Remote MongoDB Collection.
     * Note: This method exists to enable function binding.
     *
     * @param fetcher The underlying fetcher.
     * @param serviceName A service name.
     * @param databaseName A database name.
     * @param collectionName A collection name.
     * @returns The collection.
     */
    function createCollection(fetcher, serviceName, databaseName, collectionName) {
        return new MongoDBCollection(fetcher, serviceName, databaseName, collectionName);
    }
    /**
     * Creates a Remote MongoDB Database.
     * Note: This method exists to enable function binding.
     *
     * @param fetcher The underlying fetcher
     * @param serviceName A service name
     * @param databaseName A database name
     * @returns The database.
     */
    function createDatabase(fetcher, serviceName, databaseName) {
        return {
            collection: createCollection.bind(null, fetcher, serviceName, databaseName),
        };
    }
    /**
     * Creates a Remote MongoDB Service.
     * Note: This method exists to enable function binding.
     *
     * @param fetcher The underlying fetcher.
     * @param serviceName An optional service name.
     * @returns The service.
     */
    function createService(fetcher, serviceName = "mongo-db") {
        return { db: createDatabase.bind(null, fetcher, serviceName) };
    }

    ////////////////////////////////////////////////////////////////////////////
    const DEFAULT_DEVICE_ID = "000000000000000000000000";
    /** The state of a user within the app */
    var UserState;
    (function (UserState) {
        /** Active, with both access and refresh tokens */
        UserState["Active"] = "active";
        /** Logged out, but there might still be data persisted about the user, in the browser. */
        UserState["LoggedOut"] = "logged-out";
        /** Logged out and all data about the user has been removed. */
        UserState["Removed"] = "removed";
    })(UserState || (UserState = {}));
    /** The type of a user. */
    var UserType$1;
    (function (UserType) {
        /** Created by the user itself. */
        UserType["Normal"] = "normal";
        /** Created by an administrator of the app. */
        UserType["Server"] = "server";
    })(UserType$1 || (UserType$1 = {}));
    /**
     * Representation of an authenticated user of an app.
     */
    class User {
        /**
         * @param parameters Parameters of the user.
         */
        constructor(parameters) {
            this.app = parameters.app;
            this.id = parameters.id;
            this.storage = new UserStorage(this.app.storage, this.id);
            if ("accessToken" in parameters && "refreshToken" in parameters && "providerType" in parameters) {
                this._accessToken = parameters.accessToken;
                this._refreshToken = parameters.refreshToken;
                this.providerType = parameters.providerType;
                // Save the parameters to storage, for future instances to be hydrated from
                this.storage.accessToken = parameters.accessToken;
                this.storage.refreshToken = parameters.refreshToken;
                this.storage.providerType = parameters.providerType;
            }
            else {
                // Hydrate the rest of the parameters from storage
                this._accessToken = this.storage.accessToken;
                this._refreshToken = this.storage.refreshToken;
                const providerType = this.storage.providerType;
                this._profile = this.storage.profile;
                if (providerType) {
                    this.providerType = providerType;
                }
                else {
                    throw new Error("Storage is missing a provider type");
                }
            }
            this.fetcher = this.app.fetcher.clone({
                userContext: { currentUser: this },
            });
            this.apiKeys = new ApiKeyAuth(this.fetcher);
            this.functions = FunctionsFactory.create(this.fetcher);
        }
        /**
         * @returns The access token used to authenticate the user towards MongoDB Realm.
         */
        get accessToken() {
            return this._accessToken;
        }
        /**
         * @param token The new access token.
         */
        set accessToken(token) {
            this._accessToken = token;
            this.storage.accessToken = token;
        }
        /**
         * @returns The refresh token used to issue new access tokens.
         */
        get refreshToken() {
            return this._refreshToken;
        }
        /**
         * @param token The new refresh token.
         */
        set refreshToken(token) {
            this._refreshToken = token;
            this.storage.refreshToken = token;
        }
        /**
         * @returns The current state of the user.
         */
        get state() {
            if (this.id in this.app.allUsers) {
                return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;
            }
            else {
                return UserState.Removed;
            }
        }
        /**
         * @returns The logged in state of the user.
         */
        get isLoggedIn() {
            return this.state === UserState.Active;
        }
        get customData() {
            if (this.accessToken) {
                const decodedToken = this.decodeAccessToken();
                return decodedToken.userData;
            }
            else {
                throw new Error("Cannot read custom data without an access token");
            }
        }
        /**
         * @returns Profile containing detailed information about the user.
         */
        get profile() {
            if (this._profile) {
                return this._profile.data;
            }
            else {
                throw new Error("A profile was never fetched for this user");
            }
        }
        get identities() {
            if (this._profile) {
                return this._profile.identities;
            }
            else {
                throw new Error("A profile was never fetched for this user");
            }
        }
        get deviceId() {
            if (this.accessToken) {
                const payload = this.accessToken.split(".")[1];
                if (payload) {
                    const parsedPayload = JSON.parse(gBase64.decode(payload));
                    const deviceId = parsedPayload["baas_device_id"];
                    if (typeof deviceId === "string" && deviceId !== DEFAULT_DEVICE_ID) {
                        return deviceId;
                    }
                }
            }
            return null;
        }
        /**
         * Refresh the users profile data.
         */
        async refreshProfile() {
            // Fetch the latest profile
            const response = await this.fetcher.fetchJSON({
                method: "GET",
                path: routes.api().auth().profile().path,
            });
            // Create a profile instance
            this._profile = new UserProfile(response);
            // Store this for later hydration
            this.storage.profile = this._profile;
        }
        /**
         * Log out the user, invalidating the session (and its refresh token).
         */
        async logOut() {
            // Invalidate the refresh token
            try {
                if (this._refreshToken !== null) {
                    await this.fetcher.fetchJSON({
                        method: "DELETE",
                        path: routes.api().auth().session().path,
                        tokenType: "refresh",
                    });
                }
            }
            catch (err) {
                // Ignore failing to delete a missing refresh token
                // It might have expired or it might be gone due to the user being deleted
                if (!(err instanceof Error) || !err.message.includes("failed to find refresh token")) {
                    throw err;
                }
            }
            finally {
                // Forget the access and refresh token
                this.accessToken = null;
                this.refreshToken = null;
            }
        }
        /** @inheritdoc */
        async linkCredentials(credentials) {
            const response = await this.app.authenticator.authenticate(credentials, this);
            // Sanity check the response
            if (this.id !== response.userId) {
                const details = `got user id ${response.userId} expected ${this.id}`;
                throw new Error(`Link response ment for another user (${details})`);
            }
            // Update the access token
            this.accessToken = response.accessToken;
            // Refresh the profile to include the new identity
            await this.refreshProfile();
        }
        /**
         * Request a new access token, using the refresh token.
         */
        async refreshAccessToken() {
            const response = await this.fetcher.fetchJSON({
                method: "POST",
                path: routes.api().auth().session().path,
                tokenType: "refresh",
            });
            const { access_token: accessToken } = response;
            if (typeof accessToken === "string") {
                this.accessToken = accessToken;
            }
            else {
                throw new Error("Expected an 'access_token' in the response");
            }
        }
        /** @inheritdoc */
        async refreshCustomData() {
            await this.refreshAccessToken();
            return this.customData;
        }
        /** @inheritdoc */
        callFunction(name, ...args) {
            return this.functions.callFunction(name, ...args);
        }
        /**
         * @returns A plain ol' JavaScript object representation of the user.
         */
        toJSON() {
            return {
                id: this.id,
                accessToken: this.accessToken,
                refreshToken: this.refreshToken,
                profile: this._profile,
                state: this.state,
                customData: this.customData,
            };
        }
        /** @inheritdoc */
        push() {
            throw new Error("Not yet implemented");
        }
        /** @inheritdoc */
        mongoClient(serviceName) {
            return createService(this.fetcher, serviceName);
        }
        decodeAccessToken() {
            if (this.accessToken) {
                // Decode and spread the token
                const parts = this.accessToken.split(".");
                if (parts.length !== 3) {
                    throw new Error("Expected an access token with three parts");
                }
                // Decode the payload
                const encodedPayload = parts[1];
                const decodedPayload = gBase64.decode(encodedPayload);
                const parsedPayload = JSON.parse(decodedPayload);
                const { exp: expires, iat: issuedAt, sub: subject, user_data: userData = {} } = parsedPayload;
                // Validate the types
                if (typeof expires !== "number") {
                    throw new Error("Failed to decode access token 'exp'");
                }
                else if (typeof issuedAt !== "number") {
                    throw new Error("Failed to decode access token 'iat'");
                }
                return { expires, issuedAt, subject, userData };
            }
            else {
                throw new Error("Missing an access token");
            }
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    // TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials
    // See https://stackoverflow.com/a/43484801
    /**
     * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.
     */
    class Credentials {
        /**
         * Constructs an instance of credentials.
         *
         * @param providerName The name of the authentication provider used when authenticating.
         * @param providerType The type of the authentication provider used when authenticating.
         * @param payload The data being sent to the service when authenticating.
         */
        constructor(providerName, providerType, payload) {
            this.providerName = providerName;
            this.providerType = providerType;
            this.payload = payload;
        }
        /**
         * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).
         *
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static anonymous() {
            return new Credentials("anon-user", "anon-user", {});
        }
        /**
         * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
         *
         * @deprecated Use `Credentials.apiKey`.
         * @param key The secret content of the API key.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static userApiKey(key) {
            return new Credentials("api-key", "api-key", { key });
        }
        /**
         * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
         *
         * @deprecated Use `Credentials.apiKey`.
         * @param key The secret content of the API key.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static serverApiKey(key) {
            return new Credentials("api-key", "api-key", { key });
        }
        /**
         * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
         *
         * @param key The secret content of the API key.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static apiKey(key) {
            return new Credentials("api-key", "api-key", { key });
        }
        /**
         * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).
         * Note: This was formerly known as the "Username/Password" provider.
         *
         * @param email The end-users email address.
         * @param password The end-users password.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static emailPassword(email, password) {
            return new Credentials("local-userpass", "local-userpass", {
                username: email,
                password,
            });
        }
        /**
         * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).
         *
         * @param payload The custom payload as expected by the server.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static function(payload) {
            return new Credentials("custom-function", "custom-function", payload);
        }
        /**
         * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).
         *
         * @param token The JSON Web Token (JWT).
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static jwt(token) {
            return new Credentials("custom-token", "custom-token", {
                token,
            });
        }
        /**
         * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).
         *
         * @param payload The URL that users should be redirected to, the auth code or id token from Google.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static google(payload) {
            return new Credentials("oauth2-google", "oauth2-google", Credentials.derivePayload(payload));
        }
        /**
         * @param payload The payload string.
         * @returns A payload object based on the string.
         */
        static derivePayload(payload) {
            if (typeof payload === "string") {
                if (payload.includes("://")) {
                    return this.derivePayload({ redirectUrl: payload });
                }
                else if (payload.startsWith("4/")) {
                    return this.derivePayload({ authCode: payload });
                }
                else if (payload.startsWith("ey")) {
                    return this.derivePayload({ idToken: payload });
                }
                else {
                    throw new Error(`Unexpected payload: ${payload}`);
                }
            }
            else if (Object.keys(payload).length === 1) {
                if ("authCode" in payload || "redirectUrl" in payload) {
                    return payload;
                }
                else if ("idToken" in payload) {
                    return { id_token: payload.idToken };
                }
                else {
                    throw new Error("Unexpected payload: " + JSON.stringify(payload));
                }
            }
            else {
                throw new Error("Expected only one property in payload, got " + JSON.stringify(payload));
            }
        }
        /**
         * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).
         *
         * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static facebook(redirectUrlOrAccessToken) {
            return new Credentials("oauth2-facebook", "oauth2-facebook", redirectUrlOrAccessToken.includes("://")
                ? { redirectUrl: redirectUrlOrAccessToken }
                : { accessToken: redirectUrlOrAccessToken });
        }
        /**
         * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).
         *
         * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.
         * @returns The credentials instance, which can be passed to `app.logIn`.
         */
        static apple(redirectUrlOrIdToken) {
            return new Credentials("oauth2-apple", "oauth2-apple", redirectUrlOrIdToken.includes("://") ? { redirectUrl: redirectUrlOrIdToken } : { id_token: redirectUrlOrIdToken });
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const USER_IDS_STORAGE_KEY = "userIds";
    const DEVICE_ID_STORAGE_KEY = "deviceId";
    /**
     * Storage specific to the app.
     */
    class AppStorage extends PrefixedStorage {
        /**
         * @param storage The underlying storage to wrap.
         * @param appId The id of the app.
         */
        constructor(storage, appId) {
            super(storage, `app(${appId})`);
        }
        /**
         * Reads out the list of user ids from storage.
         *
         * @returns A list of user ids.
         */
        getUserIds() {
            const userIdsString = this.get(USER_IDS_STORAGE_KEY);
            const userIds = userIdsString ? JSON.parse(userIdsString) : [];
            if (Array.isArray(userIds)) {
                // Remove any duplicates that might have been added
                // The Set preserves insertion order
                return [...new Set(userIds)];
            }
            else {
                throw new Error("Expected the user ids to be an array");
            }
        }
        /**
         * Sets the list of ids in storage.
         * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.
         *
         * @param userIds The list of ids to store.
         * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.
         */
        setUserIds(userIds, mergeWithExisting) {
            if (mergeWithExisting) {
                // Add any existing user id to the end of this list, avoiding duplicates
                const existingIds = this.getUserIds();
                for (const id of existingIds) {
                    if (userIds.indexOf(id) === -1) {
                        userIds.push(id);
                    }
                }
            }
            // Store the list of ids
            this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));
        }
        /**
         * Remove an id from the list of ids.
         *
         * @param userId The id of a User to be removed.
         */
        removeUserId(userId) {
            const existingIds = this.getUserIds();
            const userIds = existingIds.filter((id) => id !== userId);
            // Store the list of ids
            this.setUserIds(userIds, false);
        }
        /**
         * @returns id of this device (if any exists)
         */
        getDeviceId() {
            return this.get(DEVICE_ID_STORAGE_KEY);
        }
        /**
         * @param deviceId The id of this device, to send on subsequent authentication requests.
         */
        setDeviceId(deviceId) {
            this.set(DEVICE_ID_STORAGE_KEY, deviceId);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    const LOWERCASE_LETTERS = "abcdefghijklmnopqrstuvwxyz";
    const CLOSE_CHECK_INTERVAL = 100; // 10 times per second
    const REDIRECT_HASH_TO_RESULT = {
        _stitch_client_app_id: "appId",
        _baas_client_app_id: "appId",
        _stitch_ua: "userAuth",
        _baas_ua: "userAuth",
        _stitch_link: "link",
        _baas_link: "link",
        _stitch_error: "error",
        _baas_error: "error",
        _stitch_state: "state",
        _baas_state: "state",
    };
    /**
     * A collection of methods helping implement the OAuth2 flow.
     */
    class OAuth2Helper {
        /**
         * @param storage The underlying storage to use when storing and retriving secrets.
         * @param openWindow An optional function called when a browser window needs to open.
         */
        constructor(storage, openWindow = getEnvironment().openWindow) {
            this.storage = storage.prefix("oauth2");
            this.openWindow = openWindow;
        }
        /**
         * Parses the query string from the final step of the OAuth flow.
         *
         * @param queryString The query string passed through in location.hash.
         * @returns The result of the OAuth flow.
         */
        static parseRedirectLocation(queryString) {
            const params = decodeQueryString(queryString);
            const result = {};
            for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {
                const value = params[p];
                if (value) {
                    result[r] = value;
                }
            }
            return result;
        }
        /**
         * Handle the redirect querystring by parsing it and storing it for others to consume.
         *
         * @param queryString The query string containing the encoded result from the OAuth provider.
         * @param storage The underlying storage used to persist the result.
         */
        static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {
            const result = OAuth2Helper.parseRedirectLocation(queryString);
            const { state, error } = result;
            if (typeof state === "string") {
                const oauth2Storage = storage.prefix("oauth2");
                const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);
                stateStorage.set("result", JSON.stringify(result));
            }
            else if (error) {
                throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);
            }
            else {
                throw new Error("Failed to handle OAuth 2.0 redirect.");
            }
        }
        /**
         * Decodes the authInfo string into its seperate parts.
         *
         * @param authInfo An authInfo string returned from the server.
         * @returns An object containing the separate parts of the authInfo string.
         */
        static decodeAuthInfo(authInfo) {
            const parts = (authInfo || "").split("$");
            if (parts.length === 4) {
                const [accessToken, refreshToken, userId, deviceId] = parts;
                return { accessToken, refreshToken, userId, deviceId };
            }
            else {
                throw new Error("Failed to decode 'authInfo' into ids and tokens");
            }
        }
        /**
         * Get the storage key associated of an secret associated with a state.
         *
         * @param storage The root storage used to derive a "state namespaced" storage.
         * @param state The random state.
         * @returns The storage associated with a particular state.
         */
        static getStateStorage(storage, state) {
            return storage.prefix(`state(${state})`);
        }
        /**
         * Open a window and wait for the redirect to be handled.
         *
         * @param url The URL to open.
         * @param state The state which will be used to listen for storage updates.
         * @returns The result passed through the redirect.
         */
        openWindowAndWaitForRedirect(url, state) {
            const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);
            // Return a promise that resolves when the  gets known
            return new Promise((resolve, reject) => {
                let redirectWindow = null;
                // We're declaring the interval now to enable referencing before its initialized
                let windowClosedInterval; // eslint-disable-line prefer-const
                const handleStorageUpdate = () => {
                    // Trying to get the secret from storage
                    const result = stateStorage.get("result");
                    if (result) {
                        const parsedResult = JSON.parse(result);
                        // The secret got updated!
                        stateStorage.removeListener(handleStorageUpdate);
                        // Clear the storage to prevent others from reading this
                        stateStorage.clear();
                        // Try closing the newly created window
                        try {
                            if (redirectWindow) {
                                // Stop checking if the window closed
                                clearInterval(windowClosedInterval);
                                redirectWindow.close();
                            }
                        }
                        catch (err) {
                            console.warn(`Failed closing redirect window: ${err}`);
                        }
                        finally {
                            resolve(parsedResult);
                        }
                    }
                };
                // Add a listener to the state storage, awaiting an update to the secret
                stateStorage.addListener(handleStorageUpdate);
                // Open up a window
                redirectWindow = this.openWindow(url);
                // Not using a const, because we need the two listeners to reference each other when removing the other.
                windowClosedInterval = setInterval(() => {
                    // Polling "closed" because registering listeners on the window violates cross-origin policies
                    if (!redirectWindow) {
                        // No need to keep polling for a window that we can't check
                        clearInterval(windowClosedInterval);
                    }
                    else if (redirectWindow.closed) {
                        // Stop polling the window state
                        clearInterval(windowClosedInterval);
                        // Stop listening for changes to the storage
                        stateStorage.removeListener(handleStorageUpdate);
                        // Reject the promise
                        const err = new Error("Window closed");
                        reject(err);
                    }
                }, CLOSE_CHECK_INTERVAL);
            });
        }
        /**
         * Generate a random state string.
         *
         * @returns The random state string.
         */
        generateState() {
            return generateRandomString(12, LOWERCASE_LETTERS);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const REDIRECT_LOCATION_HEADER = "x-baas-location";
    /**
     * Handles authentication and linking of users.
     */
    class Authenticator {
        /**
         * @param fetcher The fetcher used to fetch responses from the server.
         * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).
         * @param getDeviceInformation Called to get device information to be sent to the server.
         */
        constructor(fetcher, storage, getDeviceInformation) {
            this.fetcher = fetcher;
            this.oauth2 = new OAuth2Helper(storage);
            this.getDeviceInformation = getDeviceInformation;
        }
        /**
         * @param credentials Credentials to use when logging in.
         * @param linkingUser A user requesting to link.
         * @returns A promise resolving to the response from the server.
         */
        async authenticate(credentials, linkingUser) {
            const deviceInformation = this.getDeviceInformation();
            const isLinking = typeof linkingUser === "object";
            if (credentials.providerType.startsWith("oauth2") && typeof credentials.payload.redirectUrl === "string") {
                // Initiate the OAuth2 flow by generating a state and fetch a redirect URL
                const state = this.oauth2.generateState();
                const url = await this.getLogInUrl(credentials, isLinking, {
                    state,
                    redirect: credentials.payload.redirectUrl,
                    // Ensure redirects are communicated in a header different from "Location" and status remains 200 OK
                    providerRedirectHeader: isLinking ? true : undefined,
                    // Add the device information, only if we're not linking - since that request won't have a body of its own.
                    device: !isLinking ? deviceInformation.encode() : undefined,
                });
                // If we're linking, we need to send the users access token in the request
                if (isLinking) {
                    const response = await this.fetcher.fetch({
                        method: "GET",
                        url,
                        tokenType: isLinking ? "access" : "none",
                        user: linkingUser,
                        // The response will set a cookie that we need to tell the browser to store
                        mode: "cors",
                        credentials: "include",
                    });
                    // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled
                    const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);
                    if (redirectUrl) {
                        return this.openWindowAndWaitForAuthResponse(redirectUrl, state);
                    }
                    else {
                        throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);
                    }
                }
                else {
                    // Otherwise we can open a window and let the server redirect the user right away
                    // This gives lower latency (as we don't need the client to receive and execute the redirect in code)
                    // This also has less dependency on cookies and doesn't sent any tokens.
                    return this.openWindowAndWaitForAuthResponse(url, state);
                }
            }
            else {
                const logInUrl = await this.getLogInUrl(credentials, isLinking);
                const response = await this.fetcher.fetchJSON({
                    method: "POST",
                    url: logInUrl,
                    body: {
                        ...credentials.payload,
                        options: {
                            device: deviceInformation.toJSON(),
                        },
                    },
                    tokenType: isLinking ? "access" : "none",
                    user: linkingUser,
                });
                // Spread out values from the response and ensure they're valid
                const { user_id: userId, access_token: accessToken, refresh_token: refreshToken = null, device_id: deviceId, } = response;
                if (typeof userId !== "string") {
                    throw new Error("Expected a user id in the response");
                }
                if (typeof accessToken !== "string") {
                    throw new Error("Expected an access token in the response");
                }
                if (typeof refreshToken !== "string" && refreshToken !== null) {
                    throw new Error("Expected refresh token to be a string or null");
                }
                if (typeof deviceId !== "string") {
                    throw new Error("Expected device id to be a string");
                }
                return { userId, accessToken, refreshToken, deviceId };
            }
        }
        /**
         * @param credentials Credentials to use when logging in.
         * @param link Should the request link with the current user?
         * @param extraQueryParams Any extra parameters to include in the query string
         * @returns A promise resolving to the url to be used when logging in.
         */
        async getLogInUrl(credentials, link = false, extraQueryParams = {}) {
            // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780
            const appRoute = this.fetcher.appRoute;
            const loginRoute = appRoute.authProvider(credentials.providerName).login();
            const qs = encodeQueryString({
                link: link ? "true" : undefined,
                ...extraQueryParams,
            });
            const locationUrl = await this.fetcher.locationUrl;
            return locationUrl + loginRoute.path + qs;
        }
        async openWindowAndWaitForAuthResponse(redirectUrl, state) {
            const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);
            // Decode the auth info (id, tokens, etc.) from the result of the redirect
            return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    //
    // Copyright 2020 Realm Inc.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    // http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    //
    ////////////////////////////////////////////////////////////////////////////
    // TODO: Determine if the shape of an error response is specific to each service or widely used.
    /**
     * An error produced while communicating with the MongoDB Realm server.
     */
    class MongoDBRealmError extends Error {
        constructor(method, url, statusCode, statusText, error, errorCode, link) {
            const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;
            if (typeof error === "string") {
                super(`Request failed (${method} ${url}): ${error} (${summary})`);
            }
            else {
                super(`Request failed (${method} ${url}): (${summary})`);
            }
            this.method = method;
            this.url = url;
            this.statusText = statusText;
            this.statusCode = statusCode;
            this.error = error;
            this.errorCode = errorCode;
            this.link = link;
        }
        /**
         * Constructs and returns an error from a request and a response.
         * Note: The caller must throw this error themselves.
         *
         * @param request The request sent to the server.
         * @param response A raw response, as returned from the server.
         * @returns An error from a request and a response.
         */
        static async fromRequestAndResponse(request, response) {
            var _a;
            const { url, method } = request;
            const { status, statusText } = response;
            if ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.startsWith("application/json")) {
                const body = await response.json();
                if (typeof body === "object" && body) {
                    const { error, error_code: errorCode, link } = body;
                    return new MongoDBRealmError(method, url, status, statusText, typeof error === "string" ? error : undefined, typeof errorCode === "string" ? errorCode : undefined, typeof link === "string" ? link : undefined);
                }
            }
            return new MongoDBRealmError(method, url, status, statusText);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * @param body A possible resonse body.
     * @returns An async iterator.
     */
    function asyncIteratorFromResponseBody(body) {
        if (typeof body !== "object" || body === null) {
            throw new Error("Expected a non-null object");
        }
        else if (Symbol.asyncIterator in body) {
            return body;
        }
        else if ("getReader" in body) {
            const stream = body;
            return {
                [Symbol.asyncIterator]() {
                    const reader = stream.getReader();
                    return {
                        next() {
                            return reader.read();
                        },
                        async return() {
                            await reader.cancel();
                            return { done: true, value: null };
                        },
                    };
                },
            };
        }
        else {
            throw new Error("Expected an AsyncIterable or a ReadableStream");
        }
    }
    /**
     * Wraps a NetworkTransport from the "realm-network-transport" package.
     * Extracts error messages and throws `MongoDBRealmError` objects upon failures.
     * Injects access or refresh tokens for a current or specific user.
     * Refreshes access tokens if requests fails due to a 401 error.
     * Optionally parses response as JSON before returning it.
     * Fetches and exposes an app's location url.
     */
    class Fetcher {
        /**
         * @param config A configuration of the fetcher.
         * @param config.appId The application id.
         * @param config.transport The transport used when fetching.
         * @param config.userContext An object used to determine the requesting user.
         * @param config.locationUrlContext An object used to determine the location / base URL.
         */
        constructor({ appId, transport, userContext, locationUrlContext }) {
            this.appId = appId;
            this.transport = transport;
            this.userContext = userContext;
            this.locationUrlContext = locationUrlContext;
        }
        /**
         * @param user An optional user to generate the header for.
         * @param tokenType The type of token (access or refresh).
         * @returns An object containing the user's token as "Authorization" header or undefined if no user is given.
         */
        static buildAuthorizationHeader(user, tokenType) {
            if (!user || tokenType === "none") {
                return {};
            }
            else if (tokenType === "access") {
                return { Authorization: `Bearer ${user.accessToken}` };
            }
            else if (tokenType === "refresh") {
                return { Authorization: `Bearer ${user.refreshToken}` };
            }
            else {
                throw new Error(`Unexpected token type (${tokenType})`);
            }
        }
        /**
         * @param body The body string or object passed from a request.
         * @returns An object optionally specifying the "Content-Type" header.
         */
        static buildBody(body) {
            if (!body) {
                return;
            }
            else if (typeof body === "object" && body !== null) {
                return JSON.stringify(serialize(body));
            }
            else if (typeof body === "string") {
                return body;
            }
            else {
                console.log("body is", body);
                throw new Error("Unexpected type of body");
            }
        }
        /**
         * @param body The body string or object passed from a request.
         * @returns An object optionally specifying the "Content-Type" header.
         */
        static buildJsonHeader(body) {
            if (body && body.length > 0) {
                return { "Content-Type": "application/json" };
            }
            else {
                return {};
            }
        }
        clone(config) {
            return new Fetcher({
                appId: this.appId,
                transport: this.transport,
                userContext: this.userContext,
                locationUrlContext: this.locationUrlContext,
                ...config,
            });
        }
        /**
         * Fetch a network resource as an authenticated user.
         *
         * @param request The request which should be sent to the server.
         * @returns The response from the server.
         */
        async fetch(request) {
            const { path, url, tokenType = "access", user = this.userContext.currentUser, ...restOfRequest } = request;
            if (typeof path === "string" && typeof url === "string") {
                throw new Error("Use of 'url' and 'path' mutually exclusive");
            }
            else if (typeof path === "string") {
                // Derive the URL
                const url = (await this.locationUrlContext.locationUrl) + path;
                return this.fetch({ ...request, path: undefined, url });
            }
            else if (typeof url === "string") {
                const response = await this.transport.fetch({
                    ...restOfRequest,
                    url,
                    headers: {
                        ...Fetcher.buildAuthorizationHeader(user, tokenType),
                        ...request.headers,
                    },
                });
                if (response.ok) {
                    return response;
                }
                else if (user && response.status === 401 && tokenType === "access") {
                    // If the access token has expired, it would help refreshing it
                    await user.refreshAccessToken();
                    // Retry with the specific user, since the currentUser might have changed.
                    return this.fetch({ ...request, user });
                }
                else {
                    if (user && response.status === 401 && tokenType === "refresh") {
                        // A 401 error while using the refresh token indicates the token has an issue.
                        // Reset the tokens to prevent a lock.
                        user.accessToken = null;
                        user.refreshToken = null;
                    }
                    // Throw an error with a message extracted from the body
                    throw await MongoDBRealmError.fromRequestAndResponse(request, response);
                }
            }
            else {
                throw new Error("Expected either 'url' or 'path'");
            }
        }
        /**
         * Fetch a network resource as an authenticated user and parse the result as extended JSON.
         *
         * @param request The request which should be sent to the server.
         * @returns The response from the server, parsed as extended JSON.
         */
        async fetchJSON(request) {
            const { body } = request;
            const serializedBody = Fetcher.buildBody(body);
            const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);
            const response = await this.fetch({
                ...request,
                body: serializedBody,
                headers: {
                    Accept: "application/json",
                    ...contentTypeHeaders,
                    ...request.headers,
                },
            });
            const contentType = response.headers.get("content-type");
            if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith("application/json")) {
                const responseBody = await response.json();
                return deserialize(responseBody);
            }
            else if (contentType === null) {
                return null;
            }
            else {
                throw new Error(`Expected JSON response, got "${contentType}"`);
            }
        }
        /**
         * Fetch an "event-stream" resource as an authenticated user.
         *
         * @param request The request which should be sent to the server.
         * @returns An async iterator over the response body.
         */
        async fetchStream(request) {
            const { body } = await this.fetch({
                ...request,
                headers: {
                    Accept: "text/event-stream",
                    ...request.headers,
                },
            });
            return asyncIteratorFromResponseBody(body);
        }
        /**
         * @returns The path of the app route.
         */
        get appRoute() {
            return routes.api().app(this.appId);
        }
        /**
         * @returns A promise of the location URL of the app.
         */
        get locationUrl() {
            return this.locationUrlContext.locationUrl;
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * The key in a storage on which the device id is stored.
     */
    const DEVICE_ID_STORAGE_KEY$1 = "deviceId";
    var DeviceFields;
    (function (DeviceFields) {
        DeviceFields["DEVICE_ID"] = "deviceId";
        DeviceFields["APP_ID"] = "appId";
        DeviceFields["APP_VERSION"] = "appVersion";
        DeviceFields["PLATFORM"] = "platform";
        DeviceFields["PLATFORM_VERSION"] = "platformVersion";
        DeviceFields["SDK_VERSION"] = "sdkVersion";
    })(DeviceFields || (DeviceFields = {}));
    /**
     * Information describing the device, app and SDK.
     */
    class DeviceInformation {
        /**
         * @param params Construct the device information from these parameters.
         * @param params.appId A user-defined application id.
         * @param params.appVersion A user-defined application version.
         * @param params.deviceId An unique id for the end-users device.
         */
        constructor({ appId, appVersion, deviceId }) {
            /**
             * The version of the Realm Web SDK (constant provided by Rollup).
             */
            this.sdkVersion = "1.7.0";
            const environment = getEnvironment();
            this.platform = environment.platform;
            this.platformVersion = environment.platformVersion;
            this.appId = appId;
            this.appVersion = appVersion;
            this.deviceId = deviceId;
        }
        /**
         * @returns An base64 URI encoded representation of the device information.
         */
        encode() {
            const obj = removeKeysWithUndefinedValues(this);
            return gBase64.encode(JSON.stringify(obj));
        }
        /**
         * @returns The defaults
         */
        toJSON() {
            return removeKeysWithUndefinedValues(this);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    /**
     * Default base url to prefix all requests if no baseUrl is specified in the configuration.
     */
    const DEFAULT_BASE_URL = "https://realm.mongodb.com";
    /**
     * MongoDB Realm App
     */
    class App$1 {
        /**
         * Construct a Realm App, either from the Realm App id visible from the MongoDB Realm UI or a configuration.
         *
         * @param idOrConfiguration The Realm App id or a configuration to use for this app.
         */
        constructor(idOrConfiguration) {
            /**
             * An array of active and logged-out users.
             * Elements in the beginning of the array is considered more recent than the later elements.
             */
            this.users = [];
            /**
             * A promise resolving to the App's location url.
             */
            this._locationUrl = null;
            // If the argument is a string, convert it to a simple configuration object.
            const configuration = typeof idOrConfiguration === "string" ? { id: idOrConfiguration } : idOrConfiguration;
            // Initialize properties from the configuration
            if (typeof configuration === "object" && typeof configuration.id === "string") {
                this.id = configuration.id;
            }
            else {
                throw new Error("Missing a MongoDB Realm app-id");
            }
            this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;
            if (configuration.skipLocationRequest) {
                // Use the base url directly, instead of requesting a location URL from the server
                this._locationUrl = Promise.resolve(this.baseUrl);
            }
            this.localApp = configuration.app;
            const { storage, transport = new DefaultNetworkTransport() } = configuration;
            // Construct a fetcher wrapping the network transport
            this.fetcher = new Fetcher({
                appId: this.id,
                userContext: this,
                locationUrlContext: this,
                transport,
            });
            // Construct the auth providers
            this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);
            // Construct the storage
            const baseStorage = storage || getEnvironment().defaultStorage;
            this.storage = new AppStorage(baseStorage, this.id);
            this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);
            // Hydrate the app state from storage
            try {
                this.hydrate();
            }
            catch (err) {
                // The storage was corrupted
                this.storage.clear();
                // A failed hydration shouldn't throw and break the app experience
                // Since this is "just" persisted state that unfortunately got corrupted or partially lost
                console.warn("Realm app hydration failed:", err instanceof Error ? err.message : err);
            }
        }
        /**
         * Get or create a singleton Realm App from an id.
         * Calling this function multiple times with the same id will return the same instance.
         *
         * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.
         * @returns The Realm App instance.
         */
        static getApp(id) {
            if (id in App$1.appCache) {
                return App$1.appCache[id];
            }
            else {
                const instance = new App$1(id);
                App$1.appCache[id] = instance;
                return instance;
            }
        }
        /**
         * Switch user.
         *
         * @param nextUser The user or id of the user to switch to.
         */
        switchUser(nextUser) {
            const index = this.users.findIndex((u) => u === nextUser);
            if (index === -1) {
                throw new Error("The user was never logged into this app");
            }
            // Remove the user from the stack
            const [user] = this.users.splice(index, 1);
            // Insert the user in the beginning of the stack
            this.users.unshift(user);
        }
        /**
         * Log in a user.
         *
         * @param credentials Credentials to use when logging in.
         * @param fetchProfile Should the users profile be fetched? (default: true)
         * @returns A promise resolving to the newly logged in user.
         */
        async logIn(credentials, fetchProfile = true) {
            const response = await this.authenticator.authenticate(credentials);
            const user = this.createOrUpdateUser(response, credentials.providerType);
            // Let's ensure this will be the current user, in case the user object was reused.
            this.switchUser(user);
            // If needed, fetch and set the profile on the user
            if (fetchProfile) {
                await user.refreshProfile();
            }
            // Persist the user id in the storage,
            // merging to avoid overriding logins from other apps using the same underlying storage
            this.storage.setUserIds(this.users.map((u) => u.id), true);
            // Read out and store the device id from the server
            const deviceId = response.deviceId;
            if (deviceId && deviceId !== "000000000000000000000000") {
                this.storage.set(DEVICE_ID_STORAGE_KEY$1, deviceId);
            }
            // Return the user
            return user;
        }
        /**
         * @inheritdoc
         */
        async removeUser(user) {
            // Remove the user from the list of users
            const index = this.users.findIndex((u) => u === user);
            if (index === -1) {
                throw new Error("The user was never logged into this app");
            }
            this.users.splice(index, 1);
            // Log out the user - this removes access and refresh tokens from storage
            await user.logOut();
            // Remove the users profile from storage
            this.storage.remove(`user(${user.id}):profile`);
            // Remove the user from the storage
            this.storage.removeUserId(user.id);
        }
        /**
         * @inheritdoc
         */
        async deleteUser(user) {
            await this.fetcher.fetchJSON({
                method: "DELETE",
                path: routes.api().auth().delete().path,
            });
            await this.removeUser(user);
        }
        /**
         * The currently active user (or null if no active users exists).
         *
         * @returns the currently active user or null.
         */
        get currentUser() {
            const activeUsers = this.users.filter((user) => user.state === UserState.Active);
            if (activeUsers.length === 0) {
                return null;
            }
            else {
                // Current user is the top of the stack
                return activeUsers[0];
            }
        }
        /**
         * All active and logged-out users:
         *  - First in the list are active users (ordered by most recent call to switchUser or login)
         *  - Followed by logged out users (also ordered by most recent call to switchUser or login).
         *
         * @returns An array of users active or logged out users (current user being the first).
         */
        get allUsers() {
            // Returning a freezed copy of the list of users to prevent outside changes
            return Object.fromEntries(this.users.map((user) => [user.id, user]));
        }
        /**
         * @returns A promise of the app URL, with the app location resolved.
         */
        get locationUrl() {
            if (!this._locationUrl) {
                const path = routes.api().app(this.id).location().path;
                this._locationUrl = this.fetcher
                    .fetchJSON({
                    method: "GET",
                    url: this.baseUrl + path,
                    tokenType: "none",
                })
                    .then((body) => {
                    if (typeof body !== "object") {
                        throw new Error("Expected response body be an object");
                    }
                    else {
                        return body;
                    }
                })
                    .then(({ hostname }) => {
                    if (typeof hostname !== "string") {
                        throw new Error("Expected response to contain a 'hostname'");
                    }
                    else {
                        return hostname;
                    }
                })
                    .catch((err) => {
                    // Reset the location to allow another request to fetch again.
                    this._locationUrl = null;
                    throw err;
                });
            }
            return this._locationUrl;
        }
        /**
         * @returns Information about the current device, sent to the server when authenticating.
         */
        get deviceInformation() {
            const deviceIdStr = this.storage.getDeviceId();
            const deviceId = typeof deviceIdStr === "string" && deviceIdStr !== "000000000000000000000000"
                ? new ObjectId(deviceIdStr)
                : undefined;
            return new DeviceInformation({
                appId: this.localApp ? this.localApp.name : undefined,
                appVersion: this.localApp ? this.localApp.version : undefined,
                deviceId,
            });
        }
        /**
         * Create (and store) a new user or update an existing user's access and refresh tokens.
         * This helps de-duplicating users in the list of users known to the app.
         *
         * @param response A response from the Authenticator.
         * @param providerType The type of the authentication provider used.
         * @returns A new or an existing user.
         */
        createOrUpdateUser(response, providerType) {
            const existingUser = this.users.find((u) => u.id === response.userId);
            if (existingUser) {
                // Update the users access and refresh tokens
                existingUser.accessToken = response.accessToken;
                existingUser.refreshToken = response.refreshToken;
                return existingUser;
            }
            else {
                // Create and store a new user
                if (!response.refreshToken) {
                    throw new Error("No refresh token in response from server");
                }
                const user = new User({
                    app: this,
                    id: response.userId,
                    accessToken: response.accessToken,
                    refreshToken: response.refreshToken,
                    providerType,
                });
                this.users.unshift(user);
                return user;
            }
        }
        /**
         * Restores the state of the app (active and logged-out users) from the storage
         */
        hydrate() {
            const userIds = this.storage.getUserIds();
            this.users = userIds.map((id) => new User({ app: this, id }));
        }
    }
    /**
     * A map of app instances returned from calling getApp.
     */
    App$1.appCache = {};
    /**
     * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.
     */
    App$1.Credentials = Credentials;

    ////////////////////////////////////////////////////////////////////////////
    /**
     * In-memory storage that will not be persisted.
     */
    class LocalStorage {
        /**
         * Constructs a LocalStorage using the global window.
         */
        constructor() {
            if (typeof globalThis.localStorage === "object") {
                this.global = globalThis;
            }
            else {
                throw new Error("Cannot use LocalStorage without a global localStorage object");
            }
        }
        /** @inheritdoc */
        get(key) {
            return this.global.localStorage.getItem(key);
        }
        /** @inheritdoc */
        set(key, value) {
            return this.global.localStorage.setItem(key, value);
        }
        /** @inheritdoc */
        remove(key) {
            return this.global.localStorage.removeItem(key);
        }
        /** @inheritdoc */
        prefix(keyPart) {
            return new PrefixedStorage(this, keyPart);
        }
        /** @inheritdoc */
        clear(prefix) {
            const keys = [];
            // Iterate all keys to find the once have a matching prefix.
            for (let i = 0; i < this.global.localStorage.length; i++) {
                const key = this.global.localStorage.key(i);
                if (key && (!prefix || key.startsWith(prefix))) {
                    keys.push(key);
                }
            }
            // Remove the items in a seperate loop to avoid updating while iterating.
            for (const key of keys) {
                this.global.localStorage.removeItem(key);
            }
        }
        /** @inheritdoc */
        addListener(listener) {
            return this.global.addEventListener("storage", listener);
        }
        /** @inheritdoc */
        removeListener(listener) {
            return this.global.removeEventListener("storage", listener);
        }
    }

    ////////////////////////////////////////////////////////////////////////////
    const browser = detect();
    const DefaultStorage = "localStorage" in globalThis ? LocalStorage : MemoryStorage;
    /**
     * Attempt to use the browser to open a window
     *
     * @param url The url to open a window to.
     * @returns Then newly create window.
     */
    function openWindow(url) {
        if (typeof globalThis.open === "function") {
            return globalThis.open(url);
        }
        else {
            console.log(`Please open ${url}`);
            return null;
        }
    }
    const environment$1 = {
        defaultStorage: new DefaultStorage().prefix("realm-web"),
        openWindow,
        platform: (browser === null || browser === void 0 ? void 0 : browser.name) || "web",
        platformVersion: (browser === null || browser === void 0 ? void 0 : browser.version) || "0.0.0",
        TextDecoder,
    };
    setEnvironment(environment$1);

    const hwsData = {
        "schema": {
            "OBJECTID": {
                "dbFieldName": "OBJECTID",
                "alias": "objectId",
                "fieldDescription": "Identifier used in original database (tbc?): only useful to map back data",
                "category": "identifier",
                "unique": "TRUE",
                "mapped": ""
            },
            "SUBCATCH_I": {
                "dbFieldName": "SUBCATCH_I",
                "alias": "subCatchmentId_dupe",
                "fieldDescription": "Identifier for sub-catchment",
                "category": "key",
                "unique": "FALSE",
                "mapped": ""
            },
            "SUBCATCHME": {
                "dbFieldName": "SUBCATCHME",
                "alias": "subCatchmentName",
                "fieldDescription": "Name of sub-catchment",
                "category": "label",
                "unique": "FALSE",
                "mapped": ""
            },
            "CATCH_ID": {
                "dbFieldName": "CATCH_ID",
                "alias": "catchmentId",
                "fieldDescription": "Identified for catchment",
                "category": "key",
                "unique": "FALSE",
                "mapped": ""
            },
            "CATCHMENT": {
                "dbFieldName": "CATCHMENT",
                "alias": "catchmentName",
                "fieldDescription": "Name of catchment",
                "category": "label",
                "unique": "FALSE",
                "mapped": ""
            },
            "AREA_SQM": {
                "dbFieldName": "AREA_SQM",
                "alias": "areaSqm",
                "fieldDescription": "Aread of subcatchment in square metres",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "DATE_UPDAT": {
                "dbFieldName": "DATE_UPDAT",
                "alias": "lastUpdate",
                "fieldDescription": "Date of last update in database (database number format TBC)",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "REGION_ID": {
                "dbFieldName": "REGION_ID",
                "alias": "regionID",
                "fieldDescription": "Identfied always set to 1",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "REGION": {
                "dbFieldName": "REGION",
                "alias": "regionName",
                "fieldDescription": "Name always set to \"Regional\"",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "RFFI": {
                "dbFieldName": "RFFI",
                "alias": "RFFI",
                "fieldDescription": "Identified that mirrors the PO_ID (so marked as 'uniformative')",
                "category": "zeroEntropy",
                "unique": "TRUE",
                "mapped": ""
            },
            "Catch": {
                "dbFieldName": "Catch",
                "alias": "catchmentName_dupe",
                "fieldDescription": "Identified that mirrors the CATCH_ID field",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "Catch_ID 1": {
                "dbFieldName": "Catch_ID 1",
                "alias": "catchmentID_dupe",
                "fieldDescription": "Identified that mirrors the CATCHMENT field",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "Scatch": {
                "dbFieldName": "Scatch",
                "alias": "subCatchmentID_dupe",
                "fieldDescription": "Identified that mirrors the SUBCATCHME field",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "PO_ID": {
                "dbFieldName": "PO_ID",
                "alias": "poID",
                "fieldDescription": "Performance objective unique ID",
                "category": "key",
                "unique": "TRUE",
                "mapped": ""
            },
            "PO_Scale": {
                "dbFieldName": "PO_Scale",
                "alias": "poScale",
                "fieldDescription": "Category of either \"Estuary, Wetland, Regional or Sub-Catchment\"",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "Location Name": {
                "dbFieldName": "Location Name",
                "alias": "poLocationName",
                "fieldDescription": "Location name",
                "category": "label",
                "unique": "FALSE",
                "mapped": ""
            },
            "SOBS site (Y/N)": {
                "dbFieldName": "SOBS site (Y/N)",
                "alias": "poSobsYN",
                "fieldDescription": "Unknown boolean (not providing key information?)",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "Wet_ID": {
                "dbFieldName": "Wet_ID",
                "alias": "wetlandsID",
                "fieldDescription": "Unused identified for wetlands",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "Est_ID": {
                "dbFieldName": "Est_ID",
                "alias": "estuaryID",
                "fieldDescription": "Unused identified for estuary",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "PO_Group": {
                "dbFieldName": "PO_Group",
                "alias": "poGroup",
                "fieldDescription": "PO group",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "PO_Theme": {
                "dbFieldName": "PO_Theme",
                "alias": "poTheme",
                "fieldDescription": "PO theme",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "PO_Invest": {
                "dbFieldName": "PO_Invest",
                "alias": "poInvestment",
                "fieldDescription": "Categorical description of the investment approach",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "RPO_NO": {
                "dbFieldName": "RPO_NO",
                "alias": "poNumber",
                "fieldDescription": "PO labels'",
                "category": "for Regional (RPO-01 to RPO-45) and regular PO 'sub groups' (PO-01 to PO-11)",
                "unique": "label",
                "mapped": "FALSE"
            },
            "PO_Desc": {
                "dbFieldName": "PO_Desc",
                "alias": "poDescription",
                "fieldDescription": "Description of the perfomance objective",
                "category": "label",
                "unique": "FALSE",
                "mapped": ""
            },
            "POwner": {
                "dbFieldName": "POwner",
                "alias": "mwOwner",
                "fieldDescription": "MW group owner (TBC)",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "PTeam": {
                "dbFieldName": "PTeam",
                "alias": "mwTeam",
                "fieldDescription": "MW team owner (TBC)",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "P_BusGrp": {
                "dbFieldName": "P_BusGrp",
                "alias": "mwBusGroup",
                "fieldDescription": "MW business group (TBC)",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "O_InitTeam": {
                "dbFieldName": "O_InitTeam",
                "alias": "mwInitTeam",
                "fieldDescription": "MW inital team? (TBC)",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "Accountability": {
                "dbFieldName": "Accountability",
                "alias": "mwAccountability",
                "fieldDescription": "Category of accountability (Full/Limited/Shared) for PO (from MW perspective)",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "Co-delivery level": {
                "dbFieldName": "Co-delivery level",
                "alias": "mwCodeliveryLevel",
                "fieldDescription": "Rating (Low/Med/High) of \"co-delivery level\" for PO (from MW perspective)",
                "category": "category",
                "unique": "FALSE",
                "mapped": ""
            },
            "WDIP_S": {
                "dbFieldName": "WDIP_S",
                "alias": "hwsWDIP_S",
                "fieldDescription": "HWS category TBD",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "WDIP_P": {
                "dbFieldName": "WDIP_P",
                "alias": "hwsWDIP_P",
                "fieldDescription": "HWS category TBD",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "HSWWWW": {
                "dbFieldName": "HSWWWW",
                "alias": "hwsWebLink",
                "fieldDescription": "Link to HWS website",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            },
            "CODESIGN": {
                "dbFieldName": "CODESIGN",
                "alias": "hwsWebCoDeliveryLink",
                "fieldDescription": "Link to catchment HWS codelivery strategy (PDF) on website",
                "category": "meta",
                "unique": "FALSE",
                "mapped": ""
            },
            "HWSDoc": {
                "dbFieldName": "HWSDoc",
                "alias": "hwsWebDocLink",
                "fieldDescription": "Link to HWS strategy doc (PDF)",
                "category": "zeroEntropy",
                "unique": "FALSE",
                "mapped": ""
            }
        },

        "table": [
            {
                "objectId": 106,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 168,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 168,
                "poScale": "Estuary",
                "poLocationName": "Mordialloc Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "PO-02",
                "poDescription": "Climate change adaptation plans in place for social and environmental values associated with the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Land and Collaborative Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 109,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 171,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 171,
                "poScale": "Estuary",
                "poLocationName": "Patterson River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "PO-01",
                "poDescription": "Climate change adaptation plans are in place for social and environmental values associated with the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Land and Collaborative Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 389,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 164,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 164,
                "poScale": "Estuary",
                "poLocationName": "Kananook Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "PO-04",
                "poDescription": "Climate change adaptation plans in place for social and environmental values associated with the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Land and Collaborative Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 758,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 157,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 157,
                "poScale": "Estuary",
                "poLocationName": "Elwood Canal Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "PO-01",
                "poDescription": "Climate change adaptation plans in place for social and environmental values associated with the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Land and Collaborative Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 588,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 651,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 651,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Artificial estuary mouth openings are only undertaken when a risk assessment concludes that opening conditions are low risk for the environment.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 12,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 724,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 724,
                "poScale": "Estuary",
                "poLocationName": "Bass River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Maintain and support existing opportunities for access and recreation including fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 36,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 685,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 685,
                "poScale": "Estuary",
                "poLocationName": "Tooradin Road Drain Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Enhance appropriate access and recreation opportunities including walking.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 37,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 686,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 686,
                "poScale": "Estuary",
                "poLocationName": "Tooradin Road Drain Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 62,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 692,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 692,
                "poScale": "Estuary",
                "poLocationName": "Cardinia Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance appropriate access and recreation opportunities / including walking and boating.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 68,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 698,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 698,
                "poScale": "Estuary",
                "poLocationName": "Deep Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance recreation opportunities including fishing and boating.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 107,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 169,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 169,
                "poScale": "Estuary",
                "poLocationName": "Mordialloc Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Maintain and support existing high value opportunities for access and recreation / including walking / cycling / boating and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 108,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 170,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 170,
                "poScale": "Estuary",
                "poLocationName": "Mordialloc Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 111,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 173,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 173,
                "poScale": "Estuary",
                "poLocationName": "Patterson River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Maintain and support existing high value opportunities for access and recreation / including walking / cycling / boating and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 112,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 174,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 174,
                "poScale": "Estuary",
                "poLocationName": "Patterson River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 191,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 717,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 717,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Enhance appropriate opportunities for access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 192,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 718,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 718,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Maintain and support existing opportunities for access and recreation including fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 221,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 704,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 704,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance appropriate opportunities for access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 222,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 705,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 705,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Maintain and support existing opportunities for access and recreation including fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 268,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 492,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 492,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Maintain and support existing high value opportunities for access and recreation / such as boating and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 269,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 493,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 493,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 305,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 260,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 260,
                "poScale": "Estuary",
                "poLocationName": "Moonee Ponds Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Enhance appropriate opportunities for recreation and appropriate access including improving connections with existing path networks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 307,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 262,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 262,
                "poScale": "Estuary",
                "poLocationName": "Moonee Ponds Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Enhance appropriate opportunities for access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 390,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 165,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 165,
                "poScale": "Estuary",
                "poLocationName": "Kananook Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Maintain and support existing high value opportunities for access and recreation / including walking / cycling / boating and fishing activities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 391,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 166,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 166,
                "poScale": "Estuary",
                "poLocationName": "Kananook Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 483,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 506,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 506,
                "poScale": "Estuary",
                "poLocationName": "Kororoit Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Maintain and support existing opportunities for access and recreation including walking and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 485,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 508,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 508,
                "poScale": "Estuary",
                "poLocationName": "Kororoit Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 504,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 502,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 502,
                "poScale": "Estuary",
                "poLocationName": "Laverton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Enhance opportunities for recreation and appropriate access including improving connections with existing path networks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 554,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 663,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 663,
                "poScale": "Estuary",
                "poLocationName": "Warringine Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Enhance appropriate opportunities for access and recreation including walking and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 555,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 664,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 664,
                "poScale": "Estuary",
                "poLocationName": "Warringine Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance appropriate opportunities for access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 560,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 669,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 669,
                "poScale": "Estuary",
                "poLocationName": "Kings Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Maintain existing high value facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 565,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 674,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 674,
                "poScale": "Estuary",
                "poLocationName": "Olivers Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Maintain and support existing opportunities for access and recreation / including walking and jogging.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 566,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 675,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 675,
                "poScale": "Estuary",
                "poLocationName": "Olivers Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance appropriate opportunities for access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 587,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 650,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 650,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (WPB) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Enhance facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 594,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 657,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 657,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 595,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 658,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 658,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Maintain existing high value opportunities for access and recreation including walking / cycling / boating / camping and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 622,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 632,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 632,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Enhance appropriate opportunities for access and recreation including walking / boating and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 623,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 633,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 633,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 634,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 644,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 644,
                "poScale": "Estuary",
                "poLocationName": "Chinamans Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Maintain and support opportunities for access and recreation including walking and camping.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 635,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 645,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 645,
                "poScale": "Estuary",
                "poLocationName": "Chinamans Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 659,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 497,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 497,
                "poScale": "Estuary",
                "poLocationName": "Skeleton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Enhance opportunities for recreation / such as walking and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 661,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 499,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 499,
                "poScale": "Estuary",
                "poLocationName": "Skeleton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Enhance access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 676,
                "subCatchmentId_dupe": 55,
                "subCatchmentName": "Stony Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 25637419.49,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 252,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Stony Creek",
                "poID": 252,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (Port Phillip Bay) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Maintain and support existing access opportunities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 711,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 255,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 255,
                "poScale": "Estuary",
                "poLocationName": "Maribyrnong River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Maintain and support existing high value opportunities for access and recreation / including walking / cycling / boating and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 713,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 257,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 257,
                "poScale": "Estuary",
                "poLocationName": "Maribyrnong River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 760,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 159,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 159,
                "poScale": "Estuary",
                "poLocationName": "Elwood Canal Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Maintain and support existing opportunities for access and recreation / including walking and cycling.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 761,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 160,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 160,
                "poScale": "Estuary",
                "poLocationName": "Elwood Canal Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Enhance appropriate access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 910,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 955,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 955,
                "poScale": "Estuary",
                "poLocationName": "Yarra River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Maintain and support existing high value opportunities for access and recreation including walking / cycling / boating and fishing.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 911,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 956,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 956,
                "poScale": "Estuary",
                "poLocationName": "Yarra River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Maintain existing high value access and facilities that support passive enjoyment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 265,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 489,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 489,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to increase the environmental water reserve is increased by 7 GL by 2028 to meet ecological watering objectives and cover projected shortfalls.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Respource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 266,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 490,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 490,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to maintain and improve the flow regime in the Werribee River downstream of the Werribee diversion weir to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 304,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 259,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 259,
                "poScale": "Estuary",
                "poLocationName": "Moonee Ponds Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain critical flow components in refuge reaches to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 675,
                "subCatchmentId_dupe": 55,
                "subCatchmentName": "Stony Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 25637419.49,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 251,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Stony Creek",
                "poID": 251,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (Port Phillip Bay) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain critical flow components in refuge reaches to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 700,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 254,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 254,
                "poScale": "Estuary",
                "poLocationName": "Maribyrnong River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain critical flow components in refuge reaches to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 863,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 483,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 483,
                "poScale": "Estuary",
                "poLocationName": "Little River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain critical flow components in refuge reaches to protect instream environmental values and platypus.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 864,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 484,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 484,
                "poScale": "Estuary",
                "poLocationName": "Little River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce the threat of flow stress on Little River (e.g. climate change / diversions and water for domestic and stock uses) by developing and implementing agreed environmental watering objectives.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 480,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 503,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 503,
                "poScale": "Estuary",
                "poLocationName": "Kororoit Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Improve longitudinal connectivity and tidal exchange by removing barrier at Racecourse Road.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 660,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 498,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 498,
                "poScale": "Estuary",
                "poLocationName": "Skeleton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Improve longitudinal connectivity and tidal exchange in estuary.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 388,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 163,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 163,
                "poScale": "Estuary",
                "poLocationName": "Kananook Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Ensure that estuary mouth management considers acid sulfate soil risk.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 8,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 720,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 720,
                "poScale": "Estuary",
                "poLocationName": "Bass River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 32,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 681,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 681,
                "poScale": "Estuary",
                "poLocationName": "Tooradin Road Drain Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 59,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 689,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 689,
                "poScale": "Estuary",
                "poLocationName": "Cardinia Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 65,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 695,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 695,
                "poScale": "Estuary",
                "poLocationName": "Deep Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 188,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 714,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 714,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 218,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 701,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 701,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 225,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 708,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 708,
                "poScale": "Estuary",
                "poLocationName": "Yallock Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 267,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 491,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 491,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 484,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 507,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 507,
                "poScale": "Estuary",
                "poLocationName": "Kororoit Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 552,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 661,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 661,
                "poScale": "Estuary",
                "poLocationName": "Warringine Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 556,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 665,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 665,
                "poScale": "Estuary",
                "poLocationName": "Kings Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 561,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 670,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 670,
                "poScale": "Estuary",
                "poLocationName": "Olivers Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 570,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 679,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 679,
                "poScale": "Estuary",
                "poLocationName": "Watson Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 586,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 648,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 648,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (WPB) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 592,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 655,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 655,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 620,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 630,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 630,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Artificial estuary mouth openings are only undertaken when a risk assessment concludes that opening conditions are low risk for the environment.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 628,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 638,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 638,
                "poScale": "Estuary",
                "poLocationName": "Sheepwash Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 632,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 642,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 642,
                "poScale": "Estuary",
                "poLocationName": "Chinamans Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 656,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 494,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 494,
                "poScale": "Estuary",
                "poLocationName": "Skeleton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 865,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 485,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 485,
                "poScale": "Estuary",
                "poLocationName": "Little River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Protect estuary roosting sites from excessive disturbance from humans / vehicles / dogs / foxes and cats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 10,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 722,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 722,
                "poScale": "Estuary",
                "poLocationName": "Bass River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage the estuarine floodplain and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 34,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 683,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 683,
                "poScale": "Estuary",
                "poLocationName": "Tooradin Road Drain Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 58,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 688,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 688,
                "poScale": "Estuary",
                "poLocationName": "Cardinia Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify opportunities to re-engage the estuarine floodplain and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 64,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 694,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 694,
                "poScale": "Estuary",
                "poLocationName": "Deep Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify opportunities to re-engage the estuarine floodplain and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 176,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 713,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 713,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Identify opportunities to re-engage the estuarine floodplain and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 219,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 702,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 702,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage the estuarine floodplain and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 224,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 707,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 707,
                "poScale": "Estuary",
                "poLocationName": "Yallock Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify opportunities to re-engage the estuarine floodplain and wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 387,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 162,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 162,
                "poScale": "Estuary",
                "poLocationName": "Kananook Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve floodplain connectivity to moderate.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 553,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 662,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 662,
                "poScale": "Estuary",
                "poLocationName": "Warringine Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 559,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 668,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 668,
                "poScale": "Estuary",
                "poLocationName": "Kings Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 564,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 673,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 673,
                "poScale": "Estuary",
                "poLocationName": "Olivers Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 571,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 680,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 680,
                "poScale": "Estuary",
                "poLocationName": "Watson Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 572,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 649,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 649,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (WPB) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 593,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 656,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 656,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 629,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 639,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 639,
                "poScale": "Estuary",
                "poLocationName": "Sheepwash Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 633,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 643,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 643,
                "poScale": "Estuary",
                "poLocationName": "Chinamans Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage estuarine floodplains.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 481,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 504,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 504,
                "poScale": "Estuary",
                "poLocationName": "Kororoit Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities in Altona Coastal Park to allow adaption to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 502,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 500,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 500,
                "poScale": "Estuary",
                "poLocationName": "Laverton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities in floodplains to allow adaption to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 590,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 653,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 653,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks .",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 11,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 723,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 723,
                "poScale": "Estuary",
                "poLocationName": "Bass River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 33,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 682,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 682,
                "poScale": "Estuary",
                "poLocationName": "Tooradin Road Drain Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 57,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 687,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 687,
                "poScale": "Estuary",
                "poLocationName": "Cardinia Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 63,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 693,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 693,
                "poScale": "Estuary",
                "poLocationName": "Deep Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 187,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 711,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 711,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 220,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 703,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 703,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 223,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 706,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 706,
                "poScale": "Estuary",
                "poLocationName": "Yallock Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 550,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 659,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 659,
                "poScale": "Estuary",
                "poLocationName": "Warringine Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 558,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 667,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 667,
                "poScale": "Estuary",
                "poLocationName": "Kings Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 562,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 671,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 671,
                "poScale": "Estuary",
                "poLocationName": "Olivers Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 567,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 676,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 676,
                "poScale": "Estuary",
                "poLocationName": "Watson Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 584,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 646,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 646,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (WPB) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 621,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 631,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 631,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 627,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 637,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 637,
                "poScale": "Estuary",
                "poLocationName": "Sheepwash Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 630,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 640,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 640,
                "poScale": "Estuary",
                "poLocationName": "Chinamans Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 862,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 482,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 482,
                "poScale": "Estuary",
                "poLocationName": "Little River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enable lateral and longitudinal migration of estuarine vegetation communities on the floodplain to allow adaptation to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 712,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 256,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 256,
                "poScale": "Estuary",
                "poLocationName": "Maribyrnong River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Enhance estuarine emergent vegetation to provide instream habitat for fish.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 909,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 954,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 954,
                "poScale": "Estuary",
                "poLocationName": "Yarra River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Enhance estuarine emergent vegetation to provide instream habitat for fish.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 227,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 710,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 710,
                "poScale": "Estuary",
                "poLocationName": "Yallock Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Enhance estuarine vegetation communities to 2 Moderate by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 908,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 953,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 953,
                "poScale": "Estuary",
                "poLocationName": "Yarra River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Enhance estuarine vegetation condition and reduce threat of invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 61,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 691,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 691,
                "poScale": "Estuary",
                "poLocationName": "Cardinia Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Enhance estuarine vegetation condition to 2 Moderate by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 67,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 697,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 697,
                "poScale": "Estuary",
                "poLocationName": "Deep Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Enhance estuarine vegetation condition to 2 Moderate by targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 482,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 505,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 505,
                "poScale": "Estuary",
                "poLocationName": "Kororoit Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Enhance remnant estuarine vegetation communities / particularly coastal saltmarsh / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 306,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 261,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 261,
                "poScale": "Estuary",
                "poLocationName": "Moonee Ponds Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to enhance habitat connectivity / access and vegetation links to other green spaces (e.g. Maribyrnong River estuary).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 263,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 487,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 487,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Improve estuarine vegetation condition to high by reducing threats from salt tolerant weed species in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 631,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 641,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 641,
                "poScale": "Estuary",
                "poLocationName": "Chinamans Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve estuarine vegetation condition to 2 Moderate by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 170,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 712,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 712,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve estuarine vegetation condition to 2 Moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 264,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 488,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 488,
                "poScale": "Estuary",
                "poLocationName": "Werribee River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Investigate opportunities to mitigate climate change impacts to significant estuarine vegetation communities by facilitating lateral or longitudinal migration on the floodplain.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 657,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 495,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 495,
                "poScale": "Estuary",
                "poLocationName": "Skeleton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Investigate opportunities to mitigate climate change impacts to significant salt marsh vegetation community by facilitating lateral or longitudinal migration on the floodplain including in Altona Meadows Natural Features Reserve and aligning with planned mitigation measures for Cheetham Wetlands.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 386,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 161,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 161,
                "poScale": "Estuary",
                "poLocationName": "Kananook Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain remnant estuarine vegetation communities at 2 Moderate through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 110,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 172,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 172,
                "poScale": "Estuary",
                "poLocationName": "Patterson River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect remnant estuarine vegetation communities / particularly coastal saltmarsh / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 216,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 699,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 699,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities / particularly coastal saltmarsh / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 674,
                "subCatchmentId_dupe": 55,
                "subCatchmentName": "Stony Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 25637419.49,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 250,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Stony Creek",
                "poID": 250,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (Port Phillip Bay) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities / particularly coastal saltmarsh / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 710,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 253,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 253,
                "poScale": "Estuary",
                "poLocationName": "Maribyrnong River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities / particularly coastal saltmarsh / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 759,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 158,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 158,
                "poScale": "Estuary",
                "poLocationName": "Elwood Canal Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect remnant estuarine vegetation communities / particularly coastal saltmarsh / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 303,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 258,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 258,
                "poScale": "Estuary",
                "poLocationName": "Moonee Ponds Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities / particularly coastal saltmarsh and mangrove / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 105,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 167,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 167,
                "poScale": "Estuary",
                "poLocationName": "Mordialloc Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities / through targeting key invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 618,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 628,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 628,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities and habitat by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 503,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 501,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 501,
                "poScale": "Estuary",
                "poLocationName": "Laverton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive animals and salt tolerant plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 9,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 721,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 721,
                "poScale": "Estuary",
                "poLocationName": "Bass River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 35,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 684,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 684,
                "poScale": "Estuary",
                "poLocationName": "Tooradin Road Drain Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 190,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 716,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 716,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 551,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 660,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 660,
                "poScale": "Estuary",
                "poLocationName": "Warringine Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 557,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 666,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 666,
                "poScale": "Estuary",
                "poLocationName": "Kings Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 563,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 672,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 672,
                "poScale": "Estuary",
                "poLocationName": "Olivers Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 569,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 678,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 678,
                "poScale": "Estuary",
                "poLocationName": "Watson Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 585,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 647,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 647,
                "poScale": "Estuary",
                "poLocationName": "Stony Creek (WPB) Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 591,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 654,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 654,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 625,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 635,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 635,
                "poScale": "Estuary",
                "poLocationName": "Sheepwash Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 866,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 486,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 486,
                "poScale": "Estuary",
                "poLocationName": "Little River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from invasive plant species.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 658,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 496,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 496,
                "poScale": "Estuary",
                "poLocationName": "Skeleton Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect remnant estuarine vegetation communities by reducing threats from salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 626,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 636,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 636,
                "poScale": "Estuary",
                "poLocationName": "Sheepwash Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Protect significant remnant vegetation and improve estuarine vegetation condition to 2 Moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 624,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 634,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 634,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Monitor and reduce the threat of catchment sediment impacts on the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Estuaries Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 7,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 719,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 719,
                "poScale": "Estuary",
                "poLocationName": "Bass River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 60,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 690,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 690,
                "poScale": "Estuary",
                "poLocationName": "Cardinia Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 66,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 696,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 696,
                "poScale": "Estuary",
                "poLocationName": "Deep Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 189,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 715,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 715,
                "poScale": "Estuary",
                "poLocationName": "Lang Lang River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 217,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 700,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 700,
                "poScale": "Estuary",
                "poLocationName": "Bunyip River Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 226,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 709,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 709,
                "poScale": "Estuary",
                "poLocationName": "Yallock Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 568,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 677,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 677,
                "poScale": "Estuary",
                "poLocationName": "Watson Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Implement rural land program in catchment to minimise sediment and nutrient loads to the estuary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 589,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 652,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 652,
                "poScale": "Estuary",
                "poLocationName": "Merricks Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Reporting",
                "poInvestment": "MW direct investment",
                "poNumber": "PO-02",
                "poDescription": "Monitor estuary water quality through the EstuaryWatch program.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Catchment and Water Quality",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 619,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 629,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 629,
                "poScale": "Estuary",
                "poLocationName": "Balcombe Creek Estuary",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Reporting",
                "poInvestment": "MW direct investment",
                "poNumber": "PO-02",
                "poDescription": "Continue to monitor estuary water quality through the EstuaryWatch program and Melbourne Water monitoring sites.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Catchment and Water Quality",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 956,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 45,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 45,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Knowledge Gaps and Research",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "RPO-45",
                "poDescription": "Research partnerships with universities and other research institutions are in place to address the key research areas and build our knowledge and capacity to efficiently and effectively achieve the Healthy Waterways Strategy performance objectives and targets.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Applied Research",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Applied Research",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 921,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 10,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 10,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "RPO-10",
                "poDescription": "An adaptive pathways approach is adopted to understand and manage the risks of climate change on waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 922,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 11,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 11,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "RPO-11",
                "poDescription": "Understanding of groundwater dependent ecosystems is improved and opportunities to maintain or improve these continue to be investigated.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 941,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 30,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 30,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Adaptive management and research",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "RPO-30",
                "poDescription": "Climate change resilient revegetation management practices are understood and implemented by selecting plant species / provenances and vegetation communities that are suited to projected future climatic conditions.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 952,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 41,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 41,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Collaborative governance",
                "poTheme": "Reporting",
                "poInvestment": "MW direct investment",
                "poNumber": "RPO-41",
                "poDescription": "A monitoring / evaluation and reporting plan is in place by 30 June 2019.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 955,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 44,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 44,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Collaborative governance",
                "poTheme": "Reporting",
                "poInvestment": "MW direct investment",
                "poNumber": "RPO-44",
                "poDescription": "Web-based systems are established to report performance and measure outcomes of the catchment implementation forums (by 30 June 2020).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 944,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 33,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 33,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Collaborative governance",
                "poTheme": "Supporting governance framework",
                "poInvestment": "MW invests directly in governance partners co-fund",
                "poNumber": "RPO-33",
                "poDescription": "A Region-wide Leadership Group and Catchment Implementation Forums are established to support work towards the vison and goals of the Healthy Waterways Strategy at the regional and catchment scales.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Catchment and Water Quality / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 945,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 34,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 34,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Collaborative governance",
                "poTheme": "Supporting governance framework",
                "poInvestment": "MW invests directly in governance partners co-fund",
                "poNumber": "RPO-34",
                "poDescription": "Waterway Labs are established as needed to tackle complex or region-wide priorities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Catchment and Water Quality / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 946,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 35,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 35,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Collaborative governance",
                "poTheme": "Supporting governance framework",
                "poInvestment": "MW invests directly in governance partners co-fund",
                "poNumber": "RPO-35",
                "poDescription": "The effectiveness of the Leadership Group / Catchment Implementation Forums and Waterways Lab are evaluated / through ongoing feedback / and one interim and one final assessment undertaken during the life of the Strategy.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Catchment and Water Quality / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 947,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 36,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 36,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Collaborative governance",
                "poTheme": "Supporting governance framework",
                "poInvestment": "MW invests directly in governance partners co-fund",
                "poNumber": "RPO-36",
                "poDescription": "The Catchment Implementation Forums improve the coordination of information and activities by catchment stakeholders and communities (while ensuring waterway management includes the whole of catchment perspective).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Catchment and Water Quality / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 930,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 19,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 19,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-19",
                "poDescription": "Options to transform modified waterways by creating more natural / community-loved spaces are identified and implemented.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services",
                "mwInitTeam": "Catchment Asset Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 931,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 20,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 20,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-20",
                "poDescription": "The amenity / community connection and recreation values of wetlands are better understood. Performance objectives are developed to enhance these values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Land and Collaborative Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 932,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 21,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 21,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-21",
                "poDescription": "The multiple benefits of waterways investment are tracked and understood.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Land and Collaborative Planning / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 933,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 22,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 22,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-22",
                "poDescription": "Cooler / greener and more liveable urban environments are created through revegetation and as part of managing excess stormwater.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Innovation and Resilience",
                "mwBusGroup": "Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Innovation and Resilience / Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 954,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 43,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 43,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-43",
                "poDescription": "The social values framework / information and methods used to develop values assessments / targets and performance objectives are further developed and improved during the life of the Strategy.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 937,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 26,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 26,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Litter",
                "poInvestment": "Capital investment maintenance and operations",
                "poNumber": "RPO-26",
                "poDescription": "Methods are in place to assess volume and source of litter to inform and promote litter reduction programs.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Marketing and Media / Community Engagement / Catchment and Water Quality / Land and Collaborative Planning / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 938,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 27,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 27,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Litter",
                "poInvestment": "Capital investment maintenance and operations",
                "poNumber": "RPO-27",
                "poDescription": "Incidence of littering and illegal dumping is reduced through raised community awareness and knowledge / infrastructure and enforcement.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Marketing and Media / Community Engagement / Catchment and Water Quality / Land and Collaborative Planning / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 912,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 1,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 1,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-01",
                "poDescription": "Traditional Owners and Aboriginal Victorians have an increased expertise in contemporary land and waterway management / waterway science and lore.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 913,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 2,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 2,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-02",
                "poDescription": "Partnership projects build on what is working. Expertise developed in one project is applied in others.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 914,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 3,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 3,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-03",
                "poDescription": "Traditional Owner groups and Aboriginal Victorians are supported by industry partners to influence the agenda for waterway management by proactively developing communications / resolutions or project scopes and seeking industry partners.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 915,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 4,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 4,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-04",
                "poDescription": "Aboriginal and Traditional Owner cultural awareness training is available to all industry professionals and is actively pursued.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 916,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 5,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 5,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-05",
                "poDescription": "Cultural competency is valued as a career skill and leads to ongoing relationships.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 917,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 6,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 6,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-06",
                "poDescription": "Partnerships are fostered between Traditional Owner groups and research groups / and Traditional Owner groups and community groups.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 918,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 7,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 7,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Cultural",
                "poTheme": "Cultural Values",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "RPO-07",
                "poDescription": "Public events led and/or organised by Traditional Owners are regular and frequent.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 919,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 8,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 8,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Economic",
                "poTheme": "Economic Values",
                "poInvestment": "MW direct investment",
                "poNumber": "RPO-08",
                "poDescription": "Environmental-economic accounts are developed for the regionâ€™s waterways using contemporary international standards / and are used to demonstrate the returns on catchment and waterway investment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 920,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 9,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 9,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Economic",
                "poTheme": "Economic Values",
                "poInvestment": "MW direct investment",
                "poNumber": "RPO-09",
                "poDescription": "Environmental-economic accounting is incorporated into Healthy Waterways Strategy monitoring / evaluation and reporting (MER) by 2023.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "TBD",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 948,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 37,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 37,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Engaged and Knowledgeable Community and Stakeholders",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "RPO-37",
                "poDescription": "Participation rates in education / capacity building / incentive programs and citizen science activities have increased and enable greater levels of environmental stewardship for our waterways.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy",
                "mwInitTeam": "Community Engagement",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 949,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 38,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 38,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Engaged and Knowledgeable Community and Stakeholders",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "RPO-38",
                "poDescription": "Key messages / stories and resources for waterways and waterway health are collaboratively developed and broadly distributed / increasing community knowledge and engagement around waterways.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy",
                "mwInitTeam": "Community Engagement",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 950,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 39,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 39,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Engaged and Knowledgeable Community and Stakeholders",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "RPO-39",
                "poDescription": "Systems and pathways to share knowledge and information between communities and stakeholders have been developed and expanded to empower communities to participate and influence waterway management (for example / digital portals / social media / Communities of Practice / signage programs).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy",
                "mwInitTeam": "Community Engagement",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 951,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 40,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 40,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Engaged and Knowledgeable Community and Stakeholders",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "RPO-40",
                "poDescription": "The profile of waterways is lifted / local connections to waterways are increased / and leaders in waterway management are celebrated and fostered.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy",
                "mwInitTeam": "Community Engagement",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 923,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 12,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 12,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Responding to Climate Change",
                "poInvestment": "MW invests directly in research partnership/ universities co-fund through grants",
                "poNumber": "RPO-12",
                "poDescription": "Water for the Environment continues to be managed and delivered to the regionâ€™s rivers and wetlands and recovery options continue to be investigated.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 943,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 32,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 32,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "RPO-32",
                "poDescription": "Programs are in place to protect and enhance sites of biodiversity significance associated with the regionâ€™s waterways / such as through Melbourne Waterâ€™s Sites of Biodiversity Significance Strategy.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 953,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 42,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 42,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "RPO-42",
                "poDescription": "Wetland condition information and prioritisation with a focus on vulnerable wetlands is understood and informs collaborative planning.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 942,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 31,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 31,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "RPO-31",
                "poDescription": "A risk-based approach is adopted to prevent / eradicate and contain pest plants and animals (including deer) and protect waterway assets.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 928,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 17,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 17,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "RPO-17",
                "poDescription": "Water quality in waterways and bays is improved by reducing inputs of sediment and other pollutants from urban construction and development.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 924,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 13,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 13,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "RPO-13",
                "poDescription": "Industry capacity for whole of water cycle and stormwater management is increased to enable collaboration / improved access to information and knowledge / and a skilful and capable industry with strong established networks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Customer and Strategy / Integrated Planning / Asset Management Services / Waterways and Land",
                "mwInitTeam": "Customer and Strategy: Community Engagement  Integrated Planning: Applied Research / Catchment and Water Quality / Water Services Planning / Innovation and Resilience / Land and Collaborative Planning / Water Resource Management  Asset Management Services: Catchment Asset Management  Waterways and Land: Development Services / Regional Services / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 925,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 14,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 14,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "RPO-14",
                "poDescription": "Standards / tools and guidelines are in place and implemented to enable re-use and infiltration of excess stormwater / and protect and/or restore urban waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 926,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 15,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 15,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "RPO-15",
                "poDescription": "Victoriaâ€™s planning system is used effectively to protect and enhance waterway values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 927,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 16,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 16,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "RPO-16",
                "poDescription": "Protection mechanisms are in place for headwaters to ensure that they are retained as features in the landscape for environmental / social / cultural and economic benefits.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 929,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 18,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 18,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "RPO-18",
                "poDescription": "Critical waterway health assets including stormwater treatment systems / fishways and erosion control structures / are maintained for their designed purpose or the same outcomes are delivered by alternative means.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Multiple programs contribute",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 939,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 28,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 28,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Vegetation Management",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "RPO-28",
                "poDescription": "Seasonal Herbaceous Wetland vegetation communities are identified and a management program is in place to protect them on public and private land.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 940,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 29,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 29,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Vegetation Management",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "RPO-29",
                "poDescription": "Programs / standards / tools and guidelines are in place to protect wetland vegetation communities from urban and rural threats / including adequate planning controls.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Services Planning / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 936,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 25,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 25,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "RPO-25",
                "poDescription": "Programs / standards / tools and guidelines are in place to manage nutrients / sediments and other pollutants from rural land in priority areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 934,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 23,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 23,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Understanding and risk based programs",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "RPO-23",
                "poDescription": "The potential impacts of emerging contaminants of concern such as microplastics / pesticides and pharmaceuticals / and toxic chemicals are better understood and mechanisms to respond collaboratively developed.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Applied Research",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Applied Research",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 935,
                "subCatchmentId_dupe": 100,
                "subCatchmentName": "Regional - All Catchments",
                "catchmentId": 6,
                "catchmentName": "Regional",
                "areaSqm": 12785.08,
                "lastUpdate": 25569,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 24,
                "catchmentName_dupe": "Regional",
                "catchmentID_dupe": 6,
                "subCatchmentID_dupe": "Regional",
                "poID": 24,
                "poScale": "Regional",
                "poLocationName": "Regional - All areas",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Understanding and risk based programs",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "RPO-24",
                "poDescription": "Risk-based programs are in place to mitigate sources of urban pollution (licenced and unlicensed discharges) to protect bays and waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 15,
                "subCatchmentId_dupe": 3,
                "subCatchmentName": "Blind Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 33100493.74,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 51,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Blind Creek",
                "poID": 51,
                "poScale": "Sub-Catchment",
                "poLocationName": "Blind Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways from 58% to 68% (about 2 km) by filling gaps in existing path networks and improving connections to Dandenong Creek Trail.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 18,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 541,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 541,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dalmore Outfalls Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-02",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 42,
                "subCatchmentId_dupe": 5,
                "subCatchmentName": "Brushy Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 36782569.19,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 729,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Brushy Creek",
                "poID": 729,
                "poScale": "Sub-Catchment",
                "poLocationName": "Brushy Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways (about 1 km of path) by filling gaps and improving connections with existing path network.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 51,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 536,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 536,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Increase access to and along waterways (about 20 km of path) by improving connections with existing path network and extending paths into new urban areas. Includes improvements to linear trails along Cardinia and Toomuc Creeks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 70,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 264,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 264,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cherry Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-02",
                "poDescription": "Increase access to and along waterways from 5% to 31% (about 3 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 87,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 61,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 61,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-09",
                "poDescription": "Increase access to and along waterways from 40% to 44% (about 2 km) by filling gaps in existing path networks and improving connections to Dandenong Creek Trail and Monbulk Creek.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 92,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 66,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 66,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Increase access to and along waterways from 57% to 65% (about 3 km) by filling gaps and improving connections to existing path networks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 116,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 87,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 87,
                "poScale": "Sub-Catchment",
                "poLocationName": "Eumemmerring Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Increase access to and along waterways from 23% to 30% (about 10 km) by improving access in conjunction with urban development and along upper parts of Eumemmerring Creek.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 137,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 74,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 74,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Increase access to and along waterways from 51% to 58% (about 5 km) by extending and filling gaps in path network and improving crossings of major roads / and along Bungalook Creek and tributaries.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 160,
                "subCatchmentId_dupe": 12,
                "subCatchmentName": "Gardiners Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 112909335.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 753,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Gardiners Creek",
                "poID": 753,
                "poScale": "Sub-Catchment",
                "poLocationName": "Gardiners Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways from 73% to 75% (about 1 km of path) by filling gaps and improving connections with existing path network.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 168,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 82,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 82,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Increase access to and along waterways from 23% to 32% (about 1 km) by improving access to Dobsons Creek.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 231,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 778,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 778,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Increase access to and along waterways from 47% to 61% (about 10 km of path) by improving connections with existing path network and extending paths into new areas (contributes to Merri Creek shared trail).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 246,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 327,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 327,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access (about 5 km of path) to and along waterways by improving connections with existing path network and extending Werribee River trail (part of longer term project to have continuous trail from Melton Reservoir to the Bay). Investigate opportunities to improve access for on-water activities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 275,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 186,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 186,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Improve access to and along waterways through extending Maribyrnong River Trail to Bulla and by additional paths and access points in townships and larger parks (about 5km of path).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 291,
                "subCatchmentId_dupe": 25,
                "subCatchmentName": "Diamond Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 213698172.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 743,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Rural)",
                "poID": 743,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 295,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 230,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 230,
                "poScale": "Sub-Catchment",
                "poLocationName": "Moonee Ponds Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways from 48% to 25% (about 3 km of path) by filling gaps in existing path networks and improving connections / including to nearby open space / with a focus on urban and urban growth areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 322,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 206,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 206,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Improve access to and along waterways through regional projects and by additional paths and access points in new urban areas / townships and larger parks (about 8 km of path).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 339,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 217,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 217,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-09",
                "poDescription": "Improve access to and along waterways through regional projects such as the Maribyrnong River Trail to Sunbury and by additional paths and access points in new urban areas / townships and larger parks (about 25 km of path).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 344,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 592,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 592,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Increase access to and along waterways (about 1 km of path) by improving connections with existing path networks around townships and existing parks and reserves.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 358,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 525,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 525,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to waterways (about 1 km of path) by improving connections with existing path networks around townships and existing parks and reserves.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 365,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 93,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 93,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kananook Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways from 30% to 34% (about 2 km) by filling gaps in existing path networks / improving connections to foreshore trails and maintain access for on-water activities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 399,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 771,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 771,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new areas (contributes to Merri Creek shared trail).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 458,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 269,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 269,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways from 33% to 39% (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 494,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 279,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 279,
                "poScale": "Sub-Catchment",
                "poLocationName": "Laverton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-02",
                "poDescription": "Increase access to and along waterways from 25% to 44% (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 528,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 785,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 785,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mullum Mullum Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways (about 1 km of path) by improving connections with existing path network and in conjunction with urban development.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 539,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 794,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 794,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Increase access to and along waterways (about 1 km of path) by improving connections with existing path network and in conjunction with urban development.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 546,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 567,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 567,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-04",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 577,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 575,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 575,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 606,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 583,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 583,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 643,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 312,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 312,
                "poScale": "Sub-Catchment",
                "poLocationName": "Skeleton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways from 27% to 35% (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 672,
                "subCatchmentId_dupe": 55,
                "subCatchmentName": "Stony Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 25637419.49,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 236,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Stony Creek",
                "poID": 236,
                "poScale": "Sub-Catchment",
                "poLocationName": "Stony Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Increase access to and along waterways from 33% to 51% (about 2 km) by filling gaps and improving connections to existing path network - align with priorities in the Stony Creek Directions Plan.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 687,
                "subCatchmentId_dupe": 57,
                "subCatchmentName": "Taylors Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 26597368.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 240,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Taylors Creek",
                "poID": 240,
                "poScale": "Sub-Catchment",
                "poLocationName": "Taylors Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways from 43% to 57% (about 2 km of path) by filling gaps and improving connections with existing path network / and extending network into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 691,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 336,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 336,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access to and along waterways (about 2 km of path) by improving connections with existing path network and extending paths into new urban areas. Investigate opportunities to improve access for on-water activities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 705,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 224,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 224,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways from 50% to 69% (about 10 km) by filling gaps in existing path networks / improving connections and extending the Maribyrnong River Trail. For on-water activities increase boat launching/recovery facilities for canoe/kayaking (non-motor) in the middle reaches.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 714,
                "subCatchmentId_dupe": 64,
                "subCatchmentName": "Steele Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 28913183.06,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 233,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Steele Creek",
                "poID": 233,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steele Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Increase access to and along waterways from 44% to 59% (about 2 km of path) by filling gaps and improving connections with existing path network and building new crossings (formal and informal).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 727,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 737,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 737,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Increase access to and along waterways from 50% to 57% (about 5 km of path) by filling gaps and improving connections with existing path network.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 737,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 806,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 806,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-07",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 746,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 815,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 815,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Increase access to and along waterways (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 756,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 47,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 47,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bayside Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-02",
                "poDescription": "Increase access to and along waterways from 65% to 80% (about 1 km) by filling gaps and improving connections to existing path networks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 766,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 320,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 320,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-05",
                "poDescription": "Increase access to and along waterways from 14% to 20% (about 5 km of path) by improving connections with existing path network and extending paths into new urban areas.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 774,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 303,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 303,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lollypop Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-03",
                "poDescription": "Increase access (about 2 km of path) to and along waterways by improving connections with existing path network and extending paths into new urban areas of Wyndham Vale and west part of Werribee.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 827,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 288,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 288,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Increase access (about 2 km of path) by improving and extending path network to and along river around Little River (Worrin-yaloke) township and to coastal wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 874,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 872,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 872,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-08",
                "poDescription": "Increase access to and along waterways by improving connections with existing path network. And increase access to waterways for on-water activities by developing facilities identified in collaborative strategic plans (e.g. canoe launch at Homestead Road Reserve and Westerfolds Park).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 884,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 863,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 863,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Increase access to and along waterways wetlands and estuaries by filling gaps and improving connections to existing path networks.",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-06",
                "poDescription": "Increase access to and along waterways from 47% to 52% (about 4 km of path) by filling gaps and improving connections with existing path network.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 5,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 513,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 513,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bass River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase citizen science through promotion of high value species (e.g. growling grass frog).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 16,
                "subCatchmentId_dupe": 3,
                "subCatchmentName": "Blind Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 33100493.74,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 52,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Blind Creek",
                "poID": 52,
                "poScale": "Sub-Catchment",
                "poLocationName": "Blind Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from very low to moderate; support community groups / waterway education programs and connect with growth area communities. Increase citizen science through promotion of high value species in the region (e.g. dwarf galaxias).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 20,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 543,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 543,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dalmore Outfalls Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from very low to moderate; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 43,
                "subCatchmentId_dupe": 5,
                "subCatchmentName": "Brushy Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 36782569.19,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 730,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Brushy Creek",
                "poID": 730,
                "poScale": "Sub-Catchment",
                "poLocationName": "Brushy Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from very low to moderate; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 52,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 537,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 537,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-09",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 72,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 266,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 266,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cherry Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and capacity building programs for business/industry. Engage with schools to increase citizen science participation.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 88,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 62,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 62,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-10",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Engage with schools and environment groups (e.g. Community Weed Alliance of the Dandenongs) to increase participation in citizen science.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 93,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 67,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 67,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from low to high; support community groups and connect with growth area communities. Increase participation through cultural engagement and citizen science as population grows.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 117,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 88,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 88,
                "poScale": "Sub-Catchment",
                "poLocationName": "Eumemmerring Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from very low to moderate; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Engage the community through promotion of WSUD projects (e.g. Lynbrook Estate).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 138,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 75,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 75,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-08",
                "poDescription": "Increase participation rates from low to high; support community groups and connect with growth area communities. Increase participation in citizen science and capacity building programs as population grows.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 161,
                "subCatchmentId_dupe": 12,
                "subCatchmentName": "Gardiners Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 112909335.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 754,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Gardiners Creek",
                "poID": 754,
                "poScale": "Sub-Catchment",
                "poLocationName": "Gardiners Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity through citizen science and cultural engagement.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 169,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 83,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 83,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-08",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science through promotion of high value areas (e.g. Dandenong Ranges National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 178,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 560,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 560,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-07",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase support for community/environment groups as rural population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 193,
                "subCatchmentId_dupe": 16,
                "subCatchmentName": "Lerderderg River",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 297750275.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 282,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lerderderg River",
                "poID": 282,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lerderderg River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-01",
                "poDescription": "Increase participation rates from high to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase participation through promotion of high value areas (e.g. Lerderderg State Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 204,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 762,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 762,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science through promotion of high value areas (e.g. Yarra State Forest).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 208,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 517,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 517,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science though promotion of high value species in the region (e.g. southern brown bandicoot).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 232,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 779,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 779,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity through citizen science and cultural engagement. Increase support for community/environment groups that undertake waterway improvement projects (e.g. Merri Creek Management Committee).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 240,
                "subCatchmentId_dupe": 27,
                "subCatchmentName": "Diamond Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 96682687.72,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 748,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Source)",
                "poID": 748,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from high to very high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science through promotion of high value areas (e.g. Kinglake National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 247,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 328,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 328,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners in upper catchment through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 276,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 187,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 187,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from high to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 280,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 192,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 192,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from high to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 292,
                "subCatchmentId_dupe": 25,
                "subCatchmentName": "Diamond Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 213698172.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 744,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Rural)",
                "poID": 744,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups and promotion of high value areas (e.g. Kinglake National Park) as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 296,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 231,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 231,
                "poScale": "Sub-Catchment",
                "poLocationName": "Moonee Ponds Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from very low to high; support community groups and citizen science and build capacity of land owners in upper catchment through rural programs. Increase participation through Moonee Ponds Creek Collaboration and increase awareness of the waterway through interpretative signage and art.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 313,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 309,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 309,
                "poScale": "Sub-Catchment",
                "poLocationName": "Parwan Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Support participation in Landcare and other rural programs that improve waterway habitats and build capacity of land owners. Increase participation through promotion of high value areas (e.g. Brisbane Ranges National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 323,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 207,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 207,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-09",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 328,
                "subCatchmentId_dupe": 30,
                "subCatchmentName": "French and Phillip Islands",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 270164625.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 548,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "French and Phillip Islands",
                "poID": 548,
                "poScale": "Sub-Catchment",
                "poLocationName": "French and Phillip Islands Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation through promotion of high value areas (e.g. French Island National Park / Phillip Island Nature Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 340,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 218,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 218,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-10",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and citizen science / connect with growth area communities and build capacity of land owners through rural programs.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 351,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 593,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 593,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-08",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity of land owners through rural programs. Increase participation through promotion of high value areas (e.g. Tarago State Forest).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 359,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 526,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 526,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from high to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs in lower catchment. Increase participation in citizen science through promotion of high value areas (e.g. Bunyip State Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 366,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 94,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 94,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kananook Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from low to high; support community groups and capacity building programs for business/industry. Engage with schools to increase citizen science participation.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 400,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 772,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 772,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-09",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups that undertake waterway improvement projects (e.g. Merri Creek Management Committee).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 411,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 348,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 348,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / Landcare projects and citizen science. Build capacity of land owners through rural programs.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 425,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 883,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 883,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-10",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation though citizen science programs and promotion of high value areas (e.g. Yarra Ranges National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 444,
                "subCatchmentId_dupe": 58,
                "subCatchmentName": "Watsons Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 83533628.88,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 835,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watsons Creek",
                "poID": 835,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watsons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science through promotion of high value areas (e.g. Kinglake National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 454,
                "subCatchmentId_dupe": 39,
                "subCatchmentName": "Koonung Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 32719460.38,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 756,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Koonung Creek",
                "poID": 756,
                "poScale": "Sub-Catchment",
                "poLocationName": "Koonung Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-02",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity through citizen science and cultural engagement.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 459,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 270,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 270,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of business/industry through waterway health education. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 488,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 276,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 276,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 495,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 280,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 280,
                "poScale": "Sub-Catchment",
                "poLocationName": "Laverton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners in upper catchment through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 510,
                "subCatchmentId_dupe": 59,
                "subCatchmentName": "Watts River (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 92601688.16,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 841,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Rural)",
                "poID": 841,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. increase participation in citizen science through promotion of high value areas (e.g. Yarra Ranges National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 520,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 857,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 857,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-10",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science through promotion of high value areas (e.g. Yellingbo Nature Conservation Reserve).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 529,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 786,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 786,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mullum Mullum Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity through citizen science and cultural engagement. Increase participation through support of inter-agency waterway improvement projects.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 540,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 795,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 795,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-09",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of farmers and land owners through rural programs. Increase participation in citizen science though promotion of high value areas (e.g. Dandenong Ranges National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 547,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 568,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 568,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase participation support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 578,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 576,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 576,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Support participation in Landcare and other rural programs that improve waterway habitats and build capacity of land owners. Increase support for community/environment groups and promote citizen science as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 607,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 584,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 584,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups and promotion of high value areas (e.g. Tootgarook Swamp) as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 644,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 313,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 313,
                "poScale": "Sub-Catchment",
                "poLocationName": "Skeleton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners in upper catchment through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 666,
                "subCatchmentId_dupe": 53,
                "subCatchmentName": "Steels and Pauls Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80952970.31,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 821,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Rural)",
                "poID": 821,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Increase participation rates from high to very high; support community groups / build capacity of land owners through rural programs and promote citizen science (e.g. BioBlitz program).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 670,
                "subCatchmentId_dupe": 54,
                "subCatchmentName": "Steels and Pauls Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 47879494.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 825,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Source)",
                "poID": 825,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from high to very high; support community groups and build capacity of land owners through rural programs. Increase participation in citizen science through promotion of high value areas (e.g. Kinglake National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 673,
                "subCatchmentId_dupe": 55,
                "subCatchmentName": "Stony Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 25637419.49,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 237,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Stony Creek",
                "poID": 237,
                "poScale": "Sub-Catchment",
                "poLocationName": "Stony Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-02",
                "poDescription": "Increase participation rates from very low to high; support community groups and citizen science and build capacity of business/industry through waterway health education.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 680,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 830,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 830,
                "poScale": "Sub-Catchment",
                "poLocationName": "Stringybark Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of farmers and land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 688,
                "subCatchmentId_dupe": 57,
                "subCatchmentName": "Taylors Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 26597368.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 241,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Taylors Creek",
                "poID": 241,
                "poScale": "Sub-Catchment",
                "poLocationName": "Taylors Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from very low to high; support community groups and citizen science and connect with growth area communities. Increase participation through promotion of high value species in the region (e.g. growling grass frog).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 692,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 337,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 337,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from low to high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase participation though promotion of high value areas (e.g. Werribee Gorge State Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 707,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 226,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 226,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-07",
                "poDescription": "Increase participation rates from low to high; support community groups and citizen science and build capacity of land owners in upper catchment through rural programs. Increase participation through promotion of high value species in the region (e.g. platypus and growling grass frog).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 716,
                "subCatchmentId_dupe": 64,
                "subCatchmentName": "Steele Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 28913183.06,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 235,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Steele Creek",
                "poID": 235,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steele Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity of land owners in upper catchment through rural programs. Increase business/industry participation in waterway health education and capacity building programs.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 719,
                "subCatchmentId_dupe": 65,
                "subCatchmentName": "King Parrot and Musk Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 125601677.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 553,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "King Parrot and Musk Creeks",
                "poID": 553,
                "poScale": "Sub-Catchment",
                "poLocationName": "King Parrot and Musk Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity of land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 728,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 738,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 738,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-08",
                "poDescription": "Increase participation rates from very low to high; support community groups / citizen science programs and rural programs in upper catchment. Increase participation through Darebin Creek Management Committee.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 738,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 807,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 807,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-08",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity through citizen science and cultural engagement. Increase participation through promotion of high value areas (e.g. Plenty Gorge Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 747,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 816,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 816,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-09",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs (e.g. Stream Frontage management Program). Increase support for community/environment groups and promotion of high value areas (e.g. Plenty Gorge Park) as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 752,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 179,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 179,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-05",
                "poDescription": "Support participation in Landcare and other rural programs that improve waterways and promote citizen science. Increase participation through support of community/environment groups as rural population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 757,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 48,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 48,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bayside Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Increase participation rates from very low to moderate; support community groups and promote participation in citizen science and Elsternwick Creek Working Group projects.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 767,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 321,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 321,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-06",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners in upper catchment through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 775,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 304,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 304,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lollypop Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-04",
                "poDescription": "Increase participation rates from moderate to very high; support community groups / connect with growth area communities and build capacity of land owners through rural programs. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 808,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 297,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 297,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Support participation in Landcare and other rural programs that improve waterway habitats and build capacity of land owners. Increase participation through promotion of high value areas (e.g. Brisbane Ranges National Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 829,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 290,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 290,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-03",
                "poDescription": "Support participation in Landcare and other rural programs that improve waterway habitats and build capacity of land owners. Increase support for community/environment groups as population increases.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 875,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 873,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 873,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-09",
                "poDescription": "Increase participation rates from moderate to very high; support community groups and build capacity of land owners through rural programs. Increase participation though citizen science and promotion of high value areas (e.g. Warrandyte State Park).",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 885,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 864,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 864,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Engaged communities",
                "poTheme": "Increase participation rates around rivers wetlands and estuaries",
                "poInvestment": "Incentives/ education/ promotion",
                "poNumber": "PO-07",
                "poDescription": "Increase participation rates from low to high; support community groups and build capacity through citizen science and cultural engagement.",
                "mwOwner": "Customer and Strategy",
                "mwTeam": "Community Engagement",
                "mwBusGroup": "Customer and Strategy / Waterways and Land",
                "mwInitTeam": "Community Engagement / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 206,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 515,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 515,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate options to increase the environmental water reserve by 1 GL by 2028 to meet ecological watering objectives and cover projected shortfalls. Environmental water recovery targets are captured at lowest downstream sub-catchment / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 251,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 332,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 332,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Investigate options to increase the environmental water reserve by 7 GL by 2028 to meet ecological watering objectives and cover projected shortfalls. Environmental water recovery targets are captured at lowest downstream sub-catchment / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 334,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 212,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 212,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate options to increase environmental water reserve by 5 GL/year by 2028 to meet ecological watering objectives and cover projected shortfalls. This will benefit Jacksons Creek and the lower Maribyrnong River. Any water recovery will be considered through the sustainable water strategies / markets and use of alternative water.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 346,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 587,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 587,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Bunyip lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 413,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 350,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 350,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Werribee River Lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 417,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 875,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 875,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Yarra River Lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 445,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 884,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 884,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Yarra River Lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 596,
                "subCatchmentId_dupe": 60,
                "subCatchmentName": "Watts River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 176422683.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 842,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Source)",
                "poID": 842,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Yarra River Lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 696,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 341,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 341,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Werribee River Lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 704,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 223,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 223,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate options to increase environmental water reserve for the catchment is increased by 5 GL/year by 2028 to meet ecological watering objectives and cover projected shortfalls. This will benefit Jacksons Creek and the lower Maribyrnong River. Any water recovery will be considered through the sustainable water strategy / markets and the use of alternative water.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 867,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 865,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 865,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Environmental water recovery targets are captured at lowest downstream sub-catchment (Yarra River Lower) / which reflects targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 879,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 858,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 858,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Increase environmental water reserve in regulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to increase environmental water reserve by 10 GL by 2028 to meet ecological watering objectives and cover projected shortfalls. Environmental water recovery targets captured at lowest downstream sub-catchment reflect targets for whole catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Resource Management",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 1,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 509,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 509,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bass River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 40,
                "subCatchmentId_dupe": 5,
                "subCatchmentName": "Brushy Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 36782569.19,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 727,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Brushy Creek",
                "poID": 727,
                "poScale": "Sub-Catchment",
                "poLocationName": "Brushy Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 44,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 529,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 529,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support key values including vulnerable platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 53,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 538,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 538,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-10",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 79,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 53,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 53,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime along Monbulk Creek and other refuge reaches to support platypus populations. And identify opportunities to reduce key threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions and urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 113,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 84,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 84,
                "poScale": "Sub-Catchment",
                "poLocationName": "Eumemmerring Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of flow stress on waterways by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 131,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 68,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 68,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 132,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 69,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 69,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to reduce the key threat of flow stress on waterways by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 158,
                "subCatchmentId_dupe": 12,
                "subCatchmentName": "Gardiners Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 112909335.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 751,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Gardiners Creek",
                "poID": 751,
                "poScale": "Sub-Catchment",
                "poLocationName": "Gardiners Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of flow stress on waterways by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 162,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 76,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 76,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain critical flow components in refuge reaches in streams in the Dandenong Ranges National Park to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 171,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 554,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 554,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus (pudgyer or murrin moorroo) populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 180,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 562,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 562,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 195,
                "subCatchmentId_dupe": 16,
                "subCatchmentName": "Lerderderg River",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 297750275.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 284,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lerderderg River",
                "poID": 284,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lerderderg River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain critical flow components in refuge reaches along Lerderderg Gorge to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 199,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 757,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 757,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve flow regime in refuge reaches to support in-stream values and platypus populations. Reduce key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions and urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 210,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 519,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 519,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 228,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 775,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 775,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support in-stream values and platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 241,
                "subCatchmentId_dupe": 27,
                "subCatchmentName": "Diamond Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 96682687.72,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 749,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Source)",
                "poID": 749,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 250,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 331,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 331,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 274,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 185,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 185,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus and Yarra pygmy perch populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 277,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 189,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 189,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain critical flow components in refuge reaches along Deep Creek to protect Yarra pygmy perch / platypus and other instream values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 278,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 190,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 190,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / diversions and climate change.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 287,
                "subCatchmentId_dupe": 25,
                "subCatchmentName": "Diamond Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 213698172.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 739,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Rural)",
                "poID": 739,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve flow regime in refuge reaches to support in stream values and platypus populations. Reduce key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions and urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 319,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 203,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 203,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Reduce threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 335,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 213,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 213,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify and implement opportunities to maintain or improve flow regime in refuge reaches to support platypus populations and other instream values. Reduce threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 345,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 586,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 586,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 354,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 521,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 521,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 361,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 89,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 89,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kananook Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain critical flow components in refuge reaches in streams in Boggy Creek to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 392,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 764,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 764,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support instream values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 414,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 351,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 351,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 416,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 874,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 874,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer high flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 418,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 876,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 876,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 440,
                "subCatchmentId_dupe": 58,
                "subCatchmentName": "Watsons Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 83533628.88,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 831,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watsons Creek",
                "poID": 831,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watsons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support river blackFish and platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 446,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 885,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 885,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 460,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 271,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 271,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain critical flow components in refuge reaches along Kororoit Creek to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 489,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 277,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 277,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 505,
                "subCatchmentId_dupe": 59,
                "subCatchmentName": "Watts River (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 92601688.16,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 836,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Rural)",
                "poID": 836,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 511,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 848,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 848,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 512,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 849,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 849,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 525,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 782,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 782,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mullum Mullum Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 532,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 787,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 787,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 533,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 788,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 788,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 543,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 564,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 564,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support instream values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 573,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 571,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 571,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support instream values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 597,
                "subCatchmentId_dupe": 60,
                "subCatchmentName": "Watts River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 176422683.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 843,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Source)",
                "poID": 843,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 602,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 579,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 579,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support instream values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 636,
                "subCatchmentId_dupe": 50,
                "subCatchmentName": "Plenty River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 63637961.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 796,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River (Source)",
                "poID": 796,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 645,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 314,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 314,
                "poScale": "Sub-Catchment",
                "poLocationName": "Skeleton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 662,
                "subCatchmentId_dupe": 53,
                "subCatchmentName": "Steels and Pauls Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80952970.31,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 817,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Rural)",
                "poID": 817,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 677,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 827,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 827,
                "poScale": "Sub-Catchment",
                "poLocationName": "Stringybark Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 697,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 342,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 342,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches in Werribee Gorge and surrounds to support platypus populations and instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 708,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 227,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 227,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations and other instream values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 721,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 731,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 731,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 731,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 800,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 800,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 732,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 801,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 801,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support instream values and platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 739,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 808,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 808,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock uses / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 740,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 809,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 809,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support instream values and platypus populations through releases from Tourooong reservoir.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 751,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 178,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 178,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / diversions and climate change.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 769,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 323,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 323,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 776,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 305,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 305,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lollypop Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain critical flow components in refuge reaches in Lollypop Creek to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 810,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 299,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 299,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain critical flow components in refuge reaches in Little River (Worrin-yaloke) Upper to protect instream environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 811,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 300,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 300,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 830,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 291,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 291,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain critical flow components in refuge reaches in Little River (Worrin-yaloke) to protect instream environmental values and platypus (perridak).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 831,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 292,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 292,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify and implement opportunities to reduce the key threat of summer low flow stress by addressing causal factors such as water for domestic and stock use / climate change / diversions or urbanisation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 880,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 859,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 859,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify and implement opportunities to maintain or improve the flow regime in refuge reaches to support platypus populations.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 89,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 63,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 63,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase instream connectivity to provide fish passage between the mouth of Mordialloc Creek and Patterson River to Dandenong.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 179,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 561,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 561,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Increase instream connectivity provide fish passage along the Lang Lang River from the mouth to the headwaters by removing barriers at Heads Rd and Western Port Rd.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 249,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 330,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 330,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Increase instream connectivity provide fish passage along the Werribee River between the mouth and Melton Reservoir by removing 10 barriers in the lower reaches and another at Cobbledicks Ford Reserve.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 447,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 886,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 886,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Increase instream connectivity to provide fish passage along Armstrong Creek from the confluence with the Yarra River (remove barrier at Armstrong Weir).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 448,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 887,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 887,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Increase instream connectivity to provide fish passage along McMahons Creek from the confluence with the Yarra River (remove barrier at McMahons Weir).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 598,
                "subCatchmentId_dupe": 60,
                "subCatchmentName": "Watts River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 176422683.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 844,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Source)",
                "poID": 844,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Increase instream connectivity to provide fish passage along Donnellys Creek from the confluence with the Watts River (remove barrier at Donnellys Weir).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 599,
                "subCatchmentId_dupe": 60,
                "subCatchmentName": "Watts River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 176422683.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 845,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Source)",
                "poID": 845,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Increase instream connectivity to provide fish passage along Graceburn Creek from the confluence with the Watts River (remove barrier at Graceburn Weir).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 701,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 220,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 220,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase instream connectivity by providing fish passage between the mouth of the Maribyrnong River to the confluence with Deep Creek and Jacksons Creek (by removing / or providing effective fish passage over / Arundel Road Weir and McNabs Weir).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 722,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 732,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 732,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase instream connectivity to provide fish passage along Darebin Creek from the confluence with the Yarra River to the upper reaches (remove 2 fish barriers).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 768,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 322,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 322,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Increase instream connectivity provide fish passage along Toolern Creek from confluence with Werribee River to the headwaters by removing barriers at Melton South (near Exford Road) and High St / Melton.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 832,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 293,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 293,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Increase instream connectivity provide fish (kuwiyn) passage along the Little River (Worrin-yaloke) from the mouth to Geelong-Bacchus Marsh Rd / by removing five fish barriers in the lower reaches.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 881,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 860,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 860,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Improve / increase connectivity for fish passage",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Increase instream connectivity to provide fish passage along the lower Yarra River (rectify Dights Falls fishway).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "In-stream Connectivity",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 21,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 544,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 544,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dalmore Outfalls Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 54,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 539,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 539,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-11",
                "poDescription": "Investigate and mitigate threats to physical form (particularly at the change in slope at the top of the old swamp) and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 83,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 57,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 57,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 181,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 563,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 563,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-10",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (particularly along the lower reaches).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 252,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 333,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 333,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 270,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 188,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 188,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (particularly along tributaries).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 284,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 196,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 196,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (particularly along tributaries).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 290,
                "subCatchmentId_dupe": 25,
                "subCatchmentName": "Diamond Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 213698172.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 742,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Rural)",
                "poID": 742,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (particularly along tributaries and from urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 297,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 232,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 232,
                "poScale": "Sub-Catchment",
                "poLocationName": "Moonee Ponds Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 321,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 205,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 205,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 329,
                "subCatchmentId_dupe": 30,
                "subCatchmentName": "French and Phillip Islands",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 270164625.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 549,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "French and Phillip Islands",
                "poID": 549,
                "poScale": "Sub-Catchment",
                "poLocationName": "French and Phillip Islands Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 338,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 216,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 216,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 352,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 594,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 594,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 360,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 527,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 527,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate and mitigate threats (e.g. erosion) to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 398,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 770,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 770,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 461,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 272,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 272,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 519,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 856,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 856,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 527,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 784,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 784,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mullum Mullum Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Ensure existing erosion control assets are maintained and high values are protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 549,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 570,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 570,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 580,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 578,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 578,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 608,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 585,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 585,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (particularly valley fill reaches).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 646,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 315,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 315,
                "poScale": "Sub-Catchment",
                "poLocationName": "Skeleton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 664,
                "subCatchmentId_dupe": 53,
                "subCatchmentName": "Steels and Pauls Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80952970.31,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 819,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Rural)",
                "poID": 819,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 698,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 343,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 343,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-10",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 726,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 736,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 736,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 736,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 805,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 805,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (particularly along tributaries and including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 743,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 812,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 812,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (particularly along tributaries).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 753,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 180,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 180,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate and mitigate threats to physical form (e.g. erosion) and other high values (particularly along tributaries).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 770,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 324,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 324,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Investigate and mitigate threats to physical form and other high values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 777,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 306,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 306,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lollypop Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threats to physical form",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate and mitigate threats to physical form and other high values (including impacts of urbanisation).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Physical Form and Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 115,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 86,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 86,
                "poScale": "Sub-Catchment",
                "poLocationName": "Eumemmerring Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Target three riparian areas for habitat improvement works to support Pseudophryne semimarmorata (southern toadlet).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Significant Species Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 135,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 72,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 72,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Protect those parts of Dandenong Creek that are important for bird nesting / moulting / roosting and foraging from disturbing activities such as dog exercising.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Significant Species Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 136,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 73,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 73,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Target three riparian areas for habitat improvement works to support Pseudophryne semimarmorata (southern toadlet).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Significant Species Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 456,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 267,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 267,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Target three areas (min. 2 ha) for habitat improvement for Bibron's toadlet.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Significant Species Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 486,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 274,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 274,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Target three areas (min. 2 ha) for habitat improvement for Bibron's toadlet.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Significant Species Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 763,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 317,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 317,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Target three areas (min. 2 ha) for habitat improvement for Bibron's toadlet.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Significant Species Habitat",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 871,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 869,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 869,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Improve vegetation and capacity to retain nutrients and sediments in the floodplain from Millgrove to Yehring to protect and enhance biodiversity and protect Port Phillip Bay.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 286,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 198,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 198,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Translocate species",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-10",
                "poDescription": "Investigate opportunities to translocate Yarra pygmy perch into suitable habitat along the creek corridor.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Applied Research",
                "mwBusGroup": "Inegrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 754,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 181,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 181,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Translocate species",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Investigate opportunities to translocate Yarra pygmy perch into suitable habitat along the creek corridor.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Applied Research",
                "mwBusGroup": "Inegrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 38,
                "subCatchmentId_dupe": 5,
                "subCatchmentName": "Brushy Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 36782569.19,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 725,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Brushy Creek",
                "poID": 725,
                "poScale": "Sub-Catchment",
                "poLocationName": "Brushy Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "To prevent decline in stormwater condition in the Yarra River / treat urban development so directly connected imperviousness (DCI) of Brushy Creek remains below 13% at confluence with Yarra River. For every hectare of new impervious area / this requires harvesting around 5.5 ML/y and infiltrating 1.9 ML/y. This is about to 2.6 GL/y and 0.9 GL/y for full development to urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 47,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 532,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 532,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Prevent decline in stormwater condition by treating new development (e.g. Officer) so directly connected imperviousness (DCI) of Cardinia Creek remains below 3% upstream of Cardinia Rd. For every hectare of new impervious area / this requires harvesting about 5.5 ML/y and infiltrating 1.9 ML/y. This is about 6.3 GL/y and 2.2 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 80,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 54,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 54,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "To improve stormwater condition / and to protect the threatened Dandenong amphipod / disconnect stormwater flows / including from roads and septic systems / draining to Ferntree Gully Creek from Tremont and Ferny Creek townships. For every hectare of impervious area / this requires harvesting around 6.4 ML/y and infiltrating 3.0 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 81,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 55,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 55,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "To improve stormwater condition / and to protect the threatened Dandenong burrowing crayfish / disconnect stormwater flows from roads / carparks and buildings draining to Clematis / Monbulk and Hardys creeks from Sassafras / Kallista and Sherbrooke townships. For every hectare of impervious area / this requires harvesting around 6.3 ML/y and infiltrating 2.8 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 82,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 56,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 56,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "To prevent decline in stormwater condition / and to protect platypus habitat / treat urban development (eg Belgrave Heights) / so that upstream of Mt Morton Road / directly connected imperviousness remains below 2% along main stem of Monbulk Creek. For every hectare of new impervious area / this requires harvesting around 6.3 ML/y and infiltrating 2.9 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 163,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 77,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 77,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "To improve stormwater condition / and to protect the threatened Dandenong amphipod / disconnect stormwater drainage from roads and carparks draining to Upper Dandenong Creek through Doongalla forest. For every hectare of impervious area / this requires harvesting approximately 6.3 ML/y and infiltrating 2.9 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 164,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 78,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 78,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "To improve stormwater condition / treat new and existing development (i.e. The Basin and Sassafras) to reduce directly connected imperviousness (DCI) of Dobsons Creek to less than 1% at the confluence with Dandenong Creek. To disconnect a hectare of impervious area requires harvesting approximately 6.0 ML/y and infiltrating 2.4 ML/y. To disconnect the entire catchment would require approximately 0.4 GL to be harvested / and 0.2 GL to be infiltrated.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 173,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 556,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 556,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Prevent decline in stormwater condition by treating any new development (e.g. Nyora) so directly connected imperviousness (DCI) remains below 0.2% along Little Lang Lang River and tributaries. For every hectare of new impervious area / this requires harvesting about 5.7 ML/y and infiltrating 2.1 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 174,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 557,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 557,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Prevent decline in stormwater condition by treating any new development (e.g. Nyora) so directly connected imperviousness (DCI) of Adams Creek remains below 0.1%. For every hectare of new impervious area / this requires harvesting about 5.6 ML/y and infiltrating 2.0 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 203,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 761,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 761,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "To prevent decline in stormwater condition / treat urban development in the region of Yarra Junction and Powelltown / so directly connected impervious (DCI) of Little Yarra River remains below 0.3% at the juncture with the Yarra River / and along the stem of Little Yarra River. For every hectare of new impervious area / this requires harvesting around 6.8 ML/y and infiltrating 3.7 ML/y. This is about 250 ML/y and 140 ML/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 245,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 326,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 326,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "To prevent decline in stormwater condition / treat urban development (e.g. Eynesbury and Melton) / so directly connected imperviousness (DCI) of the Werribee River remains below 1.1% at Cobbledicks Ford. For every hectare of new impervious area / this requires harvesting around 3.5 ML/y and infiltrating 0.5 ML/y / which is about 2.9 GL/y and 0.4 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 272,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 183,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 183,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Improve stormwater condition by treating existing and future urban development from Darraweit Guim so directly connected imperviousness (DCI) is below 1% prior to connection to Deep Creek. For every hectare of impervious area / this requires harvesting around 4.0 ML/y and infiltrating 0.8 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 281,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 193,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 193,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Improve stormwater condition by treating existing and future urban development in Lancefield and Romsey so directly connected imperviousness (DCI) is below 1% in Five Mile Creek before Deep Creek confluence; and below 1% in Lancefield prior to Deep Creek connection. For every hectare of impervious area / harvest 5.0 ML/y and infiltrate 1.4 ML/y. For existing urban this is 0.5 GL/y and 0.2 GL/y for Lancefield / and 0.9 GL/y and 0.3 GL/y for Romsey. For new urban / further 0.3 GL/y and 0.1 GL/y is required for Lancefield and 1.0 GL/y and 0.3 GL/y for Romsey.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 315,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 199,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 199,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "Prevent decline in stormwater condition by treating urban development in Emu Creek catchment (e.g. from new developments in Sunbury) / so directly connected imperviousness (DCI) remains below 0.4% at the confluence with Deep Creek. For every hectare of new impervious area / this requires harvesting around 4.4 ML/y and infiltrating 1.1 ML/y / which is about 3.4 GL/y and 0.8 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 326,
                "subCatchmentId_dupe": 30,
                "subCatchmentName": "French and Phillip Islands",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 270164625.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 546,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "French and Phillip Islands",
                "poID": 546,
                "poScale": "Sub-Catchment",
                "poLocationName": "French and Phillip Islands Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "To prevent decline in stormwater condition / treat any new development (e.g. Cowes and Ventnor) in the Saltwater Creek catchment so directly connected imperviousness (DCI) remains below 0.8%. For every hectare of new impervious area / this requires harvesting 5.0 ML/y and infiltrating 1.5 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 331,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 209,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 209,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "Prevent decline in stormwater condition by treating urban development in the Jacksons Creek catchment (e.g. from new developments in Sunbury and Gisborne) / so directly connected imperviousness (DCI) is maintained or improved along the main stem of Jacksons Creek. For every hectare of new impervious area / this requires harvesting around 4.5 ML/y and infiltrating 1.1 ML/y / which is about 8.4 GL/y and 2.0 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 332,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 210,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 210,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Improve stormwater condition by treating existing and future urban development from Macedon and Mount Macedon so directly connected imperviousness (DCI) remains below 0.5% in Riddells Creek immediately downstream of Macedon. For every hectare of impervious area / this requires harvesting around 5.3 ML/y and infiltrating 1.7 ML/y / which equates to approximately 0.5 GL and 0.2 GL for the two townships combined.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 348,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 589,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 589,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Prevent decline in stormwater condition by treating any new development (e.g. Drouin) so directly connected imperviousness (DCI) remains below 1.5% along Whiskey and Gum Scrub creeks. For every hectare of new impervious area / this requires harvesting 6.0 ML/y and infiltrating 2.5 ML/y. This is about 2.9 GL/y and 1.2 GL/y for full urban development.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 395,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 767,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 767,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "To prevent decline in stormwater condition / treat urban development so directly connected imperviousness (DCI) remains below 2% on the Merri Creek at Summerhill Road (Wollert). For every hectare of new impervious area / this requires harvesting around 4.5 ML/y and infiltrating 1.1 ML/y / which is about 21.4 GL/y and 5.2 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 396,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 768,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 768,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "To prevent decline in stormwater condition / treat urban development upstream of Mount Ridley Road so directly connected imperviousness (DCI) remains below 1% throughout the upper Malcolm Creek catchment. For every hectare of new impervious area / this requires harvesting around 4.2 ML/y and infiltrating 0.9 ML/y / which is about 110 ML/y and 25 ML/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 408,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 345,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 345,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "To prevent decline in stormwater condition / treat urban development (e.g. Ballan) / so directly connected imperviousness (DCI) of the Werribee River (and its tributaries) remains below 0.2% upstream of Bacchus Marsh. For every hectare of new impervious area / this requires harvesting around 5.1 ML/y and infiltrating 1.6 ML/y / which is about 0.8 GL/y and 0.3 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 419,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 877,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 877,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "To prevent decline in stormwater condition / treat upstream urban development (including Healesville and Warburton) / so directly connected imperviousness (DCI) remains at current levels along the main stem of the Yarra River. For every hectare of new impervious area / this requires harvesting around 6.6 ML/y and infiltrating 3.4 ML/y / which is about to 0.6 GL/y and 0.3 GL/y for full development out to urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 462,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 273,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 273,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "To prevent decline in stormwater condition / treat urban development (e.g. Rockbank and Plumpton) / so directly connected imperviousness (DCI) along the main stem of Kororoit Creek remains below 0.4% upstream of Monaghans Road. For every hectare of new impervious area / this requires harvesting around 3.8 ML/y and infiltrating 0.7 ML/y / which is about 10.4 GL/y and 1.8 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 507,
                "subCatchmentId_dupe": 59,
                "subCatchmentName": "Watts River (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 92601688.16,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 838,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Rural)",
                "poID": 838,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "To prevent decline in stormwater condition / treat urban development in the region of Healesville and Badger Creek / so directly connected imperviousness (DCI) remains below 0.6% at the confluence with the Yarra River / and throughout the catchment. For every hectare of new impervious area / this requires harvesting around 6.2 ML/y and infiltrating 2.8 ML/y / which is about 410 ML/y and 180 ML/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 513,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 850,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 850,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "To prevent decline in stormwater condition / treat urban development (e.g. from new developments in Cockatoo / Emerald and Seville) / so directly connected imperviousness (DCI) remains below 0.3% at the confluence with the Yarra River / and at current levels along the stem of Woori Yallock Creek and Cockatoo Creek and tributaries. For every hectare of new impervious area / this requires harvesting around 6.3 ML/y and infiltrating 2.8 ML/y / which is about 0.7 GL/y and 0.3 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 534,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 789,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 789,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "To prevent decline in stormwater condition / and to protect the threatened Dandenong Amphipod / treat urban development in the Olinda Creek catchment / so directly connected imperviousness (DCI) remains below 3.5% prior to confluence with the Yarra River. For every hectare of new impervious area / this requires harvesting around 5.9 ML/y and infiltrating 2.3 ML/y / which is about 1.2 GL/y and 0.5 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 576,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 574,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 574,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Prevent decline in stormwater condition by treating any new development (e.g. Main Ridge) so directly connected imperviousness (DCI) along main stem of Main Creek and Splitters Creek remains below 0.5%. For every hectare of new impervious area / this requires harvesting 5.4 ML/y and infiltrating 1.8 ML/y. This is about 100 ML/y and 30 ML/y for full development to urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 604,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 581,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 581,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Prevent decline in stormwater condition by treating any new development (e.g. Main Ridge / Rosebud) so directly connected imperviousness (DCI) remains below 0.2% along Drum Drum Alloc Creek. For every hectare of new impervious area / this requires harvesting 5.1 ML/y and infiltrating 1.6 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 678,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 828,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 828,
                "poScale": "Sub-Catchment",
                "poLocationName": "Stringybark Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Prevent decline in stormwater condition / treat urban development in the Stringybark Creek catchment / so directly connected imperviousness (DCI) remains below 0.5% at the confluence with the Yarra River / and throughout the catchment. For every hectare of new impervious area / this requires harvesting around 5.8 ML/y and infiltrating 2.2 ML/y / which is about 470 ML/y and 70 ML/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 718,
                "subCatchmentId_dupe": 65,
                "subCatchmentName": "King Parrot and Musk Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 125601677.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 552,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "King Parrot and Musk Creeks",
                "poID": 552,
                "poScale": "Sub-Catchment",
                "poLocationName": "King Parrot and Musk Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Prevent decline in stormwater condition by treating any new development (e.g. Drouin) so directly connected imperviousness (DCI) remains below 0.5% along King Parrot Creek and tributaries. For every hectare of new impervious area / this requires harvesting about 5.7 ML/y and infiltrating 2.1 ML/y. This is about 2.0 GL/y and 0.8 GL/y for full urban development.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 723,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 733,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 733,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "To prevent decline in stormwater condition / treat urban development within Darebin Creek and Findons Creek catchments so directly connected imperviousness (DCI) remains below 2% in Darebin Creek at McDonalds Road (Epping). For every hectare of new impervious area / this requires harvesting around 4.5 ML/y and infiltrating 1.1 ML/y / which is about 4.5 GL/y and 1.1 GL/y for full development out to urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 742,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 811,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 811,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "To prevent decline in stormwater condition / treat urban development upstream of and within Whittlesea / so directly connected imperviousness (DCI) remains below 0.5% downstream of Whittlesea (and throughout the Upper Plenty River catchment). For every hectare of new impervious area / this requires harvesting around 5.5 ML/y and infiltrating 1.9 ML/y / which is about 350 ML/y and 120 ML/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 762,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 316,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 316,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "To prevent decline in stormwater condition / treat urban development (e.g. Melton) / so directly connected imperviousness (DCI) of Toolern Creek remains below 3.4% at confluence with Werribee River. For every hectare of new impervious area / this requires harvesting around 3.6 ML/y and infiltrating 0.6 ML/y / which is about 2.8 GL/y and 0.5 GL/y for full development to the urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 773,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 302,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 302,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lollypop Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "To prevent decline in stormwater condition / treat urban development in the upper reaches of Cherry Creek (e.g. Mambourin) / so directly connected imperviousness (DCI) of Cherry Creek remains below 0.2% at Princes Freeway. For every hectare of new impervious area / this requires harvesting around 3.2 ML/y and infiltrating 0.5 ML/y.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 868,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 866,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 866,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "To prevent decline in stormwater condition / treat upstream urban development so directly connected imperviousness (DCI) remains below 0.5% at the downstream reach of this sub-catchment / and at current levels along the main stem of the Yarra River. For every hectare of new impervious area / this requires harvesting around 5.1 ML/y and infiltrating 1.6 ML/y / which is about 3.5 GL/y and 1.2 GL/y for full development out to urban growth boundary. (Note / this is inclusive of similar performance objectives in upstream sub-catchments.)",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 883,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 862,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 862,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Infiltrating and harvesting stormwater",
                "poInvestment": "Capital investment/ incentives/ partnerships/ research/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "To prevent decline in stormwater condition / treat upstream urban development so directly connected imperviousness (DCI) remains at current levels at Warrandyte / and at current levels along the main stem of the Yarra River. For every hectare of new impervious area / this requires harvesting around 5.1 ML/y and infiltrating 1.5 ML/y / which is about 0.7 GL/y and 0.2 GL/y for full development out to urban growth boundary.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "Large-scale Stormwater Harvesting / Small-scale Disconnection",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 4,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 512,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 512,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bass River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Protect water quality for environmental values / the Bass River estuary and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 50,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 535,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 535,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways. Increase support for improved water stewardship.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 177,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 559,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 559,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 209,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 518,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 518,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 317,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 201,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 201,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing sedimentation from run-off associated with construction for urban development. Identify and mitigate sources of sedimentation from development construction activities. This can be through education programs or enforcement actions.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 327,
                "subCatchmentId_dupe": 30,
                "subCatchmentName": "French and Phillip Islands",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 270164625.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 547,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "French and Phillip Islands",
                "poID": 547,
                "poScale": "Sub-Catchment",
                "poLocationName": "French and Phillip Islands Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 341,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 219,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 219,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-11",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing sedimentation from run-off associated with construction for urban development. Identify and mitigate sources of sedimentation from development construction activities. This can be through education programs or enforcement actions.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 402,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 774,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 774,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-11",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing sedimentation from run-off associated with construction for urban development. Identify and mitigate sources of sedimentation from development construction activities. This can be through education programs or enforcement actions.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 548,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 569,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 569,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 579,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 577,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 577,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Reduce sedimentation from run-off associated with construction for urban development",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by managing sediment loads from construction activities to ensure no pollutant or sediment laden run-off enters drains and waterways. Increase support for improved water stewardship.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 2,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 510,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 510,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bass River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (54 km / 216 ha) and maintain existing vegetation (42 km / 167 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 13,
                "subCatchmentId_dupe": 3,
                "subCatchmentName": "Blind Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 33100493.74,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 49,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Blind Creek",
                "poID": 49,
                "poScale": "Sub-Catchment",
                "poLocationName": "Blind Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 4 ha) and maintain existing vegetation (3 km / 14 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 17,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 540,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 540,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dalmore Outfalls Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (44 km / 175 ha) and maintain existing vegetation (9 km / 35 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 39,
                "subCatchmentId_dupe": 5,
                "subCatchmentName": "Brushy Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 36782569.19,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 726,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Brushy Creek",
                "poID": 726,
                "poScale": "Sub-Catchment",
                "poLocationName": "Brushy Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 2 ha) and maintain existing vegetation (less than 1 km / 1 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 45,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 530,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 530,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (74 km / 297 ha) and maintain existing vegetation (121 km / 485 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 69,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 263,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 263,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cherry Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 4 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 84,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 58,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 58,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Establish a continuous riparian vegetated buffer (9 km / 38 ha) and maintain existing vegetation (30 km / 119 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 90,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 64,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 64,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish and maintain a continuous riparian vegetated buffer (3 km / 11 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 114,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 85,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 85,
                "poScale": "Sub-Catchment",
                "poLocationName": "Eumemmerring Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish and maintain a continuous riparian vegetated buffer (3 km / 13 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 134,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 71,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 71,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Establish a continuous riparian vegetated buffer (12 km / 47 ha) and maintain existing vegetation (29 km / 114 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 159,
                "subCatchmentId_dupe": 12,
                "subCatchmentName": "Gardiners Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 112909335.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 752,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Gardiners Creek",
                "poID": 752,
                "poScale": "Sub-Catchment",
                "poLocationName": "Gardiners Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 5 ha) and maintain existing vegetation (less than 1 km / 1 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition to improve social values increase vegetation cover in existing and planned urban areas by 1 km.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 167,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 81,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 81,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Establish a continuous riparian vegetated buffer (2 km / 10 ha) and maintain existing vegetation (12 km / 49 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 172,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 555,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 555,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (100 km / 768 ha) and maintain existing vegetation (195 km / 780ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 197,
                "subCatchmentId_dupe": 16,
                "subCatchmentName": "Lerderderg River",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 297750275.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 286,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lerderderg River",
                "poID": 286,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lerderderg River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Establish a continuous riparian vegetated buffer (8 km / 32 ha) and maintain existing vegetation (290 km / 1160 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 200,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 758,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 758,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (11 km / 44 ha) and maintain existing vegetation (130 km / 519 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 207,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 516,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 516,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (87 km / 349 ha) and maintain existing vegetation (19 km / 76 ha) along priority reaches (ensuring no increase in flood levels).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 229,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 776,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 776,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (2 km / 10 ha) and maintain existing vegetation (less than 1 km / 2 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 239,
                "subCatchmentId_dupe": 27,
                "subCatchmentName": "Diamond Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 96682687.72,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 747,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Source)",
                "poID": 747,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (4 km / 17 ha) and maintain existing vegetation (59 km / 237 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 243,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 325,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 325,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (29 km / 114 ha) and maintain existing vegetation (22 km / 86 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 273,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 184,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 184,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (39 km / 154 ha) and maintain existing vegetation (39 km / 157 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 283,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 195,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 195,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Establish a continuous riparian vegetated buffer (144 km / 575 ha) and maintain existing vegetation (54 km / 215 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 288,
                "subCatchmentId_dupe": 25,
                "subCatchmentName": "Diamond Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 213698172.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 740,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Rural)",
                "poID": 740,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (25 km / 101 ha) and maintain existing vegetation (81 km / 322 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 294,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 229,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 229,
                "poScale": "Sub-Catchment",
                "poLocationName": "Moonee Ponds Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (33 km / 131 ha) and maintain existing vegetation (11 km / 43 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 311,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 307,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 307,
                "poScale": "Sub-Catchment",
                "poLocationName": "Parwan Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (9 km / 37 ha) and maintain existing vegetation (16 km / 64 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 320,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 204,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 204,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Establish a continuous riparian vegetated buffer (40 km / 159 ha) and maintain existing vegetation (33 km / 130 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 325,
                "subCatchmentId_dupe": 30,
                "subCatchmentName": "French and Phillip Islands",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 270164625.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 545,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "French and Phillip Islands",
                "poID": 545,
                "poScale": "Sub-Catchment",
                "poLocationName": "French and Phillip Islands Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (42 km / 167 ha) and maintain existing vegetation (39 km / 157 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 333,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 211,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 211,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (97 km / 389 ha) and maintain existing vegetation (129 km / 516 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 347,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 588,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 588,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (65 km / 260 ha) and maintain existing vegetation (84 km / 338 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 355,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 522,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 522,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (44 km / 174 ha) and maintain existing vegetation (156 km / 626 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 363,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 91,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 91,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kananook Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (7 km / 28 ha) and maintain existing vegetation (8 km / 32 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 393,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 765,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 765,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (53 km / 213 ha) and maintain existing vegetation (12 km / 46 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 409,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 346,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 346,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (53 km / 213 ha) and maintain existing vegetation (135 km / 539 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 420,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 878,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 878,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Establish a continuous riparian vegetated buffer (42 km / 169 ha) and maintain existing vegetation (274 km / 1097 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 442,
                "subCatchmentId_dupe": 58,
                "subCatchmentName": "Watsons Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 83533628.88,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 833,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watsons Creek",
                "poID": 833,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watsons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (8 km / 31 ha) and maintain existing vegetation (58 km / 232 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 452,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 891,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 891,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 4 ha) and maintain existing vegetation (425 km / 1699 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 453,
                "subCatchmentId_dupe": 39,
                "subCatchmentName": "Koonung Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 32719460.38,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 755,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Koonung Creek",
                "poID": 755,
                "poScale": "Sub-Catchment",
                "poLocationName": "Koonung Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 3 ha) and maintain existing vegetation (1 km / 5 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 457,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 268,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 268,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (21 km / 85 ha) and maintain existing vegetation (5 km / 21 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 487,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 275,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 275,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kororoit Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (45 km / 180 ha) and maintain existing vegetation (4 km / 15 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 493,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 278,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 278,
                "poScale": "Sub-Catchment",
                "poLocationName": "Laverton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (14 km / 57 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 508,
                "subCatchmentId_dupe": 59,
                "subCatchmentName": "Watts River (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 92601688.16,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 839,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Rural)",
                "poID": 839,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Establish a continuous riparian vegetated buffer (7 km / 28 ha) and maintain existing vegetation (44 km / 175 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 514,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 851,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 851,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Establish a continuous riparian vegetated buffer (49 km / 196 ha) and maintain existing vegetation (204 km / 817 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 524,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 781,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 781,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mullum Mullum Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (2 km / 7 ha) and maintain existing vegetation (12 km / 46 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 537,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 792,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 792,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Establish a continuous riparian vegetated buffer (9 km / 34 ha) and maintain existing vegetation (27 km / 109 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 544,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 565,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 565,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (3 km / 11 ha) and maintain existing vegetation (7 km / 28 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / to improve social values increase vegetation cover in existing and planned urban areas by 1 km.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 574,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 572,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 572,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (22 km / 87 ha) and maintain existing vegetation (42 km / 166 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 601,
                "subCatchmentId_dupe": 60,
                "subCatchmentName": "Watts River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 176422683.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 847,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Source)",
                "poID": 847,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 1 ha) and maintain existing vegetation (137 km / 547 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 603,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 580,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 580,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (46 km / 184 ha) and maintain existing vegetation (48 km / 193 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 639,
                "subCatchmentId_dupe": 50,
                "subCatchmentName": "Plenty River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 63637961.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 799,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River (Source)",
                "poID": 799,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain existing vegetation (38 km / 150 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 642,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 311,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 311,
                "poScale": "Sub-Catchment",
                "poLocationName": "Skeleton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (38 km / 153 ha) and maintain existing vegetation (1 km / 5 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / to improve social values increase vegetation cover in existing and planned urban areas by 1 km.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 665,
                "subCatchmentId_dupe": 53,
                "subCatchmentName": "Steels and Pauls Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80952970.31,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 820,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Rural)",
                "poID": 820,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Establish a continuous riparian vegetated buffer (7 km / 28 ha) and maintain existing vegetation (17 km / 67 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 671,
                "subCatchmentId_dupe": 54,
                "subCatchmentName": "Steels and Pauls Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 47879494.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 826,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Source)",
                "poID": 826,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 3 ha) and maintain existing vegetation (30 km / 121 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 679,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 829,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 829,
                "poScale": "Sub-Catchment",
                "poLocationName": "Stringybark Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (7 km / 29 ha) and maintain existing vegetation (16 km / 64 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 686,
                "subCatchmentId_dupe": 57,
                "subCatchmentName": "Taylors Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 26597368.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 239,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Taylors Creek",
                "poID": 239,
                "poScale": "Sub-Catchment",
                "poLocationName": "Taylors Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 2 ha) and maintain existing vegetation (1 km / 4 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 689,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 334,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 334,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (50 km / 199 ha) and maintain existing vegetation (120 km / 480 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 703,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 222,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 222,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (21 km / 83 ha) and maintain existing vegetation (21 km / 83 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 715,
                "subCatchmentId_dupe": 64,
                "subCatchmentName": "Steele Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 28913183.06,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 234,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Steele Creek",
                "poID": 234,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steele Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (1 km / 3 ha) and maintain existing vegetation (less than zero km / 1 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 717,
                "subCatchmentId_dupe": 65,
                "subCatchmentName": "King Parrot and Musk Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 125601677.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 551,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "King Parrot and Musk Creeks",
                "poID": 551,
                "poScale": "Sub-Catchment",
                "poLocationName": "King Parrot and Musk Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (40 km / 161 ha) and maintain existing vegetation (14 km / 57 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 724,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 734,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 734,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Establish a continuous riparian vegetated buffer (31 km / 122 ha) and maintain existing vegetation (3 km / 13 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 733,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 802,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 802,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (14 km / 57 ha) and maintain existing vegetation (32 km / 128 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 744,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 813,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 813,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Establish a continuous riparian vegetated buffer (36 km / 145 ha) and maintain existing vegetation (60 km / 241 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / to improve social values increase vegetation cover in existing and planned urban areas by 1 km.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 750,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 177,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 177,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (31 km / 126 ha) and maintain existing vegetation (9 km / 36 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 755,
                "subCatchmentId_dupe": 70,
                "subCatchmentName": "Bayside",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 98763374.18,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 46,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Bayside",
                "poID": 46,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bayside Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (2 km / 6 ha) and maintain existing vegetation (1 km / 2 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 764,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 318,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 318,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (30 km / 119 ha) and maintain existing vegetation (10 km / 39 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / to improve social values increase vegetation cover in existing and planned urban areas by 1 km.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 772,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 301,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 301,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lollypop Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (25 km / 100 ha) and maintain existing vegetation (3 km / 13 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / to improve social values increase vegetation cover in existing and planned urban areas by 1 km.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 806,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 295,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 295,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Establish a continuous riparian vegetated buffer (91 km / 363 ha) and maintain existing vegetation (63 km / 251 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 828,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 289,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 289,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Establish a continuous riparian vegetated buffer (25 km / 99 ha) and maintain existing vegetation (2 km / 10 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 869,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 867,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 867,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish a continuous riparian vegetated buffer (48 km / 191 ha) and maintain existing vegetation (57 km / 227 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 882,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 861,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 861,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Establish a continuous riparian vegetated buffer (15 km / 60 ha) and maintain existing vegetation (76 km / 305 ha) along priority reaches (using EVC benchmarks to at least a level 3 vegetation quality). In addition / maximise multiple benefits from vegetation management for social values in existing and planned urban areas.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 3,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 511,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 511,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bass River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Determine extent of and maintain high quality vegetation along Allsop Creek; Bass River upstream of Poowong; and Bass River downstream of Tennent Creek through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 14,
                "subCatchmentId_dupe": 3,
                "subCatchmentName": "Blind Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 33100493.74,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 50,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Blind Creek",
                "poID": 50,
                "poScale": "Sub-Catchment",
                "poLocationName": "Blind Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently < 1 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 46,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 531,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 531,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 38 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 85,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 59,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 59,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Maintain or achieve high and very high quality vegetation along priority reaches (Vegetation Quality level 4 and 5 - currently 7 km) through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 133,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 70,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 70,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation along priority reaches (Vegetation Quality level 4 and 5 - currently < 1km) through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 165,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 79,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 79,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation along priority reaches (Vegetation Quality level 4 and 5 - currently 4 km) through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 166,
                "subCatchmentId_dupe": 13,
                "subCatchmentName": "Dandenong Creek Upper",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 14454852.53,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 80,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Upper",
                "poID": 80,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 196,
                "subCatchmentId_dupe": 16,
                "subCatchmentName": "Lerderderg River",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 297750275.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 285,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lerderderg River",
                "poID": 285,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lerderderg River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 278 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 198,
                "subCatchmentId_dupe": 16,
                "subCatchmentName": "Lerderderg River",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 297750275.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 287,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lerderderg River",
                "poID": 287,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lerderderg River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 201,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 759,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 759,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 47 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 202,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 760,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 760,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 237,
                "subCatchmentId_dupe": 27,
                "subCatchmentName": "Diamond Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 96682687.72,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 745,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Source)",
                "poID": 745,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 22 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 238,
                "subCatchmentId_dupe": 27,
                "subCatchmentName": "Diamond Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 96682687.72,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 746,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Source)",
                "poID": 746,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 271,
                "subCatchmentId_dupe": 23,
                "subCatchmentName": "Deep Creek Lower",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 209590777.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 182,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Lower",
                "poID": 182,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain or achieve high and very high quality vegetation (level 4 and 5 vegetation quality is currently 9 km) along Deep Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 279,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 191,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 191,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (level 4 and 5 vegetation quality is currently 28 km) along Deep Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 285,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 197,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 197,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 289,
                "subCatchmentId_dupe": 25,
                "subCatchmentName": "Diamond Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 213698172.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 741,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Rural)",
                "poID": 741,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 4 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 293,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 228,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 228,
                "poScale": "Sub-Catchment",
                "poLocationName": "Moonee Ponds Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Determine extent of and maintain high quality vegetation along Moonee Ponds Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 312,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 308,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 308,
                "poScale": "Sub-Catchment",
                "poLocationName": "Parwan Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Determine extent of and maintain high quality vegetation along the upper reaches of the Parwan River adjacent to / and around / the Werribee Gorge State Park through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 318,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 202,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 202,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation (level 4 and 5 vegetation quality is currently 14 km) along Emu Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 330,
                "subCatchmentId_dupe": 30,
                "subCatchmentName": "French and Phillip Islands",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 270164625.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 550,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "French and Phillip Islands",
                "poID": 550,
                "poScale": "Sub-Catchment",
                "poLocationName": "French and Phillip Islands Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 2 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 337,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 215,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 215,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Maintain or achieve high and very high quality vegetation (level 4 and 5 vegetation quality is currently 103 km) along Jacksons Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping and understanding of the extent / composition and condition of high and very high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 349,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 590,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 590,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 161 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 353,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 528,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 528,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 356,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 523,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 523,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 100 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 362,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 90,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 90,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kananook Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation along priority reaches (Vegetation Quality level 4 and 5 - currently 1 km) through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 394,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 766,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 766,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 10 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 410,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 347,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 347,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 92 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 415,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 352,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 352,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 421,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 879,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 879,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 108 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 441,
                "subCatchmentId_dupe": 58,
                "subCatchmentName": "Watsons Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 83533628.88,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 832,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watsons Creek",
                "poID": 832,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watsons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 26 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 449,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 888,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 888,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 206 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 450,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 889,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 889,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 496,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 281,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 281,
                "poScale": "Sub-Catchment",
                "poLocationName": "Laverton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 2 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 509,
                "subCatchmentId_dupe": 59,
                "subCatchmentName": "Watts River (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 92601688.16,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 840,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Rural)",
                "poID": 840,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 19 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 515,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 852,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 852,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 84 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 538,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 793,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 793,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 10 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 575,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 573,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 573,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula South-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 9 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 600,
                "subCatchmentId_dupe": 60,
                "subCatchmentName": "Watts River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 176422683.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 846,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Source)",
                "poID": 846,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 58 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 605,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 582,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 582,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula Western Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 11 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 637,
                "subCatchmentId_dupe": 50,
                "subCatchmentName": "Plenty River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 63637961.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 797,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River (Source)",
                "poID": 797,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 27 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 638,
                "subCatchmentId_dupe": 50,
                "subCatchmentName": "Plenty River (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 63637961.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 798,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River (Source)",
                "poID": 798,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 641,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 310,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 310,
                "poScale": "Sub-Catchment",
                "poLocationName": "Skeleton Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 6 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 663,
                "subCatchmentId_dupe": 53,
                "subCatchmentName": "Steels and Pauls Creek (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80952970.31,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 818,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Rural)",
                "poID": 818,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 2 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 668,
                "subCatchmentId_dupe": 54,
                "subCatchmentName": "Steels and Pauls Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 47879494.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 823,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Source)",
                "poID": 823,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 17 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 669,
                "subCatchmentId_dupe": 54,
                "subCatchmentName": "Steels and Pauls Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 47879494.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 824,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Source)",
                "poID": 824,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 685,
                "subCatchmentId_dupe": 57,
                "subCatchmentName": "Taylors Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 26597368.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 238,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Taylors Creek",
                "poID": 238,
                "poScale": "Sub-Catchment",
                "poLocationName": "Taylors Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Determine extent of and maintain high quality vegetation along Taylors Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 690,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 335,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 335,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 111 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 699,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 344,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 344,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-11",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 702,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 221,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 221,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Determine extent of and maintain high quality vegetation along Maribyrnong River and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 725,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 735,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 735,
                "poScale": "Sub-Catchment",
                "poLocationName": "Darebin Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 6 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 734,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 803,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 803,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 44 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 735,
                "subCatchmentId_dupe": 67,
                "subCatchmentName": "Plenty River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 86809159.36,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 804,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Lower",
                "poID": 804,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Improve understanding of the extent / composition and condition of high and very high quality vegetation / and effectively monitor and manage both values and threats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 745,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 814,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 814,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 35 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 748,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 175,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 175,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Determine extent of and maintain high quality vegetation along Boyd Creek and tributaries through effective monitoring and management of threats including protection of endangered EVCs. Fill data gaps in mapping of high quality vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 765,
                "subCatchmentId_dupe": 71,
                "subCatchmentName": "Toolern Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 98654772.62,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 319,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Toolern Creek",
                "poID": 319,
                "poScale": "Sub-Catchment",
                "poLocationName": "Toolern Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Determine extent of and maintain high quality vegetation along the upper reaches of Toolern Creek near the Lerderderg State Park (Pyrete Range) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 807,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 296,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 296,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 28 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 833,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 294,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 294,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality level 4 and 5 - currently 4 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 870,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 868,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 868,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain or achieve high and very high quality vegetation (Vegetation Quality data level 4 and 5 - currently 8 km) through effective monitoring and management of threats including protection of endangered EVCs in these reaches. Fill data gaps and ensure additional high quality reaches are also protected.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Vegetation for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 19,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 542,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 542,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dalmore Outfalls Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Protect water quality for environmental values / coastal vegetation and seagrass in Western Port by managing runoff from agricultural and urban areas / including sediment loads from construction activities / to ensure no pollutant or sediment laden run-off enters drains and waterways. Increase support for improved water stewardship.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 86,
                "subCatchmentId_dupe": 8,
                "subCatchmentName": "Corhanwarrabul, Monbulk and Ferny Creeks",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 83516506.65,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 60,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Corhanwarrabul Monbulk and Ferny Creeks",
                "poID": 60,
                "poScale": "Sub-Catchment",
                "poLocationName": "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-08",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity impacts from rural land / urban growth and unsealed roads as well as nutrient inputs from rural land and septic tanks in Monbulk creek between Birdsland and Lysterfield Rd.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 205,
                "subCatchmentId_dupe": 18,
                "subCatchmentName": "Little Yarra River and Hoddles Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 189948606.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 763,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Little Yarra River and Hoddles Creek",
                "poID": 763,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little Yarra River and Hoddles Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity impacts from rural land / urban growth and unsealed roads as well as nutrient and pesticide inputs from rural land. This may include establishment of vegetated buffers in headwater streams. And mitigating where required potential impacts from septic tanks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 233,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 780,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 780,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality of Port Phillip Bay and waterways from industrial activity by reducing industrial pollutant levels detected in waterways. Identify and mitigate sources of industrial pollution. This can be through education programs / enforcement actions or disconnections from the stormwater system.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 324,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 208,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 208,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-10",
                "poDescription": "Protect water quality of Port Phillip Bay and waterways from industrial activity by reducing industrial pollutant levels detected in waterways. Identify and mitigate sources of industrial pollution. This can be through education programs / enforcement actions or disconnections from the stormwater system.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 401,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 773,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 773,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-10",
                "poDescription": "Protect water quality of Port Phillip Bay and waterways from industrial activity by reducing industrial pollutant levels detected in waterways. Identify and mitigate sources of industrial pollution. This can be through education programs / enforcement actions or disconnections from the stormwater system.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 422,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 880,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 880,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing sediment run-off from rural land / urban growth and unsealed roads as well as nutrient inputs from rural land and septic tanks. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 506,
                "subCatchmentId_dupe": 59,
                "subCatchmentName": "Watts River (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 92601688.16,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 837,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watts River (Rural)",
                "poID": 837,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watts River (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity impacts from rural land / urban growth and unsealed roads as well as nutrient inputs from rural land and septic tanks. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 516,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 853,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 853,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing sediment run-off from rural land / urban growth and unsealed roads as well as nutrient inputs from rural land and septic tanks. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 517,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 854,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 854,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Improve water quality for environmental values by reducing pesticide impacts from rural and urban land.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 526,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 783,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 783,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mullum Mullum Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Investigate and mitigate where required potential impacts from septic tanks.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 6,
                "subCatchmentId_dupe": 2,
                "subCatchmentName": "Bass River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 371300824.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 514,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bass River",
                "poID": 514,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bass River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Improve water quality for environmental values / the Bass River estuary and seagrass in Western Port by reducing nutrient and sediment run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 48,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 533,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 533,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Improve water quality for environmental values and seagrass in Western Port by reducing turbidity and nutrient run-off from rural land in Deep Creek / Stoney Creek and Toomuc Creek. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 175,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 558,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 558,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lang Lang River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Improve water quality for environmental values and seagrass in Western Port by reducing turbidity and nutrient run-off from rural land. Increase support for improved water stewardship.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 194,
                "subCatchmentId_dupe": 16,
                "subCatchmentName": "Lerderderg River",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 297750275.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 283,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lerderderg River",
                "poID": 283,
                "poScale": "Sub-Catchment",
                "poLocationName": "Lerderderg River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land in the Lerderderg River and Goodmans Creek. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 211,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 520,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 520,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality for environmental values and seagrass in Western Port by reducing sediment run-off from rural land. Increase support for improved water stewardship.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 242,
                "subCatchmentId_dupe": 27,
                "subCatchmentName": "Diamond Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 96682687.72,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 750,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Diamond Creek (Source)",
                "poID": 750,
                "poScale": "Sub-Catchment",
                "poLocationName": "Diamond Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 282,
                "subCatchmentId_dupe": 24,
                "subCatchmentName": "Deep Creek Upper",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 341050863.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 194,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Deep Creek Upper",
                "poID": 194,
                "poScale": "Sub-Catchment",
                "poLocationName": "Deep Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 316,
                "subCatchmentId_dupe": 29,
                "subCatchmentName": "Emu Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 184119986.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 200,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Emu Creek",
                "poID": 200,
                "poScale": "Sub-Catchment",
                "poLocationName": "Emu Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 350,
                "subCatchmentId_dupe": 32,
                "subCatchmentName": "Tarago River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 288766461,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 591,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Tarago River",
                "poID": 591,
                "poScale": "Sub-Catchment",
                "poLocationName": "Tarago River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Improve water quality for environmental values and seagrass in Western Port by reducing sediment and nutrient run off from rural land and sediment run off from forested areas in the Tarago River catchment and Labertouche Creek. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 357,
                "subCatchmentId_dupe": 33,
                "subCatchmentName": "Bunyip River Middle and Upper",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 374915445.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 524,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip River Middle and Upper",
                "poID": 524,
                "poScale": "Sub-Catchment",
                "poLocationName": "Bunyip River Middle and Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Improve water quality for environmental values and seagrass in Western Port by reducing nutrient and sediment run-off from rural land as well as sediment run-off from forested areas. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 412,
                "subCatchmentId_dupe": 36,
                "subCatchmentName": "Werribee River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 251180202.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 349,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Upper",
                "poID": 349,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land and septic tanks upstream of Ballan. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 443,
                "subCatchmentId_dupe": 58,
                "subCatchmentName": "Watsons Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 83533628.88,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 834,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Watsons Creek",
                "poID": 834,
                "poScale": "Sub-Catchment",
                "poLocationName": "Watsons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural and forest land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 536,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 791,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 791,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Protect waterways and drinking water supply by reducing pesticide impact from Olinda Creek catchment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 667,
                "subCatchmentId_dupe": 54,
                "subCatchmentName": "Steels and Pauls Creek (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 47879494.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 822,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Steels and Pauls Creek (Source)",
                "poID": 822,
                "poScale": "Sub-Catchment",
                "poLocationName": "Steels and Pauls Creek (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural and forest land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 693,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 338,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 338,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land in the Djerriwarrh catchment. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 694,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 339,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 339,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land in the Pyrites Creek catchment downstream of Merrimu. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 695,
                "subCatchmentId_dupe": 61,
                "subCatchmentName": "Werribee River Middle",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 376684098.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 340,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Middle",
                "poID": 340,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land around Bacchus Marsh.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 741,
                "subCatchmentId_dupe": 68,
                "subCatchmentName": "Plenty River Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 203879263.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 810,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Plenty River Upper",
                "poID": 810,
                "poScale": "Sub-Catchment",
                "poLocationName": "Plenty River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run off from rural land upstream of Whittlesea. Investigate and seek to mitigate source of high nutrients / turbidity and metals in Bruce's Creek. Establish vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 749,
                "subCatchmentId_dupe": 69,
                "subCatchmentName": "Boyd Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 136730250.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 176,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Boyd Creek",
                "poID": 176,
                "poScale": "Sub-Catchment",
                "poLocationName": "Boyd Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 809,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 298,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 298,
                "poScale": "Sub-Catchment",
                "poLocationName": "Little River Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Improve water quality for environmental values and Port Phillip Bay by reducing turbidity and nutrient run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 71,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 265,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 265,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cherry Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Maintain recreational water quality at Cherry Lake (suitable for secondary contact).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 91,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 65,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 65,
                "poScale": "Sub-Catchment",
                "poLocationName": "Dandenong Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Maintain recreational water quality at National Water Sports Centre (suitable for secondary contact).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 248,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 329,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 329,
                "poScale": "Sub-Catchment",
                "poLocationName": "Werribee River Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Protect recreational water quality in Werribee River to support existing recreational activities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 364,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 92,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 92,
                "poScale": "Sub-Catchment",
                "poLocationName": "Kananook Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Maintain recreational water quality in lower reaches of Kananook Creek (suitable for secondary contact).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 424,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 882,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 882,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-09",
                "poDescription": "Protect water quality for key recreation areas on the Yarra / characterise / communicate and mitigate sources of microbial risk.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 451,
                "subCatchmentId_dupe": 38,
                "subCatchmentName": "Yarra River Upper (Source)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 615887266.8,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 890,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Source)",
                "poID": 890,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Source) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Protect water quality for key recreation areas on the Yarra / characterise / communicate and mitigate sources of microbial risk.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 706,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 225,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 225,
                "poScale": "Sub-Catchment",
                "poLocationName": "Maribyrnong River Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect recreational water quality in Maribyrnong River to support existing recreational activities (swimming above Brimbank Park and boating downstream).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 872,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 870,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 870,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect recreational water quality in the Yarra River to support existing recreational activities.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 873,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 871,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 871,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Middle Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain / protect recreational water quality",
                "poInvestment": "Maintenance and operations/ incentives/ partnerships/ influence/advocacy",
                "poNumber": "PO-07",
                "poDescription": "Protect water quality for key recreation areas on the Yarra - characterise / communicate and mitigate sources of microbial risk.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 41,
                "subCatchmentId_dupe": 5,
                "subCatchmentName": "Brushy Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 36782569.19,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 728,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Brushy Creek",
                "poID": 728,
                "poScale": "Sub-Catchment",
                "poLocationName": "Brushy Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Protect water quality for Port Phillip Bay and waterways by maintaining the current quality of discharges from sewage treatment plants (and reducing volumes where possible) ensuring they are released in a manner that ensures environmental values are supported in the waterway.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 230,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 777,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 777,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Lower Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Protect water quality for Port Phillip Bay and waterways by maintaining current quality of discharges from sewage treatment plants (and reduce where possible) / and ensuring they are released in a manner that supports environmental values. Additionally identify and mitigate other sources (eg sewer leaks) of faecal contamination.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 336,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 214,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 214,
                "poScale": "Sub-Catchment",
                "poLocationName": "Jacksons Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality for Port Phillip Bay and waterways by maintaining the current quality of discharges from sewage treatment plants (and reducing where possible) ensuring they are released in a manner that ensures environmental values are supported in the waterway. Reduce turbidity and nutrient run-off from rural land. This may include establishment of vegetated buffers in headwater streams.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 397,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 769,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 769,
                "poScale": "Sub-Catchment",
                "poLocationName": "Merri Creek Upper Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality for Port Phillip Bay and waterways by maintaining current quality of discharges from sewage treatment plants (and reducing volumes where possible) / and ensuring they are released in a manner that ensures environmental values are supported in the waterway.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 423,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 881,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 881,
                "poScale": "Sub-Catchment",
                "poLocationName": "Yarra River Upper (Rural) Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-08",
                "poDescription": "Protect water quality for Port Phillip Bay and waterways by maintaining the current quality of discharges from sewage treatment plants (and reducing volumes where possible) / whilst ensuring they are released in a manner that ensures environmental values are supported in the waterway.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 518,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 855,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 855,
                "poScale": "Sub-Catchment",
                "poLocationName": "Woori Yallock Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-08",
                "poDescription": "Protect water quality for Port Phillip Bay and waterways by maintaining the current quality of discharges from Monbulk sewage treatment plant (or reducing volumes where possible) / whilst ensuring they are released in a manner that ensures environmental values are supported in the waterway.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 535,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 790,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 790,
                "poScale": "Sub-Catchment",
                "poLocationName": "Olinda Creek Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Maintain or improve quality of Sewerage Treatment Plant discharges",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-04",
                "poDescription": "Improve water quality for water supply and Port Phillip Bay by investigating the quality of water discharged from Lilydale sewage treatment plant and other pollution sources above the Yering Gorge offtake / and opportunities for improvements which may include offsets. Ensure discharges are of sufficient quality and are delivered in a way that supports waterways and Port Phillip Bay.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Limited",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "N/A - externally delivered service",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 49,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 534,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 534,
                "poScale": "Sub-Catchment",
                "poLocationName": "Cardinia Toomuc Deep and Ararat Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Protect water quality for Ramsar values / seagrass and mangrove communities in Western Port by reducing pesticide threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 545,
                "subCatchmentId_dupe": 46,
                "subCatchmentName": "Mornington Peninsula North-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 175262851.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 566,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula North-Eastern Creeks",
                "poID": 566,
                "poScale": "Sub-Catchment",
                "poLocationName": "Mornington Peninsula North-Eastern Creeks Subcatchment",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Protect Yaringa Marine National Park and coastal wetlands by improving rural land management to reduce impacts from pesticides / sediment and nutrients for the catchments extending from Sawtells Inlet to Watsons Creek Estuary. Increase support for improved water stewardship.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 298,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 245,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 245,
                "poScale": "Wetland",
                "poLocationName": "Greenvale Reservoir Park Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Develop understanding of the amenity / community connection and recreation values of wetlands and develop performance objectives to enhance the values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 302,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 249,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 249,
                "poScale": "Wetland",
                "poLocationName": "Queens Park Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Develop understanding of the amenity / community connection and recreation values of wetlands and develop performance objectives to enhance the values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 709,
                "subCatchmentId_dupe": 63,
                "subCatchmentName": "Maribyrnong River",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 74192471.43,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 244,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Maribyrnong River",
                "poID": 244,
                "poScale": "Wetland",
                "poLocationName": "Pipemakers Park Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Community places",
                "poTheme": "Community Place Making",
                "poInvestment": "Influence/advocacy/ partnerships",
                "poNumber": "PO-01",
                "poDescription": "Develop understanding of the amenity / community connection and recreation values of wetlands and develop performance objectives to enhance the values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Land and Collaborative Planning",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Community access involvement and recreation",
                "hwsWDIP_P": "Community involvement in waterways",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 25,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 609,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 609,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Prepare adaption pathway for climate change impacts / including opportunities to maintain water regime through prevention of activities that increase the altered wetland area and altered wetland form threats (e.g. construction of levees).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 56,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 600,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 600,
                "poScale": "Wetland",
                "poLocationName": "Cardinia Creek Retarding Basin Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 73,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 353,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 353,
                "poScale": "Wetland",
                "poLocationName": "Cherry Lake Cherry Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Understand and manage water regime to ensure emergent macrophytes continue to support Altona skipper butterfly.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 94,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 102,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 102,
                "poScale": "Wetland",
                "poLocationName": "Braeside Park",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 101,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 121,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 121,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain critical water regime components in Edithvale wetlands to protect wetland environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 122,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 101,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 101,
                "poScale": "Wetland",
                "poLocationName": "Barnbam Swamp Lynbrook",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 123,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 108,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 108,
                "poScale": "Wetland",
                "poLocationName": "Dwarf galaxias Conservation Wetland Cranbourne Road Narre Warren",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain critical water regime components in wetlands along Eumemmerring Creek to protect wetland environmental values / Yarra pygmy perch and dwarf galaxias.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 127,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 125,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 125,
                "poScale": "Wetland",
                "poLocationName": "Hallam Valley Floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain water regime to meet ecological water needs and design intent for birds / frogs and fish including the nationally threatened species dwarf galaxias and Yarra pygmy perch.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 142,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 111,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 111,
                "poScale": "Wetland",
                "poLocationName": "Dwarf galaxias habitat ponds - created along Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain critical water regime components in wetlands along Dandenong Creek to protect wetland environmental values / Yarra pygmy perch and dwarf galaxias.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 147,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 145,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 145,
                "poScale": "Wetland",
                "poLocationName": "Tirhatuan Wetlands Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Establish water regime to ensure protection of Seasonally Herbaceous wetland character / dwarf galaxias and Latham's snipe habitat.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 152,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 151,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 151,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Investigate the feasibility of improving the wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 155,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 154,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 154,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain water regime to meet ecological water needs and design intent for dwarf galaxias and Yarra pygmy perch needs.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 183,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 602,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 602,
                "poScale": "Wetland",
                "poLocationName": "Lang Lang floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Water regime implemented to meet ecological watering objectives including dwarf galaxias habitat protection / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 215,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 598,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 598,
                "poScale": "Wetland",
                "poLocationName": "Yallock Creek floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 255,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 474,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 474,
                "poScale": "Wetland",
                "poLocationName": "Cunninghamâ€™s Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Ensure that use of Cunningham's Swamp as a stormwater retarding basin is not at the expense of the natural wetland form and Obligations of managing a Seasonally Herbaceous Wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 260,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 479,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 479,
                "poScale": "Wetland",
                "poLocationName": "Point Cook Wetlands - RAAF Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 342,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 242,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 242,
                "poScale": "Wetland",
                "poLocationName": "Gisborne Marshlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value in line with Gisborne Marshlands Environmental Management Plan.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 369,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 114,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 114,
                "poScale": "Wetland",
                "poLocationName": "Eastern Treatment Plant",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify opportunities to further re-engage the natural wetland area including the Golden Triangle.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 379,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 136,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 136,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Maintain critical water regime components in Edithvale wetlands to protect wetland environmental values.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 382,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 139,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 139,
                "poScale": "Wetland",
                "poLocationName": "Tamarisk Waterway Reserve Langwarrin",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain water regime to meet ecological water needs for dwarf galaxias needs.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 403,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 895,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 895,
                "poScale": "Wetland",
                "poLocationName": "Hearnes Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to further re-engage the natural wetlands in this area and to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 406,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 898,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 898,
                "poScale": "Wetland",
                "poLocationName": "Kalkallo Commons Grassland and Kalkallo Creek Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to further re-engage the natural wetlands in this area and to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 426,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 907,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 907,
                "poScale": "Wetland",
                "poLocationName": "Domain Chandon Billabongs",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value. And investigate opportunities to further re-engage the natural wetlands in this area.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 432,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 945,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 945,
                "poScale": "Wetland",
                "poLocationName": "Yarra Bridge Stream Side Reserve",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 437,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 950,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 950,
                "poScale": "Wetland",
                "poLocationName": "Yering Backswamp Yarra River",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime managed to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 464,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 361,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 361,
                "poScale": "Wetland",
                "poLocationName": "Deanside Marsh Rockbank",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 465,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 362,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 362,
                "poScale": "Wetland",
                "poLocationName": "Deanside Marsh Rockbank",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Maintain the current water regime / and ensure that future urban stormwater is not diverted into the two last remaining wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 470,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 367,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 367,
                "poScale": "Wetland",
                "poLocationName": "Paynes Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 492,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 379,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 379,
                "poScale": "Wetland",
                "poLocationName": "Holden Road Wetlands Diggers Rest",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 501,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 391,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 391,
                "poScale": "Wetland",
                "poLocationName": "Truganina Swamp Laverton Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value and re engage the natural wetland area.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 521,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 913,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 913,
                "poScale": "Wetland",
                "poLocationName": "Cockatoo Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented (incorporating understanding of groundwater contributions) to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 530,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 902,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 902,
                "poScale": "Wetland",
                "poLocationName": "Ringwood Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 609,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 619,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 619,
                "poScale": "Wetland",
                "poLocationName": "The Briars Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 611,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 621,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 621,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Identify opportunities to further re-engage the natural wetland area.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 614,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 624,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 624,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Water regime implemented (considering stormwater and groundwater) to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 647,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 383,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 383,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Continue to implement water regime management in artificial habitats within the Ramsar site. Prepare adaption pathway for climate change and stormwater impacts on the water regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 655,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 470,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 470,
                "poScale": "Wetland",
                "poLocationName": "Laverton RAAF Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Prepare adaption pathway for climate change impacts / including opportunities to maintain water regime in light of climate change and stormwater impacts.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 681,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 941,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 941,
                "poScale": "Wetland",
                "poLocationName": "Spadonis Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 729,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 892,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 892,
                "poScale": "Wetland",
                "poLocationName": "Donnybrook Road Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 780,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 425,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 425,
                "poScale": "Wetland",
                "poLocationName": "Balls Wetland Complex (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 785,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 429,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 429,
                "poScale": "Wetland",
                "poLocationName": "Black Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 796,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 446,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 446,
                "poScale": "Wetland",
                "poLocationName": "Target Range Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 802,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 452,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 452,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Paul & Belfrages Wetland",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 804,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 460,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 460,
                "poScale": "Wetland",
                "poLocationName": "Wyndham Vale Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 814,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 416,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 416,
                "poScale": "Wetland",
                "poLocationName": "Greens Rd E Wetland No. 2 (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 820,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 422,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 422,
                "poScale": "Wetland",
                "poLocationName": "West Quandong Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 823,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 440,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 440,
                "poScale": "Wetland",
                "poLocationName": "Rabbitters Lake and Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 839,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 397,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 397,
                "poScale": "Wetland",
                "poLocationName": "Kirks bridge Rd W Wetland (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 855,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 413,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 413,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ryans Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Continue to implement water regime management to meet ecological objectives in artificial habitats within the Ramsar site.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 861,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 458,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 458,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ponds",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Continue to implement water regime management to meet ecological objectives in artificial habitats within the Ramsar site.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 886,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 916,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 916,
                "poScale": "Wetland",
                "poLocationName": "Annulus Billabong Yarra Flats",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 888,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 918,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 918,
                "poScale": "Wetland",
                "poLocationName": "Banyule Flats Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 895,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 924,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 924,
                "poScale": "Wetland",
                "poLocationName": "Bolin Bolin Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 896,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 925,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 925,
                "poScale": "Wetland",
                "poLocationName": "Burke Road Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 900,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 929,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 929,
                "poScale": "Wetland",
                "poLocationName": "Hays Paddock Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland water regime to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 906,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 935,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 935,
                "poScale": "Wetland",
                "poLocationName": "Willsmere Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Maintain or improve flow regimes in unregulated systems",
                "poInvestment": "Strategic direction/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Water regime implemented to meet ecological watering objectives / improve ecosystem services / cultural and social value.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 430,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 911,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 911,
                "poScale": "Wetland",
                "poLocationName": "Domain Chandon Billabongs",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 877,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 937,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 937,
                "poScale": "Wetland",
                "poLocationName": "Willsmere Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 889,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 919,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 919,
                "poScale": "Wetland",
                "poLocationName": "Banyule Flats Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 892,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 922,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 922,
                "poScale": "Wetland",
                "poLocationName": "Bolin Bolin Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 897,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 926,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 926,
                "poScale": "Wetland",
                "poLocationName": "Burke Road Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 901,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 930,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 930,
                "poScale": "Wetland",
                "poLocationName": "Hays Paddock Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Flow regimes",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Resource Management",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Water Resource Management / Flood Preparedness and Service Performance",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 498,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 381,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 381,
                "poScale": "Wetland",
                "poLocationName": "Altona Treatment Plant",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 497,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 380,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 380,
                "poScale": "Wetland",
                "poLocationName": "Altona Treatment Plant",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Ensure acid sulfate soils disturbance is kept to a minimum and that if there is any disturbance appropriate management techniques are employed.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 876,
                "subCatchmentId_dupe": 75,
                "subCatchmentName": "Yarra River Middle",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 131895521,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 940,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Middle",
                "poID": 940,
                "poScale": "Wetland",
                "poLocationName": "Anderson Creek East Retarding Basin",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Ensure that the flood mitigation design intent of wetland flood retarding basin sites is retained / whilst considering site biodiversity values identified in the site management plans.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 887,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 917,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 917,
                "poScale": "Wetland",
                "poLocationName": "Annulus Billabong Yarra Flats",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 779,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 424,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 424,
                "poScale": "Wetland",
                "poLocationName": "Balls Wetland Complex (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 778,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 423,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 423,
                "poScale": "Wetland",
                "poLocationName": "Balls Wetland Complex (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 368,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 96,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 96,
                "poScale": "Wetland",
                "poLocationName": "Banyan Waterhole (aka Boundary Road Wetland)",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce the threat of foxes and domestic cats and dogs to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 367,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 95,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 95,
                "poScale": "Wetland",
                "poLocationName": "Banyan Waterhole (aka Boundary Road Wetland)",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Improve the wetland buffer to cover 50% of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 891,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 921,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 921,
                "poScale": "Wetland",
                "poLocationName": "Banyule Flats Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 890,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 920,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 920,
                "poScale": "Wetland",
                "poLocationName": "Banyule Flats Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 119,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 98,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 98,
                "poScale": "Wetland",
                "poLocationName": "Barnbam Swamp Lynbrook",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat to native birds from foxes / cats and dogs to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 121,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 100,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 100,
                "poScale": "Wetland",
                "poLocationName": "Barnbam Swamp Lynbrook",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce weed threat to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 120,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 99,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 99,
                "poScale": "Wetland",
                "poLocationName": "Barnbam Swamp Lynbrook",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 118,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 97,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 97,
                "poScale": "Wetland",
                "poLocationName": "Barnbam Swamp Lynbrook",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Maintain stormwater treatment systems",
                "poInvestment": "Maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain WSUD infrastructure to design intent to ensure continued water quality benefit to Barnbam Swamp.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "SWQTS",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 837,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 395,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 395,
                "poScale": "Wetland",
                "poLocationName": "Baths Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 834,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 392,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 392,
                "poScale": "Wetland",
                "poLocationName": "Baths Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 836,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 394,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 394,
                "poScale": "Wetland",
                "poLocationName": "Baths Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 786,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 430,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 430,
                "poScale": "Wetland",
                "poLocationName": "Black Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce invasive fauna to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 784,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 428,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 428,
                "poScale": "Wetland",
                "poLocationName": "Black Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 893,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 923,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 923,
                "poScale": "Wetland",
                "poLocationName": "Bolin Bolin Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 95,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 103,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 103,
                "poScale": "Wetland",
                "poLocationName": "Braeside Park",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat to native birds from foxes / cats and dogs to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 96,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 104,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 104,
                "poScale": "Wetland",
                "poLocationName": "Braeside Park",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 899,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 928,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 928,
                "poScale": "Wetland",
                "poLocationName": "Burke Road Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 898,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 927,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 927,
                "poScale": "Wetland",
                "poLocationName": "Burke Road Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 55,
                "subCatchmentId_dupe": 6,
                "subCatchmentName": "Cardinia, Toomuc, Deep and Ararat Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 410191813.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 599,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Cardinia Toomuc Deep and Ararat Creeks",
                "poID": 599,
                "poScale": "Wetland",
                "poLocationName": "Cardinia Creek Retarding Basin Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain the flood retention design capacity and function of the wetlands / with consideration of the biodiversity values and actions identified in the Melbourne Water Sites of Biodiversity Significance Management Plan.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 651,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 387,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 387,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Undertake monitoring to ensure that site stays within the limits of acceptable change as identified in the Ramsar Management Plan and in accordance with new requirements for monitoring / evaluation and reporting at Ramsar sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 652,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 388,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 388,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Identify opportunities for habitat creation and migration with the adjacent to Ramsar to mitigate habitat loss due to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 648,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 384,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 384,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 650,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 386,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 386,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Reduce invasive fauna threat (cats and foxes) to low focussing on orange-bellied parrot / shorebird and nesting bird habitats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 640,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 382,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 382,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to improve wetland area and habitat.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 649,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 385,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 385,
                "poScale": "Wetland",
                "poLocationName": "Cheetham Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 76,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 356,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 356,
                "poScale": "Wetland",
                "poLocationName": "Cherry Lake Cherry Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce threat of rabbits / dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 78,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 358,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 358,
                "poScale": "Wetland",
                "poLocationName": "Cherry Lake Cherry Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Ensure invasive wetland flora threat is low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 74,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 354,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 354,
                "poScale": "Wetland",
                "poLocationName": "Cherry Lake Cherry Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Minimise threat of acidification through appropriate works practices in acid sulfate soils.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 75,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 355,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 355,
                "poScale": "Wetland",
                "poLocationName": "Cherry Lake Cherry Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 77,
                "subCatchmentId_dupe": 7,
                "subCatchmentName": "Cherry Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 24353133.67,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 357,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Cherry Creek",
                "poID": 357,
                "poScale": "Wetland",
                "poLocationName": "Cherry Lake Cherry Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Protect high value saltmarsh and native grassland in lower Cherry Creek.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 522,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 914,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 914,
                "poScale": "Wetland",
                "poLocationName": "Cockatoo Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of deer and other invasive fauna to moderate / and reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 581,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 616,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 616,
                "poScale": "Wetland",
                "poLocationName": "Coolart Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat to birds from invasive fauna such as cats and foxes.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 583,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 618,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 618,
                "poScale": "Wetland",
                "poLocationName": "Coolart Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce invasive flora threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 582,
                "subCatchmentId_dupe": 47,
                "subCatchmentName": "Mornington Peninsula South-Eastern Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 203892141.3,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 617,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula South-Eastern Creeks",
                "poID": 617,
                "poScale": "Wetland",
                "poLocationName": "Coolart Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 per cent of wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 256,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 475,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 475,
                "poScale": "Wetland",
                "poLocationName": "Cunninghamâ€™s Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 244,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 473,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 473,
                "poScale": "Wetland",
                "poLocationName": "Cunninghamâ€™s Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve the wetland buffer to 100 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 253,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 471,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 471,
                "poScale": "Wetland",
                "poLocationName": "Cunninghamâ€™s Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Improve wetland connectivity and wetland area by linking Cunningham Swamp via conservation areas and or/open space to nearby Seasonal Herbaceous Wetlands and the Point Cook Coastal Park.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 139,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 105,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 105,
                "poScale": "Wetland",
                "poLocationName": "Dandenong Catchment stormwater treatment wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Maintain stormwater treatment systems",
                "poInvestment": "Maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain the stormwater treatment design intent of new and existing Stormwater wetlands within the Dandenong catchment.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "SWQTS",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 141,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 107,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 107,
                "poScale": "Wetland",
                "poLocationName": "Dandenong Catchment stormwater treatment wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Maintain stormwater treatment systems",
                "poInvestment": "Maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain the stormwater treatment design intent of the Boggy Creek stormwater wetland within the Dandenong catchment / whilst considering its formally recognised significance as an Important Bird Area.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "SWQTS",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 463,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 359,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 359,
                "poScale": "Wetland",
                "poLocationName": "Deanside Marsh Rockbank",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 455,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 360,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 360,
                "poScale": "Wetland",
                "poLocationName": "Deanside Marsh Rockbank",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 429,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 910,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 910,
                "poScale": "Wetland",
                "poLocationName": "Domain Chandon Billabongs",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 427,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 908,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 908,
                "poScale": "Wetland",
                "poLocationName": "Domain Chandon Billabongs",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify opportunities to improve the wetland habitat.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 428,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 909,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 909,
                "poScale": "Wetland",
                "poLocationName": "Domain Chandon Billabongs",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 720,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 894,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 894,
                "poScale": "Wetland",
                "poLocationName": "Donnybrook Road Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce threat from cats / dogs and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 730,
                "subCatchmentId_dupe": 66,
                "subCatchmentName": "Darebin Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 123679616,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 893,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Darebin Creek",
                "poID": 893,
                "poScale": "Wetland",
                "poLocationName": "Donnybrook Road Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 125,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 110,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 110,
                "poScale": "Wetland",
                "poLocationName": "Dwarf galaxias Conservation Wetland Cranbourne Road Narre Warren",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 144,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 113,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 113,
                "poScale": "Wetland",
                "poLocationName": "Dwarf galaxias habitat ponds - created along Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 370,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 115,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 115,
                "poScale": "Wetland",
                "poLocationName": "Eastern Treatment Plant",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat from invasive fauna to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 371,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 116,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 116,
                "poScale": "Wetland",
                "poLocationName": "Eastern Treatment Plant",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of wetland perimeter / where possible without interfering with operational requirements.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 97,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 117,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 117,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce the threat of foxes and domestic cats and dogs to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 100,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 120,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 120,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce the threat of salt tolerant weeds (e.g. spiny rush) to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 99,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 119,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 119,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Ensure acid sulfate soils disturbance is kept to a minimum and that if there is any disturbance appropriate management techniques are employed.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 98,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 118,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 118,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Implement priority actions from the Edithvale Seaford Ramsar Wetlands Site Management Plan / 2016",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 103,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 123,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 123,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Continue to implement Ramsar monitoring program in accordance with the new Guidelines for Ramsar site monitoring and evaluation to inform performance against the limits of acceptable change.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 102,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 122,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 122,
                "poScale": "Wetland",
                "poLocationName": "Edithvale Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Prepare the wetland buffer to include likely area of wetland migration and infill existing areas of the current wetland buffer with native vegetation.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 343,
                "subCatchmentId_dupe": 31,
                "subCatchmentName": "Jacksons Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 408020763.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 243,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Jacksons Creek",
                "poID": 243,
                "poScale": "Wetland",
                "poLocationName": "Gisborne Marshlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive flora threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 813,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 415,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 415,
                "poScale": "Wetland",
                "poLocationName": "Greens Rd E Wetland No. 2 (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive fauna to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 812,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 414,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 414,
                "poScale": "Wetland",
                "poLocationName": "Greens Rd E Wetland No. 2 (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 235,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 901,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 901,
                "poScale": "Wetland",
                "poLocationName": "Growling Grass Frog Reserve wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 128,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 126,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 126,
                "poScale": "Wetland",
                "poLocationName": "Hallam Valley Floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve floodplain / riparian and wetland buffers to cover 50 per cent of the perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 130,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 128,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 128,
                "poScale": "Wetland",
                "poLocationName": "Hallam Valley Floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 902,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 931,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 931,
                "poScale": "Wetland",
                "poLocationName": "Hays Paddock Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 404,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 896,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 896,
                "poScale": "Wetland",
                "poLocationName": "Hearnes Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Identify opportunities to improve the wetland habitat.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 405,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 897,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 897,
                "poScale": "Wetland",
                "poLocationName": "Hearnes Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 490,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 377,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 377,
                "poScale": "Wetland",
                "poLocationName": "Holden Road Wetlands Diggers Rest",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats / rabbits and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 491,
                "subCatchmentId_dupe": 41,
                "subCatchmentName": "Kororoit Creek Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 114122513.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 378,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Upper",
                "poID": 378,
                "poScale": "Wetland",
                "poLocationName": "Holden Road Wetlands Diggers Rest",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 300,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 247,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 247,
                "poScale": "Wetland",
                "poLocationName": "Jacana Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive fauna threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 301,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 248,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 248,
                "poScale": "Wetland",
                "poLocationName": "Jacana Wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer width and fill gaps in wetland buffer length.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 299,
                "subCatchmentId_dupe": 26,
                "subCatchmentName": "Moonee Ponds Creek",
                "catchmentId": 2,
                "catchmentName": "Maribyrnong",
                "areaSqm": 141589133,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 246,
                "catchmentName_dupe": "Maribyrnong",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Moonee Ponds Creek",
                "poID": 246,
                "poScale": "Wetland",
                "poLocationName": "Jacana Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Maintain stormwater treatment systems",
                "poInvestment": "Maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain stormwater treatment design intent of Jacana wetland / with consideration of growling grass frog community.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "SWQTS",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-maribyrnong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 466,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 363,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 363,
                "poScale": "Wetland",
                "poLocationName": "Jawbone Reserve",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 308,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 465,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 465,
                "poScale": "Wetland",
                "poLocationName": "Jenz Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 310,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 464,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 464,
                "poScale": "Wetland",
                "poLocationName": "Jenz Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 407,
                "subCatchmentId_dupe": 35,
                "subCatchmentName": "Merri Creek Upper",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 270224557.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 899,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Upper",
                "poID": 899,
                "poScale": "Wetland",
                "poLocationName": "Kalkallo Commons Grassland and Kalkallo Creek Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 467,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 364,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 364,
                "poScale": "Wetland",
                "poLocationName": "Kororoit Creek No. 3",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Undertake Index of index of wetland condition assessment and identify performance objectives after assessment.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 184,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 603,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 603,
                "poScale": "Wetland",
                "poLocationName": "Lang Lang floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve floodplain / riparian and wetland buffers to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 186,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 605,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 605,
                "poScale": "Wetland",
                "poLocationName": "Lang Lang floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 654,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 469,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 469,
                "poScale": "Wetland",
                "poLocationName": "Laverton RAAF Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of dogs / cats / rabbits and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 653,
                "subCatchmentId_dupe": 51,
                "subCatchmentName": "Skeleton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 121786284.7,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 468,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Skeleton Creek",
                "poID": 468,
                "poScale": "Wetland",
                "poLocationName": "Laverton RAAF Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Improve the wetland buffer to 100 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 541,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 904,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 904,
                "poScale": "Wetland",
                "poLocationName": "Lillydale Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Ensure flood mitigation design intent of lake is retained / whilst considering site biodiversity values including significant vegetation communities identified in site management plan.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 791,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 435,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 435,
                "poScale": "Wetland",
                "poLocationName": "Live Bomb Wetland (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of soil disturbance to the wetland to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 790,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 434,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 434,
                "poScale": "Wetland",
                "poLocationName": "Live Bomb Wetland (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 468,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 365,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 365,
                "poScale": "Wetland",
                "poLocationName": "Paynes Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats / rabbits and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 471,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 368,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 368,
                "poScale": "Wetland",
                "poLocationName": "Paynes Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Confirm threat to wetland from livestock access and reduce threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 469,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 366,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 366,
                "poScale": "Wetland",
                "poLocationName": "Paynes Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 781,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 426,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 426,
                "poScale": "Wetland",
                "poLocationName": "Balls Wetland Complex (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 783,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 427,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 427,
                "poScale": "Wetland",
                "poLocationName": "Balls Wetland Complex (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 787,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 431,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 431,
                "poScale": "Wetland",
                "poLocationName": "Cobbledicks Ford Reserve (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Undertake Index of index of wetland condition assessment and identify performance objectives after assessment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 788,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 432,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 432,
                "poScale": "Wetland",
                "poLocationName": "Cobbledicks Ford Reserve (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 789,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 433,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 433,
                "poScale": "Wetland",
                "poLocationName": "Cobbledicks Ford Reserve (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 792,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 436,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 436,
                "poScale": "Wetland",
                "poLocationName": "Live Bomb Wetland (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 793,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 437,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 437,
                "poScale": "Wetland",
                "poLocationName": "Live Bomb Wetland (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 794,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 444,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 444,
                "poScale": "Wetland",
                "poLocationName": "Target Range Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 795,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 445,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 445,
                "poScale": "Wetland",
                "poLocationName": "Target Range Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 257,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 476,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 476,
                "poScale": "Wetland",
                "poLocationName": "Point Cook Wetlands - RAAF Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 258,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 477,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 477,
                "poScale": "Wetland",
                "poLocationName": "Point Cook Wetlands - RAAF Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive fauna threat (cats / foxes and rabbits) to low focussing on orange-bellied parrot / shorebird and nesting bird habitats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 259,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 478,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 478,
                "poScale": "Wetland",
                "poLocationName": "Point Cook Wetlands - RAAF Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 815,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 417,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 417,
                "poScale": "Wetland",
                "poLocationName": "Greens Rd E Wetland No. 2 (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 816,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 418,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 418,
                "poScale": "Wetland",
                "poLocationName": "Greens Rd E Wetland No. 2 (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 817,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 419,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 419,
                "poScale": "Wetland",
                "poLocationName": "West Quandong Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 818,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 420,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 420,
                "poScale": "Wetland",
                "poLocationName": "West Quandong Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 824,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 441,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 441,
                "poScale": "Wetland",
                "poLocationName": "Rabbitters Lake and Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 825,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 442,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 442,
                "poScale": "Wetland",
                "poLocationName": "Rabbitters Lake and Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 835,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 393,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 393,
                "poScale": "Wetland",
                "poLocationName": "Baths Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 838,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 396,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 396,
                "poScale": "Wetland",
                "poLocationName": "Black Forest Rd Wetland (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Undertake index of wetland condition assessment and identify performance objectives after assessment.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 842,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 400,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 400,
                "poScale": "Wetland",
                "poLocationName": "Richmonds Grass Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Implement the Western Grassland Reserves adaptive management regime.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 843,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 401,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 401,
                "poScale": "Wetland",
                "poLocationName": "Richmonds Grass Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Incorporate wetland into the Western Grassland Reserve.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Externally delivered",
                "mwInitTeam": "Externally delivered",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 261,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 480,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 480,
                "poScale": "Wetland",
                "poLocationName": "Point Cook Wetlands - Spectacle Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 262,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 481,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 481,
                "poScale": "Wetland",
                "poLocationName": "Point Cook Wetlands - Spectacle Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 821,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 438,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 438,
                "poScale": "Wetland",
                "poLocationName": "Rabbitters Lake and Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 826,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 443,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 443,
                "poScale": "Wetland",
                "poLocationName": "Rabbitters Lake and Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Reduce livestock access threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 822,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 439,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 439,
                "poScale": "Wetland",
                "poLocationName": "Rabbitters Lake and Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 840,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 398,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 398,
                "poScale": "Wetland",
                "poLocationName": "Richmonds Grass Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 841,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 399,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 399,
                "poScale": "Wetland",
                "poLocationName": "Richmonds Grass Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 472,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 369,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 369,
                "poScale": "Wetland",
                "poLocationName": "Rockbank No. 1",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Undertake Index of index of wetland condition assessment and identify performance objectives after assessment.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 474,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 371,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 371,
                "poScale": "Wetland",
                "poLocationName": "Rockbank Railway Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Undertake Index of index of wetland condition assessment and identify performance objectives after assessment.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 314,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 467,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 467,
                "poScale": "Wetland",
                "poLocationName": "Rolling Thunder Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 126,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 124,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 124,
                "poScale": "Wetland",
                "poLocationName": "Hallam Valley Floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect / improve and/or create wetland habitat along the Hallam Valley floodplain for birds / frogs and fish including the listed dwarf galaxias. This may include securing land for habitat creation.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 154,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 153,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 153,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify opportunities to re-engage the natural wetland area.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 182,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 601,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 601,
                "poScale": "Wetland",
                "poLocationName": "Lang Lang floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect / improve and/or create wetland habitat along the Lang Lang River floodplain for birds / frogs (ngarret) and fish (tuat) including the listed dwarf galaxias.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 212,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 595,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 595,
                "poScale": "Wetland",
                "poLocationName": "Yallock Creek floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Re-engage floodplains",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Protect / improve and/or create wetland habitat along the Yallock Creek floodplain for birds / frogs and fish.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 124,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 109,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 109,
                "poScale": "Wetland",
                "poLocationName": "Dwarf galaxias Conservation Wetland Cranbourne Road Narre Warren",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Monitor threat levels from invasive fish species on dwarf galaxias and Yarra pygmy perch and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 129,
                "subCatchmentId_dupe": 10,
                "subCatchmentName": "Eumemmerring Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 222487037.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 127,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Eumemmerring Creek",
                "poID": 127,
                "poScale": "Wetland",
                "poLocationName": "Hallam Valley Floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Monitor threat levels from invasive fish species on dwarf galaxias and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 143,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 112,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 112,
                "poScale": "Wetland",
                "poLocationName": "Dwarf galaxias habitat ponds - created along Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Monitor threat levels from invasive fish species on dwarf galaxias and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 149,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 147,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 147,
                "poScale": "Wetland",
                "poLocationName": "Tirhatuan Wetlands Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Monitor threat levels from invasive fish species on dwarf galaxias and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 156,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 155,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 155,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Monitor threat levels from invasive fish species on dwarf galaxias and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 185,
                "subCatchmentId_dupe": 15,
                "subCatchmentName": "Lang Lang River",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 543495348.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 604,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Lang Lang River",
                "poID": 604,
                "poScale": "Wetland",
                "poLocationName": "Lang Lang floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Monitor threat levels from invasive fish (tuat) species on dwarf galaxias and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 214,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 597,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 597,
                "poScale": "Wetland",
                "poLocationName": "Yallock Creek floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Monitor threat levels from invasive species on growling grass frogs and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 383,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 140,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 140,
                "poScale": "Wetland",
                "poLocationName": "Tamarisk Waterway Reserve Langwarrin",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Pests",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Monitor threat levels from invasive fish species on dwarf galaxias and mitigate risks if required.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Water Services Planning",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Water Services Planning",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Water for Environment",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 26,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 610,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 610,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Implement stormwater management activities in the Westernport Catchment as identified (Refer Westernport sub-catchment summaries).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 234,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 900,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 900,
                "poScale": "Wetland",
                "poLocationName": "Growling Grass Frog Reserve wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Implement urban stormwater treatment measures in the catchment to reduce the threat of poor water quality in the Growling Grass Frog Reserve wetlands.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 431,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 912,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 912,
                "poScale": "Wetland",
                "poLocationName": "Domain Chandon Billabongs",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Implement urban stormwater improvements upstream to reduce water quality threat to wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 531,
                "subCatchmentId_dupe": 44,
                "subCatchmentName": "Mullum Mullum Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 43547992.76,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 903,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Mullum Mullum Creek",
                "poID": 903,
                "poScale": "Wetland",
                "poLocationName": "Ringwood Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Implement urban stormwater treatment measures in the catchment to reduce the threat of poor water quality in Ringwood Lake.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 542,
                "subCatchmentId_dupe": 45,
                "subCatchmentName": "Olinda Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 80221823.75,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 905,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Olinda Creek",
                "poID": 905,
                "poScale": "Wetland",
                "poLocationName": "Lillydale Lake",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Implement urban stormwater treatment measures in the catchment to reduce the threat of poor water quality in Lillydale Lake.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 904,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 933,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 933,
                "poScale": "Wetland",
                "poLocationName": "Westgate Park Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Implement urban stormwater improvements upstream to reduce water quality threat to wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 907,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 936,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 936,
                "poScale": "Wetland",
                "poLocationName": "Willsmere Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Implement urban stormwater treatment measures",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Implement urban stormwater improvements upstream to reduce water quality threat to wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 309,
                "subCatchmentId_dupe": 28,
                "subCatchmentName": "Parwan Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 202681470.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 466,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Parwan Creek",
                "poID": 466,
                "poScale": "Wetland",
                "poLocationName": "Rolling Thunder Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 372,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 129,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 129,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce the threat of rabbits / foxes / pigs and domestic cats and dogs to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 378,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 135,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 135,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Reduce the threat of salt tolerant weeds (e.g. spiny rush) to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 377,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 134,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 134,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Ensure acid sulfate soils disturbance is kept to a minimum and that is there is any disturbance appropriate management techniques are employed.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 373,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 130,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 130,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Continue to implement Ramsar monitoring program in accordance with the new Guidelines for Ramsar site monitoring and evaluation to inform performance against the limits of acceptable change.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 374,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 131,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 131,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Implement priority actions from the Edithvale Seaford Ramsar Wetlands Site Management Plan / 2016.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 140,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 106,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 106,
                "poScale": "Wetland",
                "poLocationName": "Dandenong Catchment stormwater treatment wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Implement opportunities to enhance social and environmental values of Stormwater wetland sites through the Living Links program.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 254,
                "subCatchmentId_dupe": 22,
                "subCatchmentName": "Werribee River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 248743796.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 472,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Werribee River Lower",
                "poID": 472,
                "poScale": "Wetland",
                "poLocationName": "Cunninghamâ€™s Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Ensure appropriate planning controls are in place (e.g. Environmental Significance Overlay).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Catchment and Water Quality",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 473,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 370,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 370,
                "poScale": "Wetland",
                "poLocationName": "Rockbank No. 1",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Ensure appropriate planning controls are in place (e.g. Environmental Significance Overlay) to protect Seasonally Herbaceous Wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Catchment and Water Quality",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 475,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 372,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 372,
                "poScale": "Wetland",
                "poLocationName": "Rockbank Railway Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Ensure appropriate planning controls are in place (e.g. Environmental Significance Overlay) to protect Seasonally Herbaceous Wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Catchment and Water Quality",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 803,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 459,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 459,
                "poScale": "Wetland",
                "poLocationName": "Wyndham Vale Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Stormwater foundational actions",
                "poInvestment": "Research/ strategic direction/ influence/advocacy",
                "poNumber": "PO-01",
                "poDescription": "Ensure appropriate planning controls are in place (e.g. Environmental Significance Overlay) to protect Seasonally Herbaceous Wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning",
                "mwInitTeam": "Catchment and Water Quality",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 376,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 133,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 133,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Incorporate the Downs Estate in the Ramsar Site Boundary.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 375,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 132,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 132,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Scope and prepare for the migration of wetland values to the wetland buffer zone on public land at Downs Estate to the North East of the current site.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 380,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 137,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 137,
                "poScale": "Wetland",
                "poLocationName": "Seaford Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Prepare the wetland buffer to include likely area of wetland migration and infill existing areas of the current wetland buffer.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 684,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 944,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 944,
                "poScale": "Wetland",
                "poLocationName": "Spadonis Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 683,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 943,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 943,
                "poScale": "Wetland",
                "poLocationName": "Spadonis Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 236,
                "subCatchmentId_dupe": 21,
                "subCatchmentName": "Merri Creek Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 121722130.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 906,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Merri Creek Lower",
                "poID": 906,
                "poScale": "Wetland",
                "poLocationName": "Stormwater wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Maintain stormwater treatment systems",
                "poInvestment": "Maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain the design intent of stormwater wetlands in the Yarra catchment / to ensure that nutrients and sediment are captured / whilst considering significant biodiversity values at the site.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "SWQTS",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 384,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 141,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 141,
                "poScale": "Wetland",
                "poLocationName": "Tamarisk Waterway Reserve Langwarrin",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Reduce threat from foxes / and domestic cats and dogs.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 385,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 142,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 142,
                "poScale": "Wetland",
                "poLocationName": "Tamarisk Waterway Reserve Langwarrin",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Improve wetland buffer to 50 per cent of wetland permitter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 381,
                "subCatchmentId_dupe": 34,
                "subCatchmentName": "Kananook Creek",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 100198102.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 138,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Kananook Creek",
                "poID": 138,
                "poScale": "Wetland",
                "poLocationName": "Tamarisk Waterway Reserve Langwarrin",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 610,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 620,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 620,
                "poScale": "Wetland",
                "poLocationName": "The Briars Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 percent of wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 845,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 403,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 403,
                "poScale": "Wetland",
                "poLocationName": "The Spit Nature Conservation Reserve",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 846,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 404,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 404,
                "poScale": "Wetland",
                "poLocationName": "The Spit Nature Conservation Reserve",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce invasive fauna threat (cats and foxes) to low focussing on orange-bellied parrot / shorebird and nesting bird habitats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 847,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 405,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 405,
                "poScale": "Wetland",
                "poLocationName": "The Spit Nature Conservation Reserve",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Undertake monitoring to ensure that site stays within the limits of acceptable change as identified in the Ramsar Management Plan and in accordance with new requirements for monitoring / evaluation and reporting at Ramsar sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 848,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 406,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 406,
                "poScale": "Wetland",
                "poLocationName": "The Spit Nature Conservation Reserve",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify and assess management options for addressing risk to coastal habitat from sea level rise and increasing coastal storm surge.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 849,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 407,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 407,
                "poScale": "Wetland",
                "poLocationName": "The Spit Nature Conservation Reserve",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Identify opportunities for habitat creation and migration with the adjacent to Ramsar to mitigate habitat loss due to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 844,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 402,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 402,
                "poScale": "Wetland",
                "poLocationName": "The Spit Nature Conservation Reserve",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 150,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 148,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 148,
                "poScale": "Wetland",
                "poLocationName": "Tirhatuan Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Reduce the threat of dogs / foxes and cats to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 145,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 143,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 143,
                "poScale": "Wetland",
                "poLocationName": "Tirhatuan Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate opportunities to increase the wetland area for environmental values / while maintaining existing social values.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 146,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 144,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 144,
                "poScale": "Wetland",
                "poLocationName": "Tirhatuan Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve the wetland buffer to cover 50% of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 148,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 146,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 146,
                "poScale": "Wetland",
                "poLocationName": "Tirhatuan Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 612,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 622,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 622,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce threat from weeds to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 616,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 626,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 626,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-06",
                "poDescription": "Reduce threat from invasive fauna to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 613,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 623,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 623,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Identify opportunities for habitat creation and migration to mitigate habitat loss due to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 617,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 627,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 627,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Improve wetland buffer to 100 per cent of wetland.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 478,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 375,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 375,
                "poScale": "Wetland",
                "poLocationName": "Troups Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 476,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 373,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 373,
                "poScale": "Wetland",
                "poLocationName": "Troups Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Investigate and implement measures to reduce soil disturbance to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 477,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 374,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 374,
                "poScale": "Wetland",
                "poLocationName": "Troups Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 479,
                "subCatchmentId_dupe": 40,
                "subCatchmentName": "Kororoit Creek Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 184492412.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 376,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Kororoit Creek Lower",
                "poID": 376,
                "poScale": "Wetland",
                "poLocationName": "Troups Rd Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Investigate opportunities to improve wetland area and habitat.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 499,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 389,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 389,
                "poScale": "Wetland",
                "poLocationName": "Truganina Swamp Laverton Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 500,
                "subCatchmentId_dupe": 42,
                "subCatchmentName": "Laverton Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 66705969.55,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 390,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Laverton Creek",
                "poID": 390,
                "poScale": "Wetland",
                "poLocationName": "Truganina Swamp Laverton Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Increase wetland buffer to 25 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 104,
                "subCatchmentId_dupe": 9,
                "subCatchmentName": "Dandenong Creek Lower",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 181786012.9,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 149,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Lower",
                "poID": 149,
                "poScale": "Wetland",
                "poLocationName": "Wannarkladdin Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Stormwater",
                "poTheme": "Maintain stormwater treatment systems",
                "poInvestment": "Maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Maintain the stormwater treatment design intent of the Wannarkladdin Wetlands / with consideration of the cultural and biodiversity values and actions identified in the Melbourne Water Sites of Biodiversity Significance Management Plan.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Asset Management Services / Waterways and Land",
                "mwInitTeam": "Catchment Asset Management / Regional Services",
                "mwAccountability": "Full",
                "mwCodeliveryLevel": 1,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "SWQTS",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 819,
                "subCatchmentId_dupe": 73,
                "subCatchmentName": "Little River Upper",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 379252123.1,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 421,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Upper",
                "poID": 421,
                "poScale": "Wetland",
                "poLocationName": "West Quandong Swamp (Western Grassland Reserve)",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "N/A - externally delivered program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 28,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 612,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 612,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 30,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 614,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 614,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-09",
                "poDescription": "Reduce invasive fauna threat (cat / fox / rat / dog / pig) to low in priority waterbird roosting and nesting sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 31,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 615,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 615,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-10",
                "poDescription": "Reduce rabbit threat to salt marsh community to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 22,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 606,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 606,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Ensure that risks to environmental values are considered through a strategic approach to the management and future adaptation of the existing shoreline protection works.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 23,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 607,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 607,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Undertake monitoring to ensure that site stays within the limits of acceptable change as identified in the Ramsar Management Plan and in accordance with new requirements for monitoring / evaluation and reporting at Ramsar sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 24,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 608,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 608,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Identify opportunities and risks for habitat creation and migration of environmental values in land adjacent to the Ramsar boundary to mitigate habitat loss due to climate change risks (as per Western Port Local Coastal Hazard Assessment).",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 29,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 613,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 613,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-08",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter / including areas adjacent to the Ramsar boundary.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 797,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 447,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 447,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Paul & Belfrages Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 798,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 448,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 448,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Paul & Belfrages Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive fauna threat (cats and foxes) to low focussing on orange-bellied parrot / shorebird and nesting bird habitats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 799,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 449,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 449,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Paul & Belfrages Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Undertake monitoring to ensure that site stays within the limits of acceptable change as identified in the Ramsar Management Plan and in accordance with new requirements for monitoring / evaluation and reporting at Ramsar sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 800,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 450,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 450,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Paul & Belfrages Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify and assess management options for addressing risk to coastal habitat from sea level rise and increasing coastal storm surge",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 801,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 451,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 451,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Paul & Belfrages Wetland",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify opportunities for habitat creation and migration with the adjacent to Ramsar to mitigate habitat loss due to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 856,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 453,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 453,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ponds",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 857,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 454,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 454,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ponds",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive fauna threat (cats and foxes) to low focussing on orange-bellied parrot / shorebird and nesting bird habitats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 858,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 455,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 455,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ponds",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Undertake monitoring to ensure that site stays within the limits of acceptable change as identified in the Ramsar Management Plan and in accordance with new requirements for monitoring / evaluation and reporting at Ramsar sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 859,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 456,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 456,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ponds",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify and assess management options for addressing risk to coastal habitat from sea level rise and increasing coastal storm surge.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 860,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 457,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 457,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ponds",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify opportunities for habitat creation and migration with the adjacent to Ramsar to mitigate habitat loss due to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 850,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 408,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 408,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ryans Swamp",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce invasive flora threat to low focussing on salt tolerant weeds in saltmarsh communities.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 851,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 409,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 409,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ryans Swamp",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Reduce invasive fauna threat (cats and foxes) to low focussing on orange-bellied parrot / shorebird and nesting bird habitats.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 852,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 410,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 410,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ryans Swamp",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Undertake monitoring to ensure that site stays within the limits of acceptable change as identified in the Ramsar Management Plan and in accordance with new requirements for monitoring / evaluation and reporting at Ramsar sites.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 853,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 411,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 411,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ryans Swamp",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Identify and assess management options for addressing risk to coastal habitat from sea level rise and increasing coastal storm surge.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 854,
                "subCatchmentId_dupe": 74,
                "subCatchmentName": "Little River Lower",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 155763504,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 412,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Little River Lower",
                "poID": 412,
                "poScale": "Wetland",
                "poLocationName": "Western Treatment Plant - Ryans Swamp",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Protect specific values and habitat",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Identify opportunities for habitat creation and migration with the adjacent to Ramsar to mitigate habitat loss due to climate change risks.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 905,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 934,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 934,
                "poScale": "Wetland",
                "poLocationName": "Westgate Park Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 903,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 932,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 932,
                "poScale": "Wetland",
                "poLocationName": "Westgate Park Wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 894,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 939,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 939,
                "poScale": "Wetland",
                "poLocationName": "Willsmere Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 878,
                "subCatchmentId_dupe": 76,
                "subCatchmentName": "Yarra River Lower",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 199930959.6,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 938,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Lower",
                "poID": 938,
                "poScale": "Wetland",
                "poLocationName": "Willsmere Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 151,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 150,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 150,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-01",
                "poDescription": "Reduce invasive weed threat to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 153,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 152,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 152,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Improve the wetland buffer to cover 50% of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 157,
                "subCatchmentId_dupe": 11,
                "subCatchmentName": "Dandenong Creek Middle",
                "catchmentId": 1,
                "catchmentName": "Dandenong",
                "areaSqm": 132733962.2,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 156,
                "catchmentName_dupe": "Dandenong",
                "catchmentID_dupe": 1,
                "subCatchmentID_dupe": "Dandenong Creek Middle",
                "poID": 156,
                "poScale": "Wetland",
                "poLocationName": "Winton Wetlands Dandenong Creek",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Protect / maintain or improve vegetation quality",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-07",
                "poDescription": "Ensure appropriate aquatic macrophyte habitat is protected in the habitat ponds.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-dandenong-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 805,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 461,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 461,
                "poScale": "Wetland",
                "poLocationName": "Wyndham Vale Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce threat of dogs / cats and foxes to moderate.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 771,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 463,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 463,
                "poScale": "Wetland",
                "poLocationName": "Wyndham Vale Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Mitigate threat of soil disturbance",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Reduce soil disturbance threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 782,
                "subCatchmentId_dupe": 72,
                "subCatchmentName": "Lollypop Creek",
                "catchmentId": 3,
                "catchmentName": "Werribee",
                "areaSqm": 171445071.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 462,
                "catchmentName_dupe": "Werribee",
                "catchmentID_dupe": 2,
                "subCatchmentID_dupe": "Lollypop Creek",
                "poID": 462,
                "poScale": "Wetland",
                "poLocationName": "Wyndham Vale Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Increase wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 2,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-werribee-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 213,
                "subCatchmentId_dupe": 19,
                "subCatchmentName": "Bunyip Lower",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 390452533.4,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 596,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Bunyip Lower",
                "poID": 596,
                "poScale": "Wetland",
                "poLocationName": "Yallock Creek floodplain wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve floodplain / riparian and wetland buffers to cover 50 per cent of the perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 434,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 947,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 947,
                "poScale": "Wetland",
                "poLocationName": "Yarra Bridge Stream Side Reserve",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Maintain threat from carp at low following watering events.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 436,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 949,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 949,
                "poScale": "Wetland",
                "poLocationName": "Yarra Bridge Stream Side Reserve",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-05",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 435,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 948,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 948,
                "poScale": "Wetland",
                "poLocationName": "Yarra Bridge Stream Side Reserve",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-04",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Natural Wetlands Management",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 439,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 952,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 952,
                "poScale": "Wetland",
                "poLocationName": "Yering Backswamp Yarra River",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Habitat",
                "poTheme": "Manage pests",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-03",
                "poDescription": "Reduce weed threat to low.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 438,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 951,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 951,
                "poScale": "Wetland",
                "poLocationName": "Yering Backswamp Yarra River",
                "poSobsYN": "Y",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Vegetation",
                "poTheme": "Increase Vegetation Extent",
                "poInvestment": "Capital investment/ maintenance and operations",
                "poNumber": "PO-02",
                "poDescription": "Improve wetland buffer to 50 per cent of the wetland perimeter.",
                "mwOwner": "Asset Management Services",
                "mwTeam": "Catchment Asset Management",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Sites of Biodiversity Significance",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 433,
                "subCatchmentId_dupe": 37,
                "subCatchmentName": "Yarra River Upper (Rural)",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 352489899.9,
                "lastUpdate": 1530057600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 946,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Yarra River Upper (Rural)",
                "poID": 946,
                "poScale": "Wetland",
                "poLocationName": "Yarra Bridge Stream Side Reserve",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Implement urban stormwater and rural land management improvements upstream to reduce water quality threat to wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 682,
                "subCatchmentId_dupe": 56,
                "subCatchmentName": "Stringybark Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 77489343.71,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 942,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Stringybark Creek",
                "poID": 942,
                "poScale": "Wetland",
                "poLocationName": "Spadonis Billabong",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Address urban diffuse sources of WQ impact",
                "poInvestment": "Maintenance and operations (testing)/ enforcement/ influence/advocacy",
                "poNumber": "PO-02",
                "poDescription": "Implement urban stormwater and rural land management improvements upstream to reduce water quality threat to wetland.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Integrated Planning / Waterways and Land",
                "mwInitTeam": "Catchment and Water Quality / Development Services / Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Stormwater management",
                "hwsWDIP_P": "TBD",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 27,
                "subCatchmentId_dupe": 4,
                "subCatchmentName": "Dalmore Outfalls",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 218309258.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 611,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Dalmore Outfalls",
                "poID": 611,
                "poScale": "Wetland",
                "poLocationName": "Western Port coastal wetlands",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-06",
                "poDescription": "Implement rural land management program to reduce nutrient and sediment inflow to the wetlands as identified for each sub-catchment (Refer Westernport sub-catchment summaries).",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 523,
                "subCatchmentId_dupe": 43,
                "subCatchmentName": "Woori Yallock Creek",
                "catchmentId": 5,
                "catchmentName": "Yarra",
                "areaSqm": 370074331.5,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 915,
                "catchmentName_dupe": "Yarra",
                "catchmentID_dupe": 5,
                "subCatchmentID_dupe": "Woori Yallock Creek",
                "poID": 915,
                "poScale": "Wetland",
                "poLocationName": "Cockatoo Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-03",
                "poDescription": "Reduce nutrient threat through improved rural land management.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-yarra-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            },
            {
                "objectId": 615,
                "subCatchmentId_dupe": 48,
                "subCatchmentName": "Mornington Peninsula Western Creeks",
                "catchmentId": 4,
                "catchmentName": "Westernport",
                "areaSqm": 370192790.6,
                "lastUpdate": 1513209600000,
                "regionID": 1,
                "regionName": "Regional",
                "RFFI": 625,
                "catchmentName_dupe": "Westernport",
                "catchmentID_dupe": 4,
                "subCatchmentID_dupe": "Mornington Peninsula Western Creeks",
                "poID": 625,
                "poScale": "Wetland",
                "poLocationName": "Tootgarook Swamp",
                "poSobsYN": "",
                "wetlandsID": 0,
                "estuaryID": 0,
                "poGroup": "Water quality",
                "poTheme": "Improve water quality from agricultural land practices",
                "poInvestment": "Incentives/ education/ partnerships/ influence/advocacy",
                "poNumber": "PO-05",
                "poDescription": "Mitigate and minimise water quality threat from nutrient input from surrounding land uses through best practice land management and planning controls.",
                "mwOwner": "Integrated Planning",
                "mwTeam": "Catchment and Water Quality",
                "mwBusGroup": "Waterways and Land",
                "mwInitTeam": "Regional Services",
                "mwAccountability": "Shared",
                "mwCodeliveryLevel": 3,
                "hwsWDIP_S": "Healthy waterways",
                "hwsWDIP_P": "Rural Land Program",
                "hwsWebLink": "https://healthywaterways.com.au/",
                "hwsWebCoDeliveryLink": "https://healthywaterways.com.au/docs/healthy-waterways-westernport-mornington-peninsula-co-designed-catchment-program.pdf",
                "hwsWebDocLink": "https://healthywaterways.com.au/docs/healthy-waterways-strategy-2018.pdf"
            }
        ]
    }; 

    const hwsSchema = {
        defs: {
            keyValues:          `Key values are easily recognised as being part of what we appreciate about waterways and are representative of a broader range of environmental, cultural, social and economic values that we care about.`,
            conditions:         `Waterway condition refers to the state of the processes that underpin waterway health and support the key values.`,
            broadValues: {
                Environmental:  `Environmentally, waterways provide habitat for plants and animals and are critically important in sustaining much of our region’s biodiversity.`,
                Social:         `Socially, waterways are important for our wellbeing. They provide places to escape the busy urban landscape, to bird watch, to fish for food, to actively commute, to meet friends and family, to exercise and connect with nature. They provide cool and shady spaces during hot weather, and water for swimming and boating.`,
                Cultural:       `Culturally, waterways are places of memories, ancestral and spiritual connection, and connection to country.`,
                Economic:       `Economically, waterways provide benefits through provision of drinking water to towns and cities, water for livestock and irrigation for crops and pleasant places for travel, tourism, hospitality purposes and boat mooring.`      
            },
        },
        keyValues: {
            "Birds": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Birds.jpg"
            },
            "Frogs": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Frogs.jpg"
            },
            "Platypus": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Platypus.jpg"
            },
            "Macroinvertebrates": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Macroinvertebrates.jpg"
            },
            "Fish": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Fish.jpg"
            },
            "Vegetation": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Vegetation_1.jpg"
            },
            "Amenity": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-05/hws-key-values-Amenity.jpg"
            },
            "Community connection": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Community-connection.jpg"
            },
            "Recreation": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Recreation.jpg"
            },
            "Cultural": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Cultural_0.jpg"
            },
            "Economic": {
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-key-values-Economic_0.jpg"
            }
        },

        conditions: {
            "Vegetation":{
                valuesEnviro: [
                    "Macroinvertebrates",
                    "Fish",
                    "Frogs",
                    "Birds",
                    "Platypus",
                    "Vegetation"
                ],
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Vegetation.jpg"
            },
            "Water quality":{
                valuesEnviro: [
                    "Macroinvertebrates",
                    "Fish",
                    "Frogs",
                    "Birds",
                    "Platypus",
                    "Vegetation"
                ],
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-05/hws-waterway-conditions-Water-quality.jpg"
            },
            "Water for the environment":{
                valuesEnviro: [
                    "Macroinvertebrates",
                    "Fish",
                    "Frogs",
                    "Birds",
                    "Platypus",
                    "Vegetation"
                ],
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-water-for-environment.jpg"
            },
            "Stormwater":{
                valuesEnviro: [
                    "Macroinvertebrates",
                    "Fish",
                    "Frogs",
                    "Birds",
                    "Platypus",
                    "Vegetation"
                ],
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:   "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Stormwater.jpg"
            },
            "Habitat":{
                valuesEnviro: [
                    "Macroinvertebrates",
                    "Fish",
                    "Frogs",
                    "Birds",
                    "Platypus",
                    "Vegetation"
                ],
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Habitat.jpg"
            },
            "Recreational water quality":{
                valuesEnviro:      null,
                valuesHuman: [
                    "Recreation",
                    "Community connection",
                ],
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Recreational-water-quality.jpg"
            },

            "Access":{
                valuesEnviro:      null,
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:     "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Access.jpg"
            },

            "Litter":{
                valuesEnviro:      null,
                valuesHuman: [
                    "Amenity",
                    "Recreation",
                    "Community connection",
                ],
                imgURL:       "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Litter.jpg"
            },

            "Participation":{
                valuesEnviro:      null,
                valuesHuman: [
                    "Recreation",
                    "Community connection",
                ],
                imgURL:       "https://mwrcstorage.blob.core.windows.net/files/2021-03/hws-waterway-conditions-Partiicpation.jpg"
            },
        },

        performanceObjectives:{
            "Adaptive management and research": {
                themes: [
                    "Responding to Climate Change",
                    "Knowledge Gaps and Research"
                ]
            },
            "Collaborative governance": {
                themes: [
                    "Reporting",
                    "Supporting governance framework"
                ]
            },
            "Community places": {
                themes: [
                    "Responding to Climate Change",
                    "Knowledge Gaps and Research"
                ]
            },
            "Cultural": {
                themes: [
                    "Cultural Values"
                ]
            },
            "Economic": {
                themes: [
                    "Economic Values"
                ]
            },
            "Engaged communities": {
                themes: [
                    "Engaged and Knowledgeable Community and Stakeholders",
                    "Increase participation rates around rivers wetlands and estuaries",
                ]
            },
            "Flow regimes": {
                themes: [
                    "Increase environmental water reserve in regulated systems",
                    "Maintain or improve flow regimes in unregulated systems",
                    "Responding to Climate Change",
                    "Protect specific values and habitat"
                ]
            },
            "Habitat": {
                themes: [
                    "Improve / increase connectivity for fish passage",
                    "Manage pests",
                    "Mitigate threat of soil disturbance",
                    "Mitigate threats to physical form",
                    "Protect specific values and habitat",
                    "Re-engage floodplains",
                    "Translocate species",


                ]
            },
            "Stormwater": {
                themes: [
                    "Infiltrating and harvesting stormwater",
                    "Maintain stormwater treatment systems",
                    "Implement urban stormwater treatment measures",
                    "Stormwater foundational actions",
                    "Reduce sedimentation from run-off associated with construction for urban development"
                ]
            },
            "Vegetation": {
                themes: [
                    "Increase Vegetation Extent",
                    "Protect / maintain or improve vegetation quality",
                    "Vegetation Management"
                ]
            },
            "Water quality": {
                themes: [
                    "Improve water quality from agricultural land practices",
                    "Reporting",
                    "Maintain / protect recreational water quality",
                    "Maintain or improve quality of Sewerage Treatment Plant discharges",
                    "Address urban diffuse sources of water quality impact",
                    "Understanding and risk based programs"
                ]
            },
        }

    };

    const projectSchema =  {
        orgType: [
            'Riverkeeper', 
            'Community group', 
            'Traditional owners groups', 
            'Local Government', 
            'State Government',  
            'Federal Government', 
            'Peak bodies', 
            'Water retailers', 
            'Water corpration', 
            'Research association or institution', 
            'Other insutitions and landowners', 
            'Private development organisations'
        ],
        stage: [
            'Idea', 
            'Concept', 
            'Research', 
            'Pre-feasibility', 
            'Feasibility', 
            'In development', 
            'Completed'
        ],
        class: [
            'Research', 
            'Funding and facilitation', 
            'Policy', 
            'Capital works'
        ],
        initiativeType:  [
            'Improved planning controls',
            'Advocacy',
            'Enforcement',
            'Research and monitoring',
            'Knowledge-sharing',
            'Vegetation and habitat management',
            'Asset protection and renewal',
            'Integrated stormwater management',
            'Environmental water and diversions management'
        ],
        size: [
            'Small', 
            'Medium', 
            'Large'
        ],
        scale: [
            'Sub-catchment', 
            'Catchment', 
            'Multiple catchments'
        ],
    };

    ({
        subCatch_catch: group(hwsData.table, 
            d => d.subCatchmentName,
            d => d.catchmentName 
        ),
        loc_subCatch:  group(hwsData.table, 
            d => d.poLocationName,
            d => d.subCatchmentName
        )
    });

    const locationTree = group(hwsData.table, 
        d => d.catchmentName,
        d => d.subCatchmentName,
        d => d.poLocationName
    );

    /// Mapping objects for loction and subCatchement
    const subCatchmentMap = {
        "Bass River": "Westernport",
        "Boyd Creek": "Maribyrnong",
        "Bunyip Lower": "Westernport",
        "Bunyip River Middle and Upper": "Westernport",
        "Cardinia, Toomuc, Deep and Ararat Creeks": "Westernport",
        "Cherry Creek": "Werribee",
        "Corhanwarrabul, Monbulk and Ferny Creeks": "Dandenong",
        "Dalmore Outfalls": "Westernport",
        "Dandenong Creek Lower": "Dandenong",
        "Dandenong Creek Middle": "Dandenong",
        "Darebin Creek": "Yarra",
        "Deep Creek Lower": "Maribyrnong",
        "Deep Creek Upper": "Maribyrnong",
        "Diamond Creek (Rural)": "Yarra",
        "Emu Creek": "Maribyrnong",
        "Eumemmerring Creek": "Dandenong",
        "French and Phillip Islands": "Westernport",
        "Jacksons Creek": "Maribyrnong",
        "Kananook Creek": "Dandenong",
        "Kororoit Creek Lower": "Werribee",
        "Kororoit Creek Upper": "Werribee",
        "Lang Lang River": "Westernport",
        "Laverton Creek": "Werribee",
        "Little River Lower": "Werribee",
        "Little River Upper": "Werribee",
        "Lollypop Creek": "Werribee",
        "Maribyrnong River": "Maribyrnong",
        "Merri Creek Upper": "Yarra",
        "Moonee Ponds Creek": "Maribyrnong",
        "Mornington Peninsula North-Eastern Creeks": "Westernport",
        "Mornington Peninsula South-Eastern Creeks": "Westernport",
        "Mornington Peninsula Western Creeks": "Westernport",
        "Mullum Mullum Creek": "Yarra",
        "Olinda Creek": "Yarra",
        "Parwan Creek": "Werribee",
        "Plenty River Lower": "Yarra",
        "Plenty River Upper": "Yarra",
        "Regional - All Catchments": "Regional",
        "Skeleton Creek": "Werribee",
        "Steels and Pauls Creek (Rural)": "Yarra",
        "Stringybark Creek": "Yarra",
        "Tarago River": "Westernport",
        "Toolern Creek": "Werribee",
        "Watts River (Source)": "Yarra",
        "Werribee River Lower": "Werribee",
        "Werribee River Middle": "Werribee",
        "Woori Yallock Creek": "Yarra",
        "Yarra River Lower": "Yarra",
        "Yarra River Middle": "Yarra",
        "Yarra River Upper (Rural)": "Yarra",
        "Yarra River Upper (Source)": "Yarra"
    };

    const locationMap = {
        "Altona Treatment Plant": {
            "subCatchment": "Laverton Creek",
            "catchment": "Werribee"
        },
        "Anderson Creek East Retarding Basin": {
            "subCatchment": "Yarra River Middle",
            "catchment": "Yarra"
        },
        "Annulus Billabong Yarra Flats": {
            "subCatchment": "Yarra River Lower",
            "catchment": "Yarra"
        },
        "Balcombe Creek Estuary": {
            "subCatchment": "Mornington Peninsula Western Creeks",
            "catchment": "Westernport"
        },
        "Balls Wetland Complex (Western Grassland Reserve)": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Banyan Waterhole (aka Boundary Road Wetland)": {
            "subCatchment": "Kananook Creek",
            "catchment": "Dandenong"
        },
        "Banyule Flats Billabong": {
            "subCatchment": "Yarra River Lower",
            "catchment": "Yarra"
        },
        "Barnbam Swamp Lynbrook": {
            "subCatchment": "Eumemmerring Creek",
            "catchment": "Dandenong"
        },
        "Bass River Estuary": {
            "subCatchment": "Bass River",
            "catchment": "Westernport"
        },
        "Baths Swamp (Western Grassland Reserve)": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Black Forest Rd Wetland (Western Grassland Reserve)": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Black Swamp": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Boyd Creek Subcatchment": {
            "subCatchment": "Boyd Creek",
            "catchment": "Maribyrnong"
        },
        "Braeside Park": {
            "subCatchment": "Dandenong Creek Lower",
            "catchment": "Dandenong"
        },
        "Bunyip River Estuary": {
            "subCatchment": "Bunyip Lower",
            "catchment": "Westernport"
        },
        "Bunyip River Middle and Upper Subcatchment": {
            "subCatchment": "Bunyip River Middle and Upper",
            "catchment": "Westernport"
        },
        "Cardinia Creek Estuary": {
            "subCatchment": "Cardinia, Toomuc, Deep and Ararat Creeks",
            "catchment": "Westernport"
        },
        "Cardinia Creek Retarding Basin Wetlands": {
            "subCatchment": "Cardinia, Toomuc, Deep and Ararat Creeks",
            "catchment": "Westernport"
        },
        "Cardinia Toomuc Deep and Ararat Creeks Subcatchment": {
            "subCatchment": "Cardinia, Toomuc, Deep and Ararat Creeks",
            "catchment": "Westernport"
        },
        "Cheetham Wetlands": {
            "subCatchment": "Skeleton Creek",
            "catchment": "Werribee"
        },
        "Cherry Lake Cherry Creek": {
            "subCatchment": "Cherry Creek",
            "catchment": "Werribee"
        },
        "Chinamans Creek Estuary": {
            "subCatchment": "Mornington Peninsula Western Creeks",
            "catchment": "Westernport"
        },
        "Cobbledicks Ford Reserve (Western Grassland Reserve)": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Cockatoo Swamp": {
            "subCatchment": "Woori Yallock Creek",
            "catchment": "Yarra"
        },
        "Coolart Wetlands": {
            "subCatchment": "Mornington Peninsula South-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Corhanwarrabul Monbulk and Ferny Creeks Subcatchment": {
            "subCatchment": "Corhanwarrabul, Monbulk and Ferny Creeks",
            "catchment": "Dandenong"
        },
        "Cunninghamâ€™s Swamp": {
            "subCatchment": "Werribee River Lower",
            "catchment": "Werribee"
        },
        "Dalmore Outfalls Subcatchment": {
            "subCatchment": "Dalmore Outfalls",
            "catchment": "Westernport"
        },
        "Dandenong Creek Lower Subcatchment": {
            "subCatchment": "Dandenong Creek Lower",
            "catchment": "Dandenong"
        },
        "Dandenong Creek Middle Subcatchment": {
            "subCatchment": "Dandenong Creek Middle",
            "catchment": "Dandenong"
        },
        "Darebin Creek Subcatchment": {
            "subCatchment": "Darebin Creek",
            "catchment": "Yarra"
        },
        "Deanside Marsh Rockbank": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Deep Creek Estuary": {
            "subCatchment": "Cardinia, Toomuc, Deep and Ararat Creeks",
            "catchment": "Westernport"
        },
        "Deep Creek Lower Subcatchment": {
            "subCatchment": "Deep Creek Lower",
            "catchment": "Maribyrnong"
        },
        "Deep Creek Upper Subcatchment": {
            "subCatchment": "Deep Creek Upper",
            "catchment": "Maribyrnong"
        },
        "Diamond Creek (Rural) Subcatchment": {
            "subCatchment": "Diamond Creek (Rural)",
            "catchment": "Yarra"
        },
        "Domain Chandon Billabongs": {
            "subCatchment": "Yarra River Upper (Rural)",
            "catchment": "Yarra"
        },
        "Donnybrook Road Lake": {
            "subCatchment": "Darebin Creek",
            "catchment": "Yarra"
        },
        "Eastern Treatment Plant": {
            "subCatchment": "Kananook Creek",
            "catchment": "Dandenong"
        },
        "Edithvale Wetland": {
            "subCatchment": "Dandenong Creek Lower",
            "catchment": "Dandenong"
        },
        "Emu Creek Subcatchment": {
            "subCatchment": "Emu Creek",
            "catchment": "Maribyrnong"
        },
        "Eumemmerring Creek Subcatchment": {
            "subCatchment": "Eumemmerring Creek",
            "catchment": "Dandenong"
        },
        "French and Phillip Islands Subcatchment": {
            "subCatchment": "French and Phillip Islands",
            "catchment": "Westernport"
        },
        "Gisborne Marshlands": {
            "subCatchment": "Jacksons Creek",
            "catchment": "Maribyrnong"
        },
        "Greens Rd E Wetland No. 2 (Western Grassland Reserve)": {
            "subCatchment": "Little River Upper",
            "catchment": "Werribee"
        },
        "Hallam Valley Floodplain wetlands": {
            "subCatchment": "Eumemmerring Creek",
            "catchment": "Dandenong"
        },
        "Hays Paddock Billabong": {
            "subCatchment": "Yarra River Lower",
            "catchment": "Yarra"
        },
        "Holden Road Wetlands Diggers Rest": {
            "subCatchment": "Kororoit Creek Upper",
            "catchment": "Werribee"
        },
        "Jacana Wetlands": {
            "subCatchment": "Moonee Ponds Creek",
            "catchment": "Maribyrnong"
        },
        "Jacksons Creek Subcatchment": {
            "subCatchment": "Jacksons Creek",
            "catchment": "Maribyrnong"
        },
        "Jawbone Reserve": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Jenz Swamp": {
            "subCatchment": "Parwan Creek",
            "catchment": "Werribee"
        },
        "Kananook Creek Estuary": {
            "subCatchment": "Kananook Creek",
            "catchment": "Dandenong"
        },
        "Kings Creek Estuary": {
            "subCatchment": "Mornington Peninsula North-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Kororoit Creek Estuary": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Kororoit Creek Lower Subcatchment": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Kororoit Creek No. 3": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Kororoit Creek Upper Subcatchment": {
            "subCatchment": "Kororoit Creek Upper",
            "catchment": "Werribee"
        },
        "Lang Lang floodplain wetlands": {
            "subCatchment": "Lang Lang River",
            "catchment": "Westernport"
        },
        "Lang Lang River Estuary": {
            "subCatchment": "Lang Lang River",
            "catchment": "Westernport"
        },
        "Lang Lang River Subcatchment": {
            "subCatchment": "Lang Lang River",
            "catchment": "Westernport"
        },
        "Laverton RAAF Swamp": {
            "subCatchment": "Skeleton Creek",
            "catchment": "Werribee"
        },
        "Lillydale Lake": {
            "subCatchment": "Olinda Creek",
            "catchment": "Yarra"
        },
        "Little River Estuary": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Little River Lower Subcatchment": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Live Bomb Wetland (Western Grassland Reserve)": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Lollypop Creek Subcatchment": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Maribyrnong River Subcatchment": {
            "subCatchment": "Maribyrnong River",
            "catchment": "Maribyrnong"
        },
        "Merri Creek Upper Subcatchment": {
            "subCatchment": "Merri Creek Upper",
            "catchment": "Yarra"
        },
        "Merricks Creek Estuary": {
            "subCatchment": "Mornington Peninsula South-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Moonee Ponds Creek Subcatchment": {
            "subCatchment": "Moonee Ponds Creek",
            "catchment": "Maribyrnong"
        },
        "Mornington Peninsula North-Eastern Creeks Subcatchment": {
            "subCatchment": "Mornington Peninsula North-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Mornington Peninsula South-Eastern Creeks Subcatchment": {
            "subCatchment": "Mornington Peninsula South-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Mornington Peninsula Western Creeks Subcatchment": {
            "subCatchment": "Mornington Peninsula Western Creeks",
            "catchment": "Westernport"
        },
        "Mullum Mullum Creek Subcatchment": {
            "subCatchment": "Mullum Mullum Creek",
            "catchment": "Yarra"
        },
        "Olivers Creek Estuary": {
            "subCatchment": "Mornington Peninsula North-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Paynes Rd Swamp": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Plenty River Lower Subcatchment": {
            "subCatchment": "Plenty River Lower",
            "catchment": "Yarra"
        },
        "Plenty River Upper Subcatchment": {
            "subCatchment": "Plenty River Upper",
            "catchment": "Yarra"
        },
        "Point Cook Wetlands - RAAF Lake": {
            "subCatchment": "Werribee River Lower",
            "catchment": "Werribee"
        },
        "Point Cook Wetlands - Spectacle Lake": {
            "subCatchment": "Werribee River Lower",
            "catchment": "Werribee"
        },
        "Rabbitters Lake and Swamp (Western Grassland Reserve)": {
            "subCatchment": "Little River Upper",
            "catchment": "Werribee"
        },
        "Regional - All areas": {
            "subCatchment": "Regional - All Catchments",
            "catchment": "Regional"
        },
        "Richmonds Grass Swamp (Western Grassland Reserve)": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Rockbank No. 1": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Rockbank Railway Swamp": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Rolling Thunder Wetlands": {
            "subCatchment": "Parwan Creek",
            "catchment": "Werribee"
        },
        "Seaford Wetland": {
            "subCatchment": "Kananook Creek",
            "catchment": "Dandenong"
        },
        "Sheepwash Creek Estuary": {
            "subCatchment": "Mornington Peninsula Western Creeks",
            "catchment": "Westernport"
        },
        "Skeleton Creek Estuary": {
            "subCatchment": "Skeleton Creek",
            "catchment": "Werribee"
        },
        "Skeleton Creek Subcatchment": {
            "subCatchment": "Skeleton Creek",
            "catchment": "Werribee"
        },
        "Spadonis Billabong": {
            "subCatchment": "Stringybark Creek",
            "catchment": "Yarra"
        },
        "Steels and Pauls Creek (Rural) Subcatchment": {
            "subCatchment": "Steels and Pauls Creek (Rural)",
            "catchment": "Yarra"
        },
        "Stony Creek (WPB) Estuary": {
            "subCatchment": "Mornington Peninsula South-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Tamarisk Waterway Reserve Langwarrin": {
            "subCatchment": "Kananook Creek",
            "catchment": "Dandenong"
        },
        "Tarago River Subcatchment": {
            "subCatchment": "Tarago River",
            "catchment": "Westernport"
        },
        "Target Range Swamp (Western Grassland Reserve)": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "The Spit Nature Conservation Reserve": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Tirhatuan Wetlands Dandenong Creek": {
            "subCatchment": "Dandenong Creek Middle",
            "catchment": "Dandenong"
        },
        "Toolern Creek Subcatchment": {
            "subCatchment": "Toolern Creek",
            "catchment": "Werribee"
        },
        "Tooradin Road Drain Estuary": {
            "subCatchment": "Dalmore Outfalls",
            "catchment": "Westernport"
        },
        "Tootgarook Swamp": {
            "subCatchment": "Mornington Peninsula Western Creeks",
            "catchment": "Westernport"
        },
        "Troups Rd Swamp": {
            "subCatchment": "Kororoit Creek Lower",
            "catchment": "Werribee"
        },
        "Truganina Swamp Laverton Creek": {
            "subCatchment": "Laverton Creek",
            "catchment": "Werribee"
        },
        "Warringine Creek Estuary": {
            "subCatchment": "Mornington Peninsula North-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Watson Creek Estuary": {
            "subCatchment": "Mornington Peninsula North-Eastern Creeks",
            "catchment": "Westernport"
        },
        "Watts River (Source) Subcatchment": {
            "subCatchment": "Watts River (Source)",
            "catchment": "Yarra"
        },
        "Werribee River Estuary": {
            "subCatchment": "Werribee River Lower",
            "catchment": "Werribee"
        },
        "Werribee River Lower Subcatchment": {
            "subCatchment": "Werribee River Lower",
            "catchment": "Werribee"
        },
        "Werribee River Middle Subcatchment": {
            "subCatchment": "Werribee River Middle",
            "catchment": "Werribee"
        },
        "West Quandong Swamp (Western Grassland Reserve)": {
            "subCatchment": "Little River Upper",
            "catchment": "Werribee"
        },
        "Western Port coastal wetlands": {
            "subCatchment": "Dalmore Outfalls",
            "catchment": "Westernport"
        },
        "Western Treatment Plant - Paul & Belfrages Wetland": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Western Treatment Plant - Ponds": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Western Treatment Plant - Ryans Swamp": {
            "subCatchment": "Little River Lower",
            "catchment": "Werribee"
        },
        "Westgate Park Wetlands": {
            "subCatchment": "Yarra River Lower",
            "catchment": "Yarra"
        },
        "Willsmere Billabong": {
            "subCatchment": "Yarra River Lower",
            "catchment": "Yarra"
        },
        "Winton Wetlands Dandenong Creek": {
            "subCatchment": "Dandenong Creek Middle",
            "catchment": "Dandenong"
        },
        "Woori Yallock Creek Subcatchment": {
            "subCatchment": "Woori Yallock Creek",
            "catchment": "Yarra"
        },
        "Wyndham Vale Swamp": {
            "subCatchment": "Lollypop Creek",
            "catchment": "Werribee"
        },
        "Yallock Creek Estuary": {
            "subCatchment": "Bunyip Lower",
            "catchment": "Westernport"
        },
        "Yallock Creek floodplain wetlands": {
            "subCatchment": "Bunyip Lower",
            "catchment": "Westernport"
        },
        "Yarra Bridge Stream Side Reserve": {
            "subCatchment": "Yarra River Upper (Rural)",
            "catchment": "Yarra"
        },
        "Yarra River Lower Subcatchment": {
            "subCatchment": "Yarra River Lower",
            "catchment": "Yarra"
        },
        "Yarra River Middle Subcatchment": {
            "subCatchment": "Yarra River Middle",
            "catchment": "Yarra"
        },
        "Yarra River Upper (Source) Subcatchment": {
            "subCatchment": "Yarra River Upper (Source)",
            "catchment": "Yarra"
        },
        "Yering Backswamp Yarra River": {
            "subCatchment": "Yarra River Upper (Rural)",
            "catchment": "Yarra"
        }
    };

    ///// DATA OBJECTS FOR MULTI-SELECT COMPONENTS //////
        // Waterways outcomes 
        const keyValues = {
            label:          'by key values',
            name:           'keyValues',
            list:           Object.keys(hwsSchema.keyValues),
            placeholder:    'Use this field to select waterway key values'
        };

        const conditions = {
            label:          'by waterway conditions',
            name:           'conditions',
            list:           Object.keys(hwsSchema.conditions),
            placeholder:    'Use this field to select waterway conditions'
        };

        const performanceObjectivesGroup = {
            label:          'by performance objective group',
            name:           'performanceObjectiveGroup',
            list:           Object.keys(hwsSchema.performanceObjectives),
            placeholder:    'Use this field to select performance objectives groups'
        };

        const performanceObjectivesTheme = {
            label:          'by performance objective theme',
            name:           'performanceObjectiveTheme',
            list:           [... new Set(Object.values(hwsSchema.performanceObjectives).map(d => d.themes).flat().sort()) ],
            placeholder:    'Use this field to select performance objectives themes'
        };

        // Project location
        const catchments = {
            label:          'by catchments',
            name:           'catchment',
            list:           [...locationTree.entries()].map(d => d[0]),
            placeholder:    'Use this field to select catchments'
        };

        const subcatchments = {
            label:          'by subcatchments',
            name:           'subcatchment',
            list:           Object.keys(subCatchmentMap).sort(),
            placeholder:    'Use this field to select subcatchments'
        };

        const locations = {
            label:          'by location',
            name:           'location',
            list:           Object.keys(locationMap).sort(),
            placeholder:    'Use this field to select locations'
        };

        // Project characterships
        const initiativeType = {
            label:          'Type',
            name:           'initiativeType',
            list:           projectSchema.initiativeType,
            placeholder:    'Use this field to select initiative type(s)'
        };
        const projectStage = {
            label:          'Stage',
            name:           'projectStage',
            list:           projectSchema.stage,
            placeholder:    'Use this field to select initiative project(s)'
        };
        const projectClass = {
            label:          'Class',
            name:           'projectClass',
            list:           projectSchema.class,
            placeholder:    'Use this field to select project class(es)'
        };
        const projectSize = {
            label:          'Size',
            name:           'projectSize',
            list:           projectSchema.size,
            placeholder:    'Use this field to select project size to filter for'
        };
        const projectScale = {
            label:          'Scale',
            name:           'projectScale',
            list:           projectSchema.class,
            placeholder:    'Use this field to select project scale to filter for'
        };

        // Project stakeholders
        const leadOrg = {
            label:          'Lead organisation',
            name:           'leadOrg',
            list:           null,
            placeholder:    'Use this field to select the name of lead organisation to filter for'
        };
        const partnerOrg = {
            label:          'Partner organisation(s)',
            name:           'partnerOrg',
            list:           null,
            placeholder:    'Use this field to select the name of a partner organisation to filter for'
        };
        const leadOrgType = {
            label:          'Lead organisation type',
            name:           'leadOrgType',
            list:           projectSchema.orgType,
            placeholder:    'Use this field to select the type of lead organisation to filter for'
        };

    ////////////////////////////////////////////////////////////////////
    //// SERVERLESS MONGODB REALM APPLICATION : LITTLE BOILERPLATE  ////
    ////////////////////////////////////////////////////////////////////

    // Initialise the application with app state and config objects
    const app$1 = { // This object is created
        realm:              new App$1({ id: 'mw-collab-prototype-yxtgd'}),
        user:               null,     // User instance
        data: {
            mongo:            null,     // MongoDB Atlas handle
            collections:      {}        // MongoDB Atlas collections
        },           
        state: {
            isloggedIn:       false,
            isAnonUser:       false
        },
        config: {
            realmID:          'mw-collab-prototype-yxtgd',
            cluster:          'mongodb-atlas',
            db: {
                name:           'application',
                collections:    ['projects', 'users', 'organisations']
            }
        }            
    };

    // Functions to connect to MongoDB Realm backend and Atlas databases
    async function initRealm(app){
        console.log('Initialising the Realm app...');
        app.realm = new App$1({ id: app.config.realmID});
    }
    async function loginAnonymous(app){
        const credentials = Credentials.anonymous();
        try {
            app.user = await app.realm.logIn(credentials);
            console.log('Anonymous user logged in...');
            return app.user        // Return authenticate the user
        } catch(err) {
            console.error("Failed to log in", err);
        }
    }
    async function connectToMongoAtlas(app) {
        app.data.mongo = app.realm.currentUser.mongoClient(app.config.cluster);
        console.log('MongoDB Atlas instance connected', app.data.mongo );
    }
    async function connectToCollections(app){
        for (const name of app.config.db.collections){
            app.data.collections[name] = app.data.mongo.db(app.config.db.name).collection(name);
        }
        console.log('Data collections connected', app.data.collections );
    }
    async function deleteAllUsers(app){
        const userArray = [...app.realm.users];
        for( const user of userArray){
            app.realm.removeUser(user);
        }
    }
    ////////////////////////////////////////

    async function setupLocalStore(app, store){
        console.log("Storing database as store...");
        for (const name of Object.keys(store)){
            store[name] = await app.data.collections[name].find({})
                .then(result => {
                    if(result) {
                        console.log(`- ${name} stored`);     
                        return result;
                    } else {
                    console.log("No documents found");
                    }
                })
                .catch(err => console.error(`Failed to find documents: ${err}`));
        }
    }
    async function updateMultiSelect(store){
        console.log("Updating the multiselect objects...");
        leadOrg.list = store.organisations.map( d => d.name).sort();
        partnerOrg.list =  store.organisations.map( d => d.name).sort();
    }
    async function addDefaultImages(store){
        console.log('Adding default image URLs...');
        for( const item of store.projects){
            item.imgURL = getRandomStockImgPath();
        }
        for( const item of store.organisations){
            item.imgURL = getRandomAbstractImgPath();
        }
    }

    function slugify(str) {
        str = str.replace(/^\s+|\s+$/g, '').toLowerCase(); // trim           
        const from = "àáäâèéëêìíïîòóöôùúüûñç·/_,:;",      // remove accents, swap ñ for n, etc
            to   = "aaaaeeeeiiiioooouuuunc------";
        for (var i=0, l=from.length ; i<l ; i++) {
            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
        }
        str = str.replace(/[^a-z0-9 -]/g, '') // remove invalid chars
            .replace(/\s+/g, '-') // collapse whitespace and replace by -
            .replace(/-+/g, '-'); // collapse dashes
        return str;
    }

    const capitaliseFirst = (string) => string.charAt(0).toUpperCase() + string.slice(1);

    /* src/components/byPage/home/Menu.svelte generated by Svelte v3.46.4 */
    const file$1d = "src/components/byPage/home/Menu.svelte";

    function get_each_context$i(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    // (15:8) {#each $ui.items.pages as pageData, index (slugify(pageData.name))}
    function create_each_block$i(key_1, ctx) {
    	let first;
    	let menucard;
    	let current;

    	menucard = new MenuCard({
    			props: {
    				pageData: /*pageData*/ ctx[2],
    				index: /*index*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			create_component(menucard.$$.fragment);
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			mount_component(menucard, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const menucard_changes = {};
    			if (dirty & /*$ui*/ 1) menucard_changes.pageData = /*pageData*/ ctx[2];
    			if (dirty & /*$ui*/ 1) menucard_changes.index = /*index*/ ctx[4];
    			menucard.$set(menucard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(menucard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(menucard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			destroy_component(menucard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$i.name,
    		type: "each",
    		source: "(15:8) {#each $ui.items.pages as pageData, index (slugify(pageData.name))}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1e(ctx) {
    	let section;
    	let div0;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t0;
    	let div2;
    	let h3;
    	let t2;
    	let div1;
    	let svg;
    	let path0;
    	let path1;
    	let current;
    	let each_value = /*$ui*/ ctx[0].items.pages;
    	validate_each_argument(each_value);
    	const get_key = ctx => slugify(/*pageData*/ ctx[2].name);
    	validate_each_keys(ctx, each_value, get_each_context$i, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$i(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$i(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div2 = element("div");
    			h3 = element("h3");
    			h3.textContent = "About";
    			t2 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			attr_dev(div0, "class", "menu-container svelte-1yzr2pj");
    			add_location(div0, file$1d, 13, 4, 447);
    			attr_dev(h3, "class", "down-label svelte-1yzr2pj");
    			add_location(h3, file$1d, 19, 8, 661);
    			attr_dev(path0, "d", "M34.98 13.775 18.75 30.006 2.518 13.776a1.036 1.036 0 1 0-1.462 1.47l16.963 16.962c.405.4 1.057.4 1.463 0l16.963-16.963a1.038 1.038 0 0 0-1.463-1.47z");
    			add_location(path0, file$1d, 22, 16, 830);
    			attr_dev(path1, "d", "M18.018 23.727c.406.4 1.057.4 1.463 0L36.444 6.765a1.038 1.038 0 0 0-1.463-1.47L18.751 21.51 2.518 5.294a1.037 1.037 0 1 0-1.463 1.47Z");
    			add_location(path1, file$1d, 23, 16, 1008);
    			attr_dev(svg, "id", "down-button");
    			attr_dev(svg, "viewBox", "0 0 37.5 37.5");
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "class", "svelte-1yzr2pj");
    			add_location(svg, file$1d, 21, 12, 752);
    			attr_dev(div1, "class", "down-icon-container svelte-1yzr2pj");
    			add_location(div1, file$1d, 20, 8, 704);
    			attr_dev(div2, "class", "down-container svelte-1yzr2pj");
    			add_location(div2, file$1d, 18, 4, 623);
    			attr_dev(section, "class", "svelte-1yzr2pj");
    			add_location(section, file$1d, 12, 0, 433);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(section, t0);
    			append_dev(section, div2);
    			append_dev(div2, h3);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$ui*/ 1) {
    				each_value = /*$ui*/ ctx[0].items.pages;
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$i, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block$i, null, get_each_context$i);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1e($$self, $$props, $$invalidate) {
    	let $user;
    	let $ui;
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(1, $user = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Menu', slots, []);
    	set_store_value(ui, $ui.items.pages = getMenuOptions($user), $ui);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Menu> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MenuCard,
    		app: app$1,
    		deleteAllUsers,
    		getMenuOptions,
    		user,
    		ui,
    		slugify,
    		$user,
    		$ui
    	});

    	return [$ui];
    }

    class Menu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1e, create_fragment$1e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Menu",
    			options,
    			id: create_fragment$1e.name
    		});
    	}
    }

    /* src/components/byPage/home/About.svelte generated by Svelte v3.46.4 */
    const file$1c = "src/components/byPage/home/About.svelte";

    function create_fragment$1d(ctx) {
    	let section;
    	let div3;
    	let div0;
    	let h1;
    	let raw0_value = /*content*/ ctx[0].title + "";
    	let t0;
    	let p;
    	let t1;
    	let a;
    	let t3;
    	let div1;
    	let raw1_value = /*content*/ ctx[0].intro + "";
    	let t4;
    	let div2;
    	let img0;
    	let img0_src_value;
    	let t5;
    	let div6;
    	let div4;
    	let img1;
    	let img1_src_value;
    	let t6;
    	let div5;
    	let h20;
    	let raw2_value = /*content*/ ctx[0].section_01_title + "";
    	let t7;
    	let html_tag;
    	let raw3_value = /*content*/ ctx[0].section_01_description + "";
    	let t8;
    	let div9;
    	let div7;
    	let h21;
    	let raw4_value = /*content*/ ctx[0].section_02_title + "";
    	let t9;
    	let html_tag_1;
    	let raw5_value = /*content*/ ctx[0].section_02_description + "";
    	let t10;
    	let div8;
    	let img2;
    	let img2_src_value;
    	let t11;
    	let div12;
    	let div10;
    	let img3;
    	let img3_src_value;
    	let t12;
    	let div11;
    	let h22;
    	let raw6_value = /*content*/ ctx[0].section_03_title + "";
    	let t13;
    	let html_tag_2;
    	let raw7_value = /*content*/ ctx[0].section_03_description + "";
    	let t14;
    	let div15;
    	let div13;
    	let img4;
    	let img4_src_value;
    	let t15;
    	let div14;
    	let h23;
    	let raw8_value = /*content*/ ctx[0].section_04_title + "";
    	let t16;
    	let html_tag_3;
    	let raw9_value = /*content*/ ctx[0].section_04_description + "";

    	const block = {
    		c: function create() {
    			section = element("section");
    			div3 = element("div");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = space();
    			p = element("p");
    			t1 = text$1("This is a development version of the collaborative tool where progress is being regularly pushed. \n                Development status will (soon) be documented on the accompanying \n                ");
    			a = element("a");
    			a.textContent = "repository.";
    			t3 = space();
    			div1 = element("div");
    			t4 = space();
    			div2 = element("div");
    			img0 = element("img");
    			t5 = space();
    			div6 = element("div");
    			div4 = element("div");
    			img1 = element("img");
    			t6 = space();
    			div5 = element("div");
    			h20 = element("h2");
    			t7 = space();
    			html_tag = new HtmlTag();
    			t8 = space();
    			div9 = element("div");
    			div7 = element("div");
    			h21 = element("h2");
    			t9 = space();
    			html_tag_1 = new HtmlTag();
    			t10 = space();
    			div8 = element("div");
    			img2 = element("img");
    			t11 = space();
    			div12 = element("div");
    			div10 = element("div");
    			img3 = element("img");
    			t12 = space();
    			div11 = element("div");
    			h22 = element("h2");
    			t13 = space();
    			html_tag_2 = new HtmlTag();
    			t14 = space();
    			div15 = element("div");
    			div13 = element("div");
    			img4 = element("img");
    			t15 = space();
    			div14 = element("div");
    			h23 = element("h2");
    			t16 = space();
    			html_tag_3 = new HtmlTag();
    			attr_dev(h1, "class", "svelte-1nfqt2k");
    			add_location(h1, file$1c, 12, 12, 334);
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "href", "https://github.com/littlesketches/mw-collab-tool-proto");
    			add_location(a, file$1c, 16, 16, 615);
    			attr_dev(p, "class", "note svelte-1nfqt2k");
    			add_location(p, file$1c, 13, 12, 383);
    			attr_dev(div0, "class", "content-oxx svelte-1nfqt2k");
    			add_location(div0, file$1c, 11, 8, 294);
    			attr_dev(div1, "class", "content-xox svelte-1nfqt2k");
    			add_location(div1, file$1c, 19, 8, 754);
    			if (!src_url_equal(img0.src, img0_src_value = getRandomStockImgPath())) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Stock image");
    			attr_dev(img0, "class", "svelte-1nfqt2k");
    			add_location(img0, file$1c, 23, 12, 881);
    			attr_dev(div2, "class", "content-xxo svelte-1nfqt2k");
    			add_location(div2, file$1c, 22, 8, 840);
    			attr_dev(div3, "class", "about-section-3col svelte-1nfqt2k");
    			add_location(div3, file$1c, 10, 4, 250);
    			if (!src_url_equal(img1.src, img1_src_value = getRandomStockImgPath())) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Stock image");
    			attr_dev(img1, "class", "svelte-1nfqt2k");
    			add_location(img1, file$1c, 29, 12, 1055);
    			attr_dev(div4, "class", "content-xox svelte-1nfqt2k");
    			add_location(div4, file$1c, 28, 8, 1015);
    			attr_dev(h20, "class", "svelte-1nfqt2k");
    			add_location(h20, file$1c, 32, 12, 1177);
    			html_tag.a = null;
    			attr_dev(div5, "class", "content-oxx svelte-1nfqt2k");
    			add_location(div5, file$1c, 31, 8, 1137);
    			attr_dev(div6, "class", "about-section-3col svelte-1nfqt2k");
    			add_location(div6, file$1c, 27, 4, 971);
    			attr_dev(h21, "class", "svelte-1nfqt2k");
    			add_location(h21, file$1c, 39, 12, 1395);
    			html_tag_1.a = null;
    			attr_dev(div7, "class", "content-xxo svelte-1nfqt2k");
    			add_location(div7, file$1c, 38, 8, 1355);
    			if (!src_url_equal(img2.src, img2_src_value = getRandomStockImgPath())) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Stock image");
    			attr_dev(img2, "class", "svelte-1nfqt2k");
    			add_location(img2, file$1c, 43, 12, 1560);
    			attr_dev(div8, "class", "content-oox svelte-1nfqt2k");
    			add_location(div8, file$1c, 42, 8, 1520);
    			attr_dev(div9, "class", "about-section-3col svelte-1nfqt2k");
    			add_location(div9, file$1c, 37, 4, 1311);
    			if (!src_url_equal(img3.src, img3_src_value = getRandomStockImgPath())) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Stock image");
    			attr_dev(img3, "class", "svelte-1nfqt2k");
    			add_location(img3, file$1c, 49, 12, 1734);
    			attr_dev(div10, "class", "content-xoo svelte-1nfqt2k");
    			add_location(div10, file$1c, 48, 8, 1694);
    			attr_dev(h22, "class", "svelte-1nfqt2k");
    			add_location(h22, file$1c, 52, 12, 1856);
    			html_tag_2.a = null;
    			attr_dev(div11, "class", "content-oxx svelte-1nfqt2k");
    			add_location(div11, file$1c, 51, 8, 1816);
    			attr_dev(div12, "class", "about-section-3col svelte-1nfqt2k");
    			add_location(div12, file$1c, 47, 4, 1650);
    			if (!src_url_equal(img4.src, img4_src_value = getRandomStockImgPath())) attr_dev(img4, "src", img4_src_value);
    			attr_dev(img4, "alt", "Stock image");
    			attr_dev(img4, "class", "svelte-1nfqt2k");
    			add_location(img4, file$1c, 59, 12, 2073);
    			attr_dev(div13, "class", "content-oox svelte-1nfqt2k");
    			add_location(div13, file$1c, 58, 8, 2033);
    			attr_dev(h23, "class", "svelte-1nfqt2k");
    			add_location(h23, file$1c, 62, 12, 2194);
    			html_tag_3.a = null;
    			attr_dev(div14, "class", "content-xxo svelte-1nfqt2k");
    			add_location(div14, file$1c, 61, 8, 2154);
    			attr_dev(div15, "class", "about-section-3col svelte-1nfqt2k");
    			add_location(div15, file$1c, 57, 4, 1989);
    			attr_dev(section, "class", "about-section");
    			add_location(section, file$1c, 9, 0, 212);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div3);
    			append_dev(div3, div0);
    			append_dev(div0, h1);
    			h1.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			append_dev(div0, p);
    			append_dev(p, t1);
    			append_dev(p, a);
    			append_dev(div3, t3);
    			append_dev(div3, div1);
    			div1.innerHTML = raw1_value;
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, img0);
    			append_dev(section, t5);
    			append_dev(section, div6);
    			append_dev(div6, div4);
    			append_dev(div4, img1);
    			append_dev(div6, t6);
    			append_dev(div6, div5);
    			append_dev(div5, h20);
    			h20.innerHTML = raw2_value;
    			append_dev(div5, t7);
    			html_tag.m(raw3_value, div5);
    			append_dev(section, t8);
    			append_dev(section, div9);
    			append_dev(div9, div7);
    			append_dev(div7, h21);
    			h21.innerHTML = raw4_value;
    			append_dev(div7, t9);
    			html_tag_1.m(raw5_value, div7);
    			append_dev(div9, t10);
    			append_dev(div9, div8);
    			append_dev(div8, img2);
    			append_dev(section, t11);
    			append_dev(section, div12);
    			append_dev(div12, div10);
    			append_dev(div10, img3);
    			append_dev(div12, t12);
    			append_dev(div12, div11);
    			append_dev(div11, h22);
    			h22.innerHTML = raw6_value;
    			append_dev(div11, t13);
    			html_tag_2.m(raw7_value, div11);
    			append_dev(section, t14);
    			append_dev(section, div15);
    			append_dev(div15, div13);
    			append_dev(div13, img4);
    			append_dev(div15, t15);
    			append_dev(div15, div14);
    			append_dev(div14, h23);
    			h23.innerHTML = raw8_value;
    			append_dev(div14, t16);
    			html_tag_3.m(raw9_value, div14);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);
    	let content = componentContent.about;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		getRandomStockImgPath,
    		componentContent,
    		content
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [content];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1d, create_fragment$1d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$1d.name
    		});
    	}
    }

    /* src/components/shared/Footer.svelte generated by Svelte v3.46.4 */

    const file$1b = "src/components/shared/Footer.svelte";

    function create_fragment$1c(ctx) {
    	let footer;
    	let div;
    	let t1;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			div = element("div");
    			div.textContent = "An initiative to support the";
    			t1 = space();
    			img = element("img");
    			attr_dev(div, "class", "logo-tagline svelte-1fw0yb7");
    			add_location(div, file$1b, 3, 4, 46);
    			if (!src_url_equal(img.src, img_src_value = "./static/img/logo.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Healthy Waterways strategy logo");
    			attr_dev(img, "class", "svelte-1fw0yb7");
    			add_location(img, file$1b, 6, 4, 127);
    			attr_dev(footer, "class", "svelte-1fw0yb7");
    			add_location(footer, file$1b, 2, 0, 33);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div);
    			append_dev(footer, t1);
    			append_dev(footer, img);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1c($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1c, create_fragment$1c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$1c.name
    		});
    	}
    }

    /* src/components/byPage/home/Hero.svelte generated by Svelte v3.46.4 */
    const file$1a = "src/components/byPage/home/Hero.svelte";

    function get_each_context$h(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	child_ctx[5] = i;
    	return child_ctx;
    }

    // (16:8) {#each layers as layer, i}
    function create_each_block$h(ctx) {
    	let img;
    	let img_src_value;
    	let img_intro;

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_style(img, "transform", "translate(0," + -/*y*/ ctx[0] * /*layer*/ ctx[3] / (/*layers*/ ctx[1].length - 1) + "px)");
    			if (!src_url_equal(img.src, img_src_value = "./static/img/parallax/parallax" + /*layer*/ ctx[3] + ".png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "parallax layer " + /*layer*/ ctx[3]);
    			attr_dev(img, "class", "svelte-141majn");
    			add_location(img, file$1a, 16, 2, 448);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*y*/ 1) {
    				set_style(img, "transform", "translate(0," + -/*y*/ ctx[0] * /*layer*/ ctx[3] / (/*layers*/ ctx[1].length - 1) + "px)");
    			}
    		},
    		i: function intro(local) {
    			if (!img_intro) {
    				add_render_callback(() => {
    					img_intro = create_in_transition(img, fade, { duration: 500, delay: /*i*/ ctx[5] * 200 });
    					img_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$h.name,
    		type: "each",
    		source: "(16:8) {#each layers as layer, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1b(ctx) {
    	let scrolling = false;

    	let clear_scrolling = () => {
    		scrolling = false;
    	};

    	let scrolling_timeout;
    	let section;
    	let div0;
    	let t0;
    	let div2;
    	let div1;
    	let about;
    	let t1;
    	let footer;
    	let current;
    	let mounted;
    	let dispose;
    	add_render_callback(/*onwindowscroll*/ ctx[2]);
    	let each_value = /*layers*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$h(get_each_context$h(ctx, each_value, i));
    	}

    	about = new About({ $$inline: true });
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			create_component(about.$$.fragment);
    			t1 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(div0, "class", "parallax-container svelte-141majn");
    			add_location(div0, file$1a, 14, 4, 378);
    			attr_dev(div1, "class", "about-container svelte-141majn");
    			add_location(div1, file$1a, 25, 8, 786);
    			attr_dev(div2, "class", "content svelte-141majn");
    			add_location(div2, file$1a, 24, 4, 756);
    			attr_dev(section, "class", "svelte-141majn");
    			add_location(section, file$1a, 13, 0, 364);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(section, t0);
    			append_dev(section, div2);
    			append_dev(div2, div1);
    			mount_component(about, div1, null);
    			append_dev(div1, t1);
    			mount_component(footer, div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "scroll", () => {
    					scrolling = true;
    					clearTimeout(scrolling_timeout);
    					scrolling_timeout = setTimeout(clear_scrolling, 100);
    					/*onwindowscroll*/ ctx[2]();
    				});

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*y*/ 1 && !scrolling) {
    				scrolling = true;
    				clearTimeout(scrolling_timeout);
    				scrollTo(window.pageXOffset, /*y*/ ctx[0]);
    				scrolling_timeout = setTimeout(clear_scrolling, 100);
    			}

    			if (dirty & /*y, layers*/ 3) {
    				each_value = /*layers*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$h(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$h(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(about.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(about.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			destroy_component(about);
    			destroy_component(footer);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Hero', slots, []);
    	const layers = [0, 1, 2, 3, 4, 5, 6, 7, 8];
    	let y;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Hero> was created with unknown prop '${key}'`);
    	});

    	function onwindowscroll() {
    		$$invalidate(0, y = window.pageYOffset);
    	}

    	$$self.$capture_state = () => ({ fade, About, Footer, layers, y });

    	$$self.$inject_state = $$props => {
    		if ('y' in $$props) $$invalidate(0, y = $$props.y);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [y, layers, onwindowscroll];
    }

    class Hero extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1b, create_fragment$1b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Hero",
    			options,
    			id: create_fragment$1b.name
    		});
    	}
    }

    /* src/pages/Home.svelte generated by Svelte v3.46.4 */
    const file$19 = "src/pages/Home.svelte";

    function create_fragment$1a(ctx) {
    	let section;
    	let hero;
    	let t0;
    	let title;
    	let t1;
    	let menu;
    	let current;
    	hero = new Hero({ $$inline: true });
    	title = new Title({ $$inline: true });
    	menu = new Menu({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(hero.$$.fragment);
    			t0 = space();
    			create_component(title.$$.fragment);
    			t1 = space();
    			create_component(menu.$$.fragment);
    			attr_dev(section, "id", "home-page");
    			attr_dev(section, "class", "svelte-1502oan");
    			add_location(section, file$19, 12, 0, 337);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(hero, section, null);
    			append_dev(section, t0);
    			mount_component(title, section, null);
    			append_dev(section, t1);
    			mount_component(menu, section, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(hero.$$.fragment, local);
    			transition_in(title.$$.fragment, local);
    			transition_in(menu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(hero.$$.fragment, local);
    			transition_out(title.$$.fragment, local);
    			transition_out(menu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(hero);
    			destroy_component(title);
    			destroy_component(menu);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1a($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	set_store_value(ui, $ui.showNav = false, $ui);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Title, Menu, Hero, ui, $ui });
    	return [];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1a, create_fragment$1a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$1a.name
    		});
    	}
    }

    /* src/components/shared/TitleBlock.svelte generated by Svelte v3.46.4 */
    const file$18 = "src/components/shared/TitleBlock.svelte";

    function create_fragment$19(ctx) {
    	let section;
    	let div;
    	let t0;
    	let span0;
    	let raw0_value = /*titleData*/ ctx[0].instruction + "";
    	let div_intro;
    	let div_outro;
    	let t1;
    	let h1;
    	let span1;
    	let html_tag;
    	let raw1_value = /*titleData*/ ctx[0].title + "";
    	let section_intro;
    	let section_outro;
    	let current;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			t0 = text$1("——— ");
    			span0 = element("span");
    			t1 = space();
    			h1 = element("h1");
    			span1 = element("span");
    			span1.textContent = ":";
    			html_tag = new HtmlTag();
    			attr_dev(span0, "class", "svelte-h8xa5q");
    			add_location(span0, file$18, 9, 30, 358);
    			attr_dev(div, "class", "svelte-h8xa5q");
    			add_location(div, file$18, 8, 4, 247);
    			attr_dev(span1, "class", "svelte-h8xa5q");
    			add_location(span1, file$18, 11, 8, 420);
    			html_tag.a = null;
    			attr_dev(h1, "class", "svelte-h8xa5q");
    			add_location(h1, file$18, 11, 4, 416);
    			attr_dev(section, "class", "svelte-h8xa5q");
    			add_location(section, file$18, 7, 0, 158);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, t0);
    			append_dev(div, span0);
    			span0.innerHTML = raw0_value;
    			append_dev(section, t1);
    			append_dev(section, h1);
    			append_dev(h1, span1);
    			html_tag.m(raw1_value, h1);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*titleData*/ 1) && raw0_value !== (raw0_value = /*titleData*/ ctx[0].instruction + "")) span0.innerHTML = raw0_value;			if ((!current || dirty & /*titleData*/ 1) && raw1_value !== (raw1_value = /*titleData*/ ctx[0].title + "")) html_tag.p(raw1_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (div_outro) div_outro.end(1);
    				div_intro = create_in_transition(div, fly, { x: -100, duration: 1500 });
    				div_intro.start();
    			});

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { y: -500, duration: 1000 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (div_intro) div_intro.invalidate();
    			div_outro = create_out_transition(div, fly, { x: -100, duration: 750 });
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { y: -500, duration: 500 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching && div_outro) div_outro.end();
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$19.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$19($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TitleBlock', slots, []);
    	let { titleData } = $$props;
    	const writable_props = ['titleData'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TitleBlock> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('titleData' in $$props) $$invalidate(0, titleData = $$props.titleData);
    	};

    	$$self.$capture_state = () => ({ fly, titleData });

    	$$self.$inject_state = $$props => {
    		if ('titleData' in $$props) $$invalidate(0, titleData = $$props.titleData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [titleData];
    }

    class TitleBlock$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$19, create_fragment$19, safe_not_equal, { titleData: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TitleBlock",
    			options,
    			id: create_fragment$19.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*titleData*/ ctx[0] === undefined && !('titleData' in props)) {
    			console.warn("<TitleBlock> was created without expected prop 'titleData'");
    		}
    	}

    	get titleData() {
    		throw new Error("<TitleBlock>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set titleData(value) {
    		throw new Error("<TitleBlock>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/projects/ProjectListHeader.svelte generated by Svelte v3.46.4 */
    const file$17 = "src/components/shared/projects/ProjectListHeader.svelte";

    // (22:8) {:else}
    function create_else_block$a(ctx) {
    	let h4;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			h4.textContent = "—— Project locations";
    			attr_dev(h4, "class", "svelte-ezju5a");
    			add_location(h4, file$17, 22, 8, 742);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(22:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:8) {#if $ui.byPage.discover.projectView === 'cards'}
    function create_if_block$q(ctx) {
    	let h4;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			h4.textContent = "—— Project menu";
    			attr_dev(h4, "class", "svelte-ezju5a");
    			add_location(h4, file$17, 20, 8, 681);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$q.name,
    		type: "if",
    		source: "(20:8) {#if $ui.byPage.discover.projectView === 'cards'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$18(ctx) {
    	let section;
    	let div0;
    	let t0;
    	let div4;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let div3;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.discover.projectView === 'cards') return create_if_block$q;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			if_block.c();
    			t0 = space();
    			div4 = element("div");
    			div1 = element("div");
    			div1.textContent = "Cards";
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "|";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "Map";
    			add_location(div0, file$17, 18, 4, 606);
    			attr_dev(div1, "name", "cards");
    			attr_dev(div1, "class", "icon-container cards selected svelte-ezju5a");
    			attr_dev(div1, "type", "button");
    			add_location(div1, file$17, 27, 8, 863);
    			attr_dev(div2, "class", "icon-divider svelte-ezju5a");
    			add_location(div2, file$17, 31, 8, 1014);
    			attr_dev(div3, "name", "map");
    			attr_dev(div3, "class", "icon-container map svelte-ezju5a");
    			attr_dev(div3, "type", "button");
    			add_location(div3, file$17, 32, 8, 1058);
    			attr_dev(div4, "class", "switch-container svelte-ezju5a");
    			add_location(div4, file$17, 26, 4, 822);
    			attr_dev(section, "class", "svelte-ezju5a");
    			add_location(section, file$17, 17, 0, 520);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			if_block.m(div0, null);
    			append_dev(section, t0);
    			append_dev(section, div4);
    			append_dev(div4, div1);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*switchView*/ ctx[1], false, false, false),
    					listen_dev(div3, "click", /*switchView*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: 500, duration: 1500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: 500, duration: 150 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$18.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$18($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectListHeader', slots, []);
    	set_store_value(ui, $ui.byPage.discover.projectView = 'cards', $ui);

    	function switchView() {
    		set_store_value(ui, $ui.byPage.discover.projectView = this.getAttribute('name'), $ui);

    		for (const item of document.getElementsByClassName('icon-container')) {
    			item.classList.remove('selected');
    		}

    		this.classList.add('selected');
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectListHeader> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fly, ui, switchView, $ui });
    	return [$ui, switchView];
    }

    class ProjectListHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$18, create_fragment$18, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectListHeader",
    			options,
    			id: create_fragment$18.name
    		});
    	}
    }

    /* src/components/shared/projects/ProjectCard.svelte generated by Svelte v3.46.4 */

    const { console: console_1$h } = globals;
    const file$16 = "src/components/shared/projects/ProjectCard.svelte";

    // (39:8) {#if hoverState}
    function create_if_block$p(ctx) {
    	let div1;
    	let p;
    	let raw_value = /*projectData*/ ctx[0].about.shortDescription + "";
    	let t0;
    	let div0;
    	let a;
    	let div1_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			p = element("p");
    			t0 = space();
    			div0 = element("div");
    			a = element("a");
    			a.textContent = "→ Tap to see more";
    			add_location(p, file$16, 40, 12, 1424);
    			add_location(a, file$16, 42, 16, 1531);
    			attr_dev(div0, "class", "project-link svelte-4rduus");
    			add_location(div0, file$16, 41, 12, 1486);
    			attr_dev(div1, "class", "desc-container svelte-4rduus");
    			add_location(div1, file$16, 39, 8, 1365);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, p);
    			p.innerHTML = raw_value;
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, a);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*projectData*/ 1) && raw_value !== (raw_value = /*projectData*/ ctx[0].about.shortDescription + "")) p.innerHTML = raw_value;		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$p.name,
    		type: "if",
    		source: "(39:8) {#if hoverState}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$17(ctx) {
    	let li;
    	let div;
    	let img;
    	let img_src_value;
    	let t0;
    	let h3;
    	let raw_value = /*projectData*/ ctx[0].name + "";
    	let t1;
    	let li_intro;
    	let li_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*hoverState*/ ctx[2] && create_if_block$p(ctx);

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			img = element("img");
    			t0 = space();
    			h3 = element("h3");
    			t1 = space();
    			if (if_block) if_block.c();
    			if (!src_url_equal(img.src, img_src_value = /*projectData*/ ctx[0].imgURL)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "tba");
    			attr_dev(img, "class", "svelte-4rduus");
    			add_location(img, file$16, 35, 8, 1245);
    			attr_dev(h3, "class", "svelte-4rduus");
    			add_location(h3, file$16, 36, 8, 1297);
    			attr_dev(div, "id", `card-${/*id*/ ctx[3]}`);
    			attr_dev(div, "class", "card svelte-4rduus");
    			add_location(div, file$16, 30, 4, 1031);
    			attr_dev(li, "class", "svelte-4rduus");
    			add_location(li, file$16, 29, 0, 903);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			append_dev(div, img);
    			append_dev(div, t0);
    			append_dev(div, h3);
    			h3.innerHTML = raw_value;
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div,
    						"click",
    						function () {
    							if (is_function(/*openProject*/ ctx[6](/*projectData*/ ctx[0]))) /*openProject*/ ctx[6](/*projectData*/ ctx[0]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(div, "mouseover", /*showDesc*/ ctx[4], false, false, false),
    					listen_dev(div, "focus", /*showDesc*/ ctx[4], false, false, false),
    					listen_dev(div, "mouseout", /*hideDesc*/ ctx[5], false, false, false),
    					listen_dev(div, "blur", /*hideDesc*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (!current || dirty & /*projectData*/ 1 && !src_url_equal(img.src, img_src_value = /*projectData*/ ctx[0].imgURL)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if ((!current || dirty & /*projectData*/ 1) && raw_value !== (raw_value = /*projectData*/ ctx[0].name + "")) h3.innerHTML = raw_value;
    			if (/*hoverState*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*hoverState*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$p(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			add_render_callback(() => {
    				if (li_outro) li_outro.end(1);

    				li_intro = create_in_transition(li, fly, {
    					x: 500,
    					duration: 1000,
    					delay: 500 + 100 * /*index*/ ctx[1]
    				});

    				li_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			if (li_intro) li_intro.invalidate();

    			li_outro = create_out_transition(li, fly, {
    				x: 500,
    				duration: 200,
    				delay: 50 * /*index*/ ctx[1]
    			});

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (if_block) if_block.d();
    			if (detaching && li_outro) li_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$17.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$17($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(7, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectCard', slots, []);
    	let { projectData } = $$props;
    	let { index } = $$props;

    	// if(!projectData.imgURL) projectData.imgURL = getRandomStockImgPath()
    	const id = projectData._id.toString();

    	// Show and hide descriptions 
    	let hoverState = false;

    	function showDesc() {
    		$$invalidate(2, hoverState = true);
    	}

    	function hideDesc() {
    		$$invalidate(2, hoverState = false);
    	}

    	// Open a project
    	function openProject() {
    		console.log('Open project with id: ', id);
    		set_store_value(ui, $ui.state.focus.projectData = projectData, $ui);
    		set_store_value(ui, $ui.byPage[$ui.page].overlay = 'project', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    		console.log(projectData);
    	}
    	const writable_props = ['projectData', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$h.warn(`<ProjectCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		fly,
    		ui,
    		getRandomStockImgPath,
    		projectData,
    		index,
    		id,
    		hoverState,
    		showDesc,
    		hideDesc,
    		openProject,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    		if ('hoverState' in $$props) $$invalidate(2, hoverState = $$props.hoverState);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [projectData, index, hoverState, id, showDesc, hideDesc, openProject];
    }

    class ProjectCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$17, create_fragment$17, safe_not_equal, { projectData: 0, index: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectCard",
    			options,
    			id: create_fragment$17.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*projectData*/ ctx[0] === undefined && !('projectData' in props)) {
    			console_1$h.warn("<ProjectCard> was created without expected prop 'projectData'");
    		}

    		if (/*index*/ ctx[1] === undefined && !('index' in props)) {
    			console_1$h.warn("<ProjectCard> was created without expected prop 'index'");
    		}
    	}

    	get projectData() {
    		throw new Error("<ProjectCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set projectData(value) {
    		throw new Error("<ProjectCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<ProjectCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ProjectCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/projects/ProjectMap.svelte generated by Svelte v3.46.4 */
    const file$15 = "src/components/shared/projects/ProjectMap.svelte";

    function create_fragment$16(ctx) {
    	let section;
    	let iframe;
    	let iframe_src_value;
    	let section_intro;
    	let section_outro;
    	let current;

    	const block = {
    		c: function create() {
    			section = element("section");
    			iframe = element("iframe");
    			attr_dev(iframe, "frameborder", "0");
    			attr_dev(iframe, "scrolling", "no");
    			attr_dev(iframe, "marginheight", "0");
    			attr_dev(iframe, "marginwidth", "0");
    			attr_dev(iframe, "alt", "A placeholder map");
    			if (!src_url_equal(iframe.src, iframe_src_value = "https://www.openstreetmap.org/export/embed.html?bbox=144.3501162528992%2C-38.22939875284671%2C145.52839994430545%2C-37.35035595234929&layer=hot")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "class", "svelte-1gsdyje");
    			add_location(iframe, file$15, 8, 4, 246);
    			attr_dev(section, "class", "svelte-1gsdyje");
    			add_location(section, file$15, 7, 0, 158);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, iframe);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: -500, duration: 1000 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: -500, duration: 300 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$16.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$16($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectMap', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectMap> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fly, ui });
    	return [];
    }

    class ProjectMap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$16, create_fragment$16, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectMap",
    			options,
    			id: create_fragment$16.name
    		});
    	}
    }

    // Data store objects: temporarily loaded

    const database = writable({
        projects:               null,
        users:                  null,
        organisations:          null
    });

    /* src/components/shared/projects/ProjectList.svelte generated by Svelte v3.46.4 */
    const file$14 = "src/components/shared/projects/ProjectList.svelte";

    function get_each_context$g(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (32:4) {:else}
    function create_else_block$9(ctx) {
    	let projectmap;
    	let current;
    	projectmap = new ProjectMap({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectmap.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectmap, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectmap.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectmap.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectmap, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(32:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (26:4) {#if $ui.byPage.discover.projectView === 'cards'}
    function create_if_block$o(ctx) {
    	let ul;
    	let current;
    	let each_value = /*projects*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-xamf1b");
    			add_location(ul, file$14, 26, 4, 902);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projects*/ 2) {
    				each_value = /*projects*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$g(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$g(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$o.name,
    		type: "if",
    		source: "(26:4) {#if $ui.byPage.discover.projectView === 'cards'}",
    		ctx
    	});

    	return block;
    }

    // (28:8) {#each projects as projectData, index}
    function create_each_block$g(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[5],
    				index: /*index*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$g.name,
    		type: "each",
    		source: "(28:8) {#each projects as projectData, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$15(ctx) {
    	let section;
    	let projectlistheader;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	projectlistheader = new ProjectListHeader({ $$inline: true });
    	const if_block_creators = [create_if_block$o, create_else_block$9];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.discover.projectView === 'cards') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(projectlistheader.$$.fragment);
    			t = space();
    			if_block.c();
    			attr_dev(section, "class", "svelte-xamf1b");
    			add_location(section, file$14, 23, 0, 805);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(projectlistheader, section, null);
    			append_dev(section, t);
    			if_blocks[current_block_type_index].m(section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectlistheader.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectlistheader.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(projectlistheader);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$15.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const randProjNumber = 5;

    // Random project selection
    function getRandomInt$2(min, max) {
    	min = Math.ceil(min);
    	max = Math.floor(max);
    	return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function instance$15($$self, $$props, $$invalidate) {
    	let $database;
    	let $ui;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(2, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectList', slots, []);
    	const shuffleArray = array => array.sort(() => Math.random() - 0.5);
    	const projectDatabase = $database.projects;
    	const projects = shuffleArray(projectDatabase.slice(0, randProjNumber));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectList> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ProjectListHeader,
    		ProjectCard,
    		ProjectMap,
    		ui,
    		database,
    		getRandomInt: getRandomInt$2,
    		shuffleArray,
    		projectDatabase,
    		randProjNumber,
    		projects,
    		$database,
    		$ui
    	});

    	return [$ui, projects];
    }

    class ProjectList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$15, create_fragment$15, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectList",
    			options,
    			id: create_fragment$15.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/TitleBlock.svelte generated by Svelte v3.46.4 */
    const file$13 = "src/components/shared/projects/projectPage/TitleBlock.svelte";

    function create_fragment$14(ctx) {
    	let section;
    	let div;
    	let t0;
    	let span;
    	let t2;
    	let h1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			t0 = text$1("——— ");
    			span = element("span");
    			span.textContent = "waterways project";
    			t2 = space();
    			h1 = element("h1");
    			attr_dev(span, "class", "svelte-2uf3as");
    			add_location(span, file$13, 12, 31, 318);
    			attr_dev(div, "class", "svelte-2uf3as");
    			add_location(div, file$13, 12, 4, 291);
    			attr_dev(h1, "class", "svelte-2uf3as");
    			add_location(h1, file$13, 13, 4, 359);
    			attr_dev(section, "class", "svelte-2uf3as");
    			add_location(section, file$13, 11, 0, 277);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(section, t2);
    			append_dev(section, h1);
    			h1.innerHTML = /*projectName*/ ctx[0];
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*projectName*/ 1) h1.innerHTML = /*projectName*/ ctx[0];		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$14.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$14($$self, $$props, $$invalidate) {
    	let projectName;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TitleBlock', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TitleBlock> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, fade, projectName, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectName' in $$props) $$invalidate(0, projectName = $$props.projectName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			// Reactive variables
    			$$invalidate(0, projectName = $ui.state.focus.projectData.name);
    		}
    	};

    	return [projectName, $ui];
    }

    class TitleBlock$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$14, create_fragment$14, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TitleBlock",
    			options,
    			id: create_fragment$14.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/Infopane.svelte generated by Svelte v3.46.4 */
    const file$12 = "src/components/shared/projects/projectPage/Infopane.svelte";

    function get_each_context$f(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_1$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_2$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_3$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_4$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    // (28:8) {#if projectData.stakeholders.partners.length > 0}
    function create_if_block_5$5(ctx) {
    	let div1;
    	let t;
    	let div0;

    	function select_block_type(ctx, dirty) {
    		if (/*projectData*/ ctx[1].stakeholders.partners.length > 0) return create_if_block_6$3;
    		return create_else_block_5;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	let each_value_4 = /*projectData*/ ctx[1].stakeholders.partners;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$3(get_each_context_4$3(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if_block.c();
    			t = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "info-content svelte-13c3fwn");
    			add_location(div0, file$12, 34, 12, 1088);
    			attr_dev(div1, "class", "info-row svelte-13c3fwn");
    			add_location(div1, file$12, 28, 8, 847);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if_block.m(div1, null);
    			append_dev(div1, t);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div1, t);
    				}
    			}

    			if (dirty & /*projectData*/ 2) {
    				each_value_4 = /*projectData*/ ctx[1].stakeholders.partners;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$3(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$5.name,
    		type: "if",
    		source: "(28:8) {#if projectData.stakeholders.partners.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (32:12) {:else}
    function create_else_block_5(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Partner:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 32, 12, 1018);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_5.name,
    		type: "else",
    		source: "(32:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (30:12) {#if projectData.stakeholders.partners.length > 0}
    function create_if_block_6$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Partners:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 30, 12, 945);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(30:12) {#if projectData.stakeholders.partners.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (36:16) {#each projectData.stakeholders.partners as partner, index}
    function create_each_block_4$3(ctx) {
    	let span;

    	let t0_value = (/*index*/ ctx[4] === 0
    	? /*partner*/ ctx[10]
    	: /*index*/ ctx[4] == /*projectData*/ ctx[1].stakeholders.partners.length - 1
    		? ` and ${/*partner*/ ctx[10]}`
    		: `${/*partner*/ ctx[10]}, `) + "";

    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text$1(t0_value);
    			t1 = space();
    			add_location(span, file$12, 36, 16, 1208);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t0_value !== (t0_value = (/*index*/ ctx[4] === 0
    			? /*partner*/ ctx[10]
    			: /*index*/ ctx[4] == /*projectData*/ ctx[1].stakeholders.partners.length - 1
    				? ` and ${/*partner*/ ctx[10]}`
    				: `${/*partner*/ ctx[10]}, `) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$3.name,
    		type: "each",
    		source: "(36:16) {#each projectData.stakeholders.partners as partner, index}",
    		ctx
    	});

    	return block;
    }

    // (58:8) {:else}
    function create_else_block_4(ctx) {
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let t2_value = /*projectData*/ ctx[1].status.dates.target + "";
    	let t2;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Target date";
    			t1 = space();
    			div1 = element("div");
    			t2 = text$1(t2_value);
    			attr_dev(div0, "class", "info-label svelte-13c3fwn");
    			add_location(div0, file$12, 59, 12, 2239);
    			attr_dev(div1, "class", "info-content svelte-13c3fwn");
    			add_location(div1, file$12, 60, 12, 2294);
    			attr_dev(div2, "class", "info-row svelte-13c3fwn");
    			add_location(div2, file$12, 58, 8, 2204);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t2_value !== (t2_value = /*projectData*/ ctx[1].status.dates.target + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(58:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (53:8) {#if projectData.status.stage === 'complete' || projectData.status.stage === 'ongoing'}
    function create_if_block_4$6(ctx) {
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let t2_value = /*projectData*/ ctx[1].status.dates.completion + "";
    	let t2;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Completion date:";
    			t1 = space();
    			div1 = element("div");
    			t2 = text$1(t2_value);
    			attr_dev(div0, "class", "info-label svelte-13c3fwn");
    			add_location(div0, file$12, 54, 12, 2034);
    			attr_dev(div1, "class", "info-content svelte-13c3fwn");
    			add_location(div1, file$12, 55, 12, 2094);
    			attr_dev(div2, "class", "info-row svelte-13c3fwn");
    			add_location(div2, file$12, 53, 8, 1999);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t2_value !== (t2_value = /*projectData*/ ctx[1].status.dates.completion + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$6.name,
    		type: "if",
    		source: "(53:8) {#if projectData.status.stage === 'complete' || projectData.status.stage === 'ongoing'}",
    		ctx
    	});

    	return block;
    }

    // (70:12) {:else}
    function create_else_block_3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Location:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 70, 12, 2654);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(70:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (68:12) {#if projectData.location.locations.length > 1 }
    function create_if_block_3$d(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Locations:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 68, 12, 2580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$d.name,
    		type: "if",
    		source: "(68:12) {#if projectData.location.locations.length > 1 }",
    		ctx
    	});

    	return block;
    }

    // (74:16) {#each projectData.location.locations as location, index}
    function create_each_block_3$4(ctx) {
    	let span;

    	let t_value = (/*index*/ ctx[4] === 0
    	? /*location*/ ctx[2]
    	: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.locations.length - 1
    		? ` and ${/*location*/ ctx[2]}`
    		: `${/*location*/ ctx[2]}, `) + "";

    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			add_location(span, file$12, 74, 16, 2843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t_value !== (t_value = (/*index*/ ctx[4] === 0
    			? /*location*/ ctx[2]
    			: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.locations.length - 1
    				? ` and ${/*location*/ ctx[2]}`
    				: `${/*location*/ ctx[2]}, `) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$4.name,
    		type: "each",
    		source: "(74:16) {#each projectData.location.locations as location, index}",
    		ctx
    	});

    	return block;
    }

    // (83:12) {:else}
    function create_else_block_2$1(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Subcatchment:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 83, 12, 3233);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(83:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (81:12) {#if $ui.state.focus.projectData.location.subCatchments.length > 1 }
    function create_if_block_2$f(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Subcatchments:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 81, 12, 3155);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$f.name,
    		type: "if",
    		source: "(81:12) {#if $ui.state.focus.projectData.location.subCatchments.length > 1 }",
    		ctx
    	});

    	return block;
    }

    // (87:16) {#each projectData.location.subCatchments as subcatchment, index}
    function create_each_block_2$5(ctx) {
    	let span;

    	let t0_value = (/*index*/ ctx[4] === 0
    	? /*subcatchment*/ ctx[7]
    	: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.subCatchments.length - 1
    		? ` and ${/*subcatchment*/ ctx[7]}`
    		: `${/*subcatchment*/ ctx[7]}, `) + "";

    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text$1(t0_value);
    			t1 = space();
    			add_location(span, file$12, 87, 16, 3434);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t0_value !== (t0_value = (/*index*/ ctx[4] === 0
    			? /*subcatchment*/ ctx[7]
    			: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.subCatchments.length - 1
    				? ` and ${/*subcatchment*/ ctx[7]}`
    				: `${/*subcatchment*/ ctx[7]}, `) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$5.name,
    		type: "each",
    		source: "(87:16) {#each projectData.location.subCatchments as subcatchment, index}",
    		ctx
    	});

    	return block;
    }

    // (96:12) {:else}
    function create_else_block_1$3(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Catchment:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 96, 12, 3819);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(96:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (94:12) {#if projectData.location.catchments.length > 1 }
    function create_if_block_1$i(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Catchments:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 94, 12, 3744);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$i.name,
    		type: "if",
    		source: "(94:12) {#if projectData.location.catchments.length > 1 }",
    		ctx
    	});

    	return block;
    }

    // (100:16) {#each projectData.location.catchments as catchment, index}
    function create_each_block_1$7(ctx) {
    	let span;

    	let t_value = (/*index*/ ctx[4] === 0
    	? /*catchment*/ ctx[5]
    	: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.catchments.length - 1
    		? ` and ${/*catchment*/ ctx[5]}`
    		: `${/*catchment*/ ctx[5]}, `) + "";

    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			add_location(span, file$12, 100, 16, 4011);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t_value !== (t_value = (/*index*/ ctx[4] === 0
    			? /*catchment*/ ctx[5]
    			: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.catchments.length - 1
    				? ` and ${/*catchment*/ ctx[5]}`
    				: `${/*catchment*/ ctx[5]}, `) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$7.name,
    		type: "each",
    		source: "(100:16) {#each projectData.location.catchments as catchment, index}",
    		ctx
    	});

    	return block;
    }

    // (109:12) {:else}
    function create_else_block$8(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Local Government:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 109, 12, 4389);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(109:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (107:12) {#if projectData.location.locations.length > 1 }
    function create_if_block$n(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Local Governments:";
    			attr_dev(div, "class", "info-label svelte-13c3fwn");
    			add_location(div, file$12, 107, 12, 4307);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$n.name,
    		type: "if",
    		source: "(107:12) {#if projectData.location.locations.length > 1 }",
    		ctx
    	});

    	return block;
    }

    // (113:16) {#each projectData.location.locations as location, index}
    function create_each_block$f(ctx) {
    	let span;

    	let t_value = (/*index*/ ctx[4] === 0
    	? "TBA City Council"
    	: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.locations.length - 1
    		? ` and "TBA City Council"`
    		: `"TBA City Council", `) + "";

    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text$1(t_value);
    			add_location(span, file$12, 113, 16, 4586);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && t_value !== (t_value = (/*index*/ ctx[4] === 0
    			? "TBA City Council"
    			: /*index*/ ctx[4] == /*projectData*/ ctx[1].location.locations.length - 1
    				? ` and "TBA City Council"`
    				: `"TBA City Council", `) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$f.name,
    		type: "each",
    		source: "(113:16) {#each projectData.location.locations as location, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$13(ctx) {
    	let section;
    	let div0;
    	let h3;
    	let t1;
    	let div18;
    	let h40;
    	let t3;
    	let div3;
    	let div1;
    	let t5;
    	let div2;
    	let raw_value = /*projectData*/ ctx[1].stakeholders.lead.org + "";
    	let t6;
    	let t7;
    	let h41;
    	let t9;
    	let div6;
    	let div4;
    	let t11;
    	let div5;
    	let t12_value = capitaliseFirst(/*projectData*/ ctx[1].meta.type) + "";
    	let t12;
    	let t13;
    	let div9;
    	let div7;
    	let t15;
    	let div8;
    	let t16_value = capitaliseFirst(/*projectData*/ ctx[1].status.stage) + "";
    	let t16;
    	let t17;
    	let t18;
    	let h42;
    	let t20;
    	let div11;
    	let t21;
    	let div10;
    	let t22;
    	let div13;
    	let t23;
    	let div12;
    	let t24;
    	let div15;
    	let t25;
    	let div14;
    	let t26;
    	let div17;
    	let t27;
    	let div16;
    	let if_block0 = /*projectData*/ ctx[1].stakeholders.partners.length > 0 && create_if_block_5$5(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*projectData*/ ctx[1].status.stage === 'complete' || /*projectData*/ ctx[1].status.stage === 'ongoing') return create_if_block_4$6;
    		return create_else_block_4;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block1 = current_block_type(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (/*projectData*/ ctx[1].location.locations.length > 1) return create_if_block_3$d;
    		return create_else_block_3;
    	}

    	let current_block_type_1 = select_block_type_2(ctx);
    	let if_block2 = current_block_type_1(ctx);
    	let each_value_3 = /*projectData*/ ctx[1].location.locations;
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3$4(get_each_context_3$4(ctx, each_value_3, i));
    	}

    	function select_block_type_3(ctx, dirty) {
    		if (/*$ui*/ ctx[0].state.focus.projectData.location.subCatchments.length > 1) return create_if_block_2$f;
    		return create_else_block_2$1;
    	}

    	let current_block_type_2 = select_block_type_3(ctx);
    	let if_block3 = current_block_type_2(ctx);
    	let each_value_2 = /*projectData*/ ctx[1].location.subCatchments;
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$5(get_each_context_2$5(ctx, each_value_2, i));
    	}

    	function select_block_type_4(ctx, dirty) {
    		if (/*projectData*/ ctx[1].location.catchments.length > 1) return create_if_block_1$i;
    		return create_else_block_1$3;
    	}

    	let current_block_type_3 = select_block_type_4(ctx);
    	let if_block4 = current_block_type_3(ctx);
    	let each_value_1 = /*projectData*/ ctx[1].location.catchments;
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$7(get_each_context_1$7(ctx, each_value_1, i));
    	}

    	function select_block_type_5(ctx, dirty) {
    		if (/*projectData*/ ctx[1].location.locations.length > 1) return create_if_block$n;
    		return create_else_block$8;
    	}

    	let current_block_type_4 = select_block_type_5(ctx);
    	let if_block5 = current_block_type_4(ctx);
    	let each_value = /*projectData*/ ctx[1].location.locations;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "key info";
    			t1 = space();
    			div18 = element("div");
    			h40 = element("h4");
    			h40.textContent = "—— Who's invovled?";
    			t3 = space();
    			div3 = element("div");
    			div1 = element("div");
    			div1.textContent = "Lead organisation:";
    			t5 = space();
    			div2 = element("div");
    			t6 = space();
    			if (if_block0) if_block0.c();
    			t7 = space();
    			h41 = element("h4");
    			h41.textContent = "—— What's the status?";
    			t9 = space();
    			div6 = element("div");
    			div4 = element("div");
    			div4.textContent = "Project type:";
    			t11 = space();
    			div5 = element("div");
    			t12 = text$1(t12_value);
    			t13 = space();
    			div9 = element("div");
    			div7 = element("div");
    			div7.textContent = "Status:";
    			t15 = space();
    			div8 = element("div");
    			t16 = text$1(t16_value);
    			t17 = space();
    			if_block1.c();
    			t18 = space();
    			h42 = element("h4");
    			h42.textContent = "—— Where is it?";
    			t20 = space();
    			div11 = element("div");
    			if_block2.c();
    			t21 = space();
    			div10 = element("div");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t22 = space();
    			div13 = element("div");
    			if_block3.c();
    			t23 = space();
    			div12 = element("div");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t24 = space();
    			div15 = element("div");
    			if_block4.c();
    			t25 = space();
    			div14 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t26 = space();
    			div17 = element("div");
    			if_block5.c();
    			t27 = space();
    			div16 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "svelte-13c3fwn");
    			add_location(h3, file$12, 15, 8, 391);
    			attr_dev(div0, "class", "info-pane-header svelte-13c3fwn");
    			add_location(div0, file$12, 14, 4, 350);
    			attr_dev(h40, "class", "svelte-13c3fwn");
    			add_location(h40, file$12, 20, 8, 514);
    			attr_dev(div1, "class", "info-label svelte-13c3fwn");
    			add_location(div1, file$12, 22, 12, 598);
    			attr_dev(div2, "class", "info-content svelte-13c3fwn");
    			add_location(div2, file$12, 23, 12, 660);
    			attr_dev(div3, "class", "info-row svelte-13c3fwn");
    			add_location(div3, file$12, 21, 8, 563);
    			attr_dev(h41, "class", "svelte-13c3fwn");
    			add_location(h41, file$12, 43, 8, 1476);
    			attr_dev(div4, "class", "info-label svelte-13c3fwn");
    			add_location(div4, file$12, 45, 12, 1563);
    			attr_dev(div5, "class", "info-content svelte-13c3fwn");
    			add_location(div5, file$12, 46, 12, 1620);
    			attr_dev(div6, "class", "info-row svelte-13c3fwn");
    			add_location(div6, file$12, 44, 8, 1528);
    			attr_dev(div7, "class", "info-label svelte-13c3fwn");
    			add_location(div7, file$12, 49, 12, 1752);
    			attr_dev(div8, "class", "info-content svelte-13c3fwn");
    			add_location(div8, file$12, 50, 12, 1803);
    			attr_dev(div9, "class", "info-row svelte-13c3fwn");
    			add_location(div9, file$12, 48, 8, 1717);
    			attr_dev(h42, "class", "svelte-13c3fwn");
    			add_location(h42, file$12, 65, 8, 2438);
    			attr_dev(div10, "class", "info-content svelte-13c3fwn");
    			add_location(div10, file$12, 72, 12, 2725);
    			attr_dev(div11, "class", "info-row svelte-13c3fwn");
    			add_location(div11, file$12, 66, 8, 2484);
    			attr_dev(div12, "class", "info-content svelte-13c3fwn");
    			add_location(div12, file$12, 85, 12, 3308);
    			attr_dev(div13, "class", "info-row svelte-13c3fwn");
    			add_location(div13, file$12, 79, 8, 3039);
    			attr_dev(div14, "class", "info-content svelte-13c3fwn");
    			add_location(div14, file$12, 98, 12, 3891);
    			attr_dev(div15, "class", "info-row svelte-13c3fwn");
    			add_location(div15, file$12, 92, 8, 3647);
    			attr_dev(div16, "class", "info-content svelte-13c3fwn");
    			add_location(div16, file$12, 111, 12, 4468);
    			attr_dev(div17, "class", "info-row svelte-13c3fwn");
    			add_location(div17, file$12, 105, 8, 4211);
    			attr_dev(div18, "class", "info-pane-content svelte-13c3fwn");
    			add_location(div18, file$12, 18, 4, 425);
    			attr_dev(section, "class", "svelte-13c3fwn");
    			add_location(section, file$12, 13, 0, 336);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h3);
    			append_dev(section, t1);
    			append_dev(section, div18);
    			append_dev(div18, h40);
    			append_dev(div18, t3);
    			append_dev(div18, div3);
    			append_dev(div3, div1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			div2.innerHTML = raw_value;
    			append_dev(div18, t6);
    			if (if_block0) if_block0.m(div18, null);
    			append_dev(div18, t7);
    			append_dev(div18, h41);
    			append_dev(div18, t9);
    			append_dev(div18, div6);
    			append_dev(div6, div4);
    			append_dev(div6, t11);
    			append_dev(div6, div5);
    			append_dev(div5, t12);
    			append_dev(div18, t13);
    			append_dev(div18, div9);
    			append_dev(div9, div7);
    			append_dev(div9, t15);
    			append_dev(div9, div8);
    			append_dev(div8, t16);
    			append_dev(div18, t17);
    			if_block1.m(div18, null);
    			append_dev(div18, t18);
    			append_dev(div18, h42);
    			append_dev(div18, t20);
    			append_dev(div18, div11);
    			if_block2.m(div11, null);
    			append_dev(div11, t21);
    			append_dev(div11, div10);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(div10, null);
    			}

    			append_dev(div18, t22);
    			append_dev(div18, div13);
    			if_block3.m(div13, null);
    			append_dev(div13, t23);
    			append_dev(div13, div12);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(div12, null);
    			}

    			append_dev(div18, t24);
    			append_dev(div18, div15);
    			if_block4.m(div15, null);
    			append_dev(div15, t25);
    			append_dev(div15, div14);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div14, null);
    			}

    			append_dev(div18, t26);
    			append_dev(div18, div17);
    			if_block5.m(div17, null);
    			append_dev(div17, t27);
    			append_dev(div17, div16);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div16, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*projectData*/ 2 && raw_value !== (raw_value = /*projectData*/ ctx[1].stakeholders.lead.org + "")) div2.innerHTML = raw_value;
    			if (/*projectData*/ ctx[1].stakeholders.partners.length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5$5(ctx);
    					if_block0.c();
    					if_block0.m(div18, t7);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*projectData*/ 2 && t12_value !== (t12_value = capitaliseFirst(/*projectData*/ ctx[1].meta.type) + "")) set_data_dev(t12, t12_value);
    			if (dirty & /*projectData*/ 2 && t16_value !== (t16_value = capitaliseFirst(/*projectData*/ ctx[1].status.stage) + "")) set_data_dev(t16, t16_value);

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div18, t18);
    				}
    			}

    			if (current_block_type_1 !== (current_block_type_1 = select_block_type_2(ctx))) {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div11, t21);
    				}
    			}

    			if (dirty & /*projectData*/ 2) {
    				each_value_3 = /*projectData*/ ctx[1].location.locations;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$4(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3$4(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(div10, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (current_block_type_2 !== (current_block_type_2 = select_block_type_3(ctx))) {
    				if_block3.d(1);
    				if_block3 = current_block_type_2(ctx);

    				if (if_block3) {
    					if_block3.c();
    					if_block3.m(div13, t23);
    				}
    			}

    			if (dirty & /*projectData*/ 2) {
    				each_value_2 = /*projectData*/ ctx[1].location.subCatchments;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$5(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2$5(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(div12, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (current_block_type_3 !== (current_block_type_3 = select_block_type_4(ctx))) {
    				if_block4.d(1);
    				if_block4 = current_block_type_3(ctx);

    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(div15, t25);
    				}
    			}

    			if (dirty & /*projectData*/ 2) {
    				each_value_1 = /*projectData*/ ctx[1].location.catchments;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$7(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$7(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(div14, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (current_block_type_4 !== (current_block_type_4 = select_block_type_5(ctx))) {
    				if_block5.d(1);
    				if_block5 = current_block_type_4(ctx);

    				if (if_block5) {
    					if_block5.c();
    					if_block5.m(div17, t27);
    				}
    			}

    			if (dirty & /*projectData*/ 2) {
    				each_value = /*projectData*/ ctx[1].location.locations;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$f(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$f(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div16, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			destroy_each(each_blocks_3, detaching);
    			if_block3.d();
    			destroy_each(each_blocks_2, detaching);
    			if_block4.d();
    			destroy_each(each_blocks_1, detaching);
    			if_block5.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$13.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$13($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Infopane', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Infopane> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		ui,
    		capitaliseFirst,
    		projectData,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(1, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 1) {
    			// Reactive variables
    			$$invalidate(1, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [$ui, projectData];
    }

    class Infopane$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$13, create_fragment$13, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Infopane",
    			options,
    			id: create_fragment$13.name
    		});
    	}
    }

    /* node_modules/svelte-material-icons/StarOutline.svelte generated by Svelte v3.46.4 */

    const file$11 = "node_modules/svelte-material-icons/StarOutline.svelte";

    function create_fragment$12(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z");
    			attr_dev(path, "fill", /*color*/ ctx[2]);
    			add_location(path, file$11, 8, 59, 234);
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			add_location(svg, file$11, 8, 0, 175);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*color*/ 4) {
    				attr_dev(path, "fill", /*color*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewBox*/ 8) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$12.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$12($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StarOutline', slots, []);
    	let { size = "1em" } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { color = "currentColor" } = $$props;
    	let { viewBox = "0 0 24 24" } = $$props;
    	const writable_props = ['size', 'width', 'height', 'color', 'viewBox'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StarOutline> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, height, color, viewBox, size];
    }

    class StarOutline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$12, create_fragment$12, safe_not_equal, {
    			size: 4,
    			width: 0,
    			height: 1,
    			color: 2,
    			viewBox: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StarOutline",
    			options,
    			id: create_fragment$12.name
    		});
    	}

    	get size() {
    		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<StarOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<StarOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-material-icons/Star.svelte generated by Svelte v3.46.4 */

    const file$10 = "node_modules/svelte-material-icons/Star.svelte";

    function create_fragment$11(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z");
    			attr_dev(path, "fill", /*color*/ ctx[2]);
    			add_location(path, file$10, 8, 59, 234);
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			add_location(svg, file$10, 8, 0, 175);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*color*/ 4) {
    				attr_dev(path, "fill", /*color*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewBox*/ 8) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$11.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$11($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Star', slots, []);
    	let { size = "1em" } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { color = "currentColor" } = $$props;
    	let { viewBox = "0 0 24 24" } = $$props;
    	const writable_props = ['size', 'width', 'height', 'color', 'viewBox'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Star> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, height, color, viewBox, size];
    }

    class Star extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$11, create_fragment$11, safe_not_equal, {
    			size: 4,
    			width: 0,
    			height: 1,
    			color: 2,
    			viewBox: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Star",
    			options,
    			id: create_fragment$11.name
    		});
    	}

    	get size() {
    		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<Star>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<Star>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-material-icons/Heart.svelte generated by Svelte v3.46.4 */

    const file$$ = "node_modules/svelte-material-icons/Heart.svelte";

    function create_fragment$10(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M12,21.35L10.55,20.03C5.4,15.36 2,12.27 2,8.5C2,5.41 4.42,3 7.5,3C9.24,3 10.91,3.81 12,5.08C13.09,3.81 14.76,3 16.5,3C19.58,3 22,5.41 22,8.5C22,12.27 18.6,15.36 13.45,20.03L12,21.35Z");
    			attr_dev(path, "fill", /*color*/ ctx[2]);
    			add_location(path, file$$, 8, 59, 234);
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			add_location(svg, file$$, 8, 0, 175);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*color*/ 4) {
    				attr_dev(path, "fill", /*color*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewBox*/ 8) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$10.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$10($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Heart', slots, []);
    	let { size = "1em" } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { color = "currentColor" } = $$props;
    	let { viewBox = "0 0 24 24" } = $$props;
    	const writable_props = ['size', 'width', 'height', 'color', 'viewBox'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Heart> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, height, color, viewBox, size];
    }

    class Heart extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$10, create_fragment$10, safe_not_equal, {
    			size: 4,
    			width: 0,
    			height: 1,
    			color: 2,
    			viewBox: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Heart",
    			options,
    			id: create_fragment$10.name
    		});
    	}

    	get size() {
    		throw new Error("<Heart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Heart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Heart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Heart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Heart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Heart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Heart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Heart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<Heart>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<Heart>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/svelte-material-icons/HeartOutline.svelte generated by Svelte v3.46.4 */

    const file$_ = "node_modules/svelte-material-icons/HeartOutline.svelte";

    function create_fragment$$(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M12.1,18.55L12,18.65L11.89,18.55C7.14,14.24 4,11.39 4,8.5C4,6.5 5.5,5 7.5,5C9.04,5 10.54,6 11.07,7.36H12.93C13.46,6 14.96,5 16.5,5C18.5,5 20,6.5 20,8.5C20,11.39 16.86,14.24 12.1,18.55M16.5,3C14.76,3 13.09,3.81 12,5.08C10.91,3.81 9.24,3 7.5,3C4.42,3 2,5.41 2,8.5C2,12.27 5.4,15.36 10.55,20.03L12,21.35L13.45,20.03C18.6,15.36 22,12.27 22,8.5C22,5.41 19.58,3 16.5,3Z");
    			attr_dev(path, "fill", /*color*/ ctx[2]);
    			add_location(path, file$_, 8, 59, 234);
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			add_location(svg, file$_, 8, 0, 175);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*color*/ 4) {
    				attr_dev(path, "fill", /*color*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewBox*/ 8) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$$($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HeartOutline', slots, []);
    	let { size = "1em" } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { color = "currentColor" } = $$props;
    	let { viewBox = "0 0 24 24" } = $$props;
    	const writable_props = ['size', 'width', 'height', 'color', 'viewBox'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HeartOutline> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, height, color, viewBox, size];
    }

    class HeartOutline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$$, create_fragment$$, safe_not_equal, {
    			size: 4,
    			width: 0,
    			height: 1,
    			color: 2,
    			viewBox: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HeartOutline",
    			options,
    			id: create_fragment$$.name
    		});
    	}

    	get size() {
    		throw new Error("<HeartOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<HeartOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<HeartOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<HeartOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<HeartOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<HeartOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<HeartOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<HeartOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<HeartOutline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<HeartOutline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/projects/projectPage/UserAction.svelte generated by Svelte v3.46.4 */
    const file$Z = "src/components/shared/projects/projectPage/UserAction.svelte";

    function create_fragment$_(ctx) {
    	let section;
    	let span0;
    	let staroutline;
    	let t;
    	let span1;
    	let heartoutline;
    	let current;
    	staroutline = new StarOutline({ $$inline: true });
    	heartoutline = new HeartOutline({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			span0 = element("span");
    			create_component(staroutline.$$.fragment);
    			t = space();
    			span1 = element("span");
    			create_component(heartoutline.$$.fragment);
    			attr_dev(span0, "class", "favourite svelte-cnephw");
    			add_location(span0, file$Z, 15, 4, 519);
    			attr_dev(span1, "class", "like svelte-cnephw");
    			add_location(span1, file$Z, 18, 4, 646);
    			attr_dev(section, "class", "actions-pane svelte-cnephw");
    			add_location(section, file$Z, 14, 0, 482);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, span0);
    			mount_component(staroutline, span0, null);
    			append_dev(section, t);
    			append_dev(section, span1);
    			mount_component(heartoutline, span1, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(staroutline.$$.fragment, local);
    			transition_in(heartoutline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(staroutline.$$.fragment, local);
    			transition_out(heartoutline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(staroutline);
    			destroy_component(heartoutline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$_($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserAction', slots, []);
    	const projectData = $ui.state.focus.projectData;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserAction> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ui,
    		StarOutline,
    		Star,
    		Heart,
    		HeartOutline,
    		projectData,
    		$ui
    	});

    	return [];
    }

    class UserAction$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$_, create_fragment$_, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserAction",
    			options,
    			id: create_fragment$_.name
    		});
    	}
    }

    /* src/components/shared/misc/HWS_tags.svelte generated by Svelte v3.46.4 */
    const file$Y = "src/components/shared/misc/HWS_tags.svelte";

    function get_each_context$e(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	child_ctx[3] = i;
    	return child_ctx;
    }

    // (14:8) {#each data.array as item, index}
    function create_each_block$e(ctx) {
    	let div;
    	let raw_value = /*item*/ ctx[1] + "";
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", div_class_value = "" + (null_to_empty(slugify(/*item*/ ctx[1])) + " svelte-2yee74"));
    			add_location(div, file$Y, 14, 8, 331);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			div.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data*/ 1 && raw_value !== (raw_value = /*item*/ ctx[1] + "")) div.innerHTML = raw_value;
    			if (dirty & /*data*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(slugify(/*item*/ ctx[1])) + " svelte-2yee74"))) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$e.name,
    		type: "each",
    		source: "(14:8) {#each data.array as item, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Z(ctx) {
    	let section;
    	let h4;
    	let raw_value = /*data*/ ctx[0].name + "";
    	let t;
    	let div;
    	let each_value = /*data*/ ctx[0].array;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			h4 = element("h4");
    			t = space();
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h4, "class", "svelte-2yee74");
    			add_location(h4, file$Y, 11, 4, 216);
    			attr_dev(div, "class", "hws-tag-container svelte-2yee74");
    			add_location(div, file$Y, 12, 4, 247);
    			attr_dev(section, "class", "svelte-2yee74");
    			add_location(section, file$Y, 10, 0, 202);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, h4);
    			h4.innerHTML = raw_value;
    			append_dev(section, t);
    			append_dev(section, div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*data*/ 1 && raw_value !== (raw_value = /*data*/ ctx[0].name + "")) h4.innerHTML = raw_value;
    			if (dirty & /*slugify, data*/ 1) {
    				each_value = /*data*/ ctx[0].array;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$e(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$e(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HWS_tags', slots, []);
    	let { data } = $$props;
    	const writable_props = ['data'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HWS_tags> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    	};

    	$$self.$capture_state = () => ({ ui, slugify, data });

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data];
    }

    class HWS_tags extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { data: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HWS_tags",
    			options,
    			id: create_fragment$Z.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !('data' in props)) {
    			console.warn("<HWS_tags> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<HWS_tags>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<HWS_tags>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/misc/HWS_boxes.svelte generated by Svelte v3.46.4 */
    const file$X = "src/components/shared/misc/HWS_boxes.svelte";

    function get_each_context$d(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	child_ctx[3] = i;
    	return child_ctx;
    }

    // (19:8) {#each data.array as item, index}
    function create_each_block$d(ctx) {
    	let div2;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let t1;
    	let div1;
    	let h5;
    	let raw_value = /*item*/ ctx[1] + "";
    	let t2;
    	let div2_id_value;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			div1 = element("div");
    			h5 = element("h5");
    			t2 = space();
    			if (!src_url_equal(img.src, img_src_value = hwsSchema[/*data*/ ctx[0].schemaName][/*item*/ ctx[1]].imgURL)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "tba");
    			attr_dev(img, "class", "svelte-2qenhp");
    			add_location(img, file$X, 20, 12, 636);
    			attr_dev(div0, "class", "height-pad svelte-2qenhp");
    			add_location(div0, file$X, 21, 12, 713);
    			attr_dev(h5, "class", "svelte-2qenhp");
    			add_location(h5, file$X, 23, 16, 796);
    			attr_dev(div1, "class", "label svelte-2qenhp");
    			add_location(div1, file$X, 22, 12, 758);
    			attr_dev(div2, "class", "box svelte-2qenhp");
    			attr_dev(div2, "id", div2_id_value = `box-${slugify(/*data*/ ctx[0].name)}-${slugify(/*item*/ ctx[1])}`);
    			add_location(div2, file$X, 19, 8, 553);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, img);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, h5);
    			h5.innerHTML = raw_value;
    			append_dev(div2, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data*/ 1 && !src_url_equal(img.src, img_src_value = hwsSchema[/*data*/ ctx[0].schemaName][/*item*/ ctx[1]].imgURL)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*data*/ 1 && raw_value !== (raw_value = /*item*/ ctx[1] + "")) h5.innerHTML = raw_value;
    			if (dirty & /*data*/ 1 && div2_id_value !== (div2_id_value = `box-${slugify(/*data*/ ctx[0].name)}-${slugify(/*item*/ ctx[1])}`)) {
    				attr_dev(div2, "id", div2_id_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$d.name,
    		type: "each",
    		source: "(19:8) {#each data.array as item, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Y(ctx) {
    	let section;
    	let div0;
    	let h4;
    	let raw_value = /*data*/ ctx[0].name + "";
    	let t;
    	let div1;
    	let section_transition;
    	let current;
    	let each_value = /*data*/ ctx[0].array;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h4 = element("h4");
    			t = space();
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h4, "class", "svelte-2qenhp");
    			add_location(h4, file$X, 15, 8, 427);
    			add_location(div0, file$X, 14, 4, 413);
    			attr_dev(div1, "class", "hws-box-container svelte-2qenhp");
    			add_location(div1, file$X, 17, 4, 469);
    			attr_dev(section, "class", "svelte-2qenhp");
    			add_location(section, file$X, 13, 0, 382);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h4);
    			h4.innerHTML = raw_value;
    			append_dev(section, t);
    			append_dev(section, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*data*/ 1) && raw_value !== (raw_value = /*data*/ ctx[0].name + "")) h4.innerHTML = raw_value;
    			if (dirty & /*slugify, data, hwsSchema*/ 1) {
    				each_value = /*data*/ ctx[0].array;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$d(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$d(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, true);
    				section_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, false);
    			section_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			if (detaching && section_transition) section_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('HWS_boxes', slots, []);
    	let { data } = $$props;
    	const writable_props = ['data'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HWS_boxes> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		ui,
    		hwsSchema,
    		slugify,
    		slide,
    		data
    	});

    	$$self.$inject_state = $$props => {
    		if ('data' in $$props) $$invalidate(0, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [data];
    }

    class HWS_boxes extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { data: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "HWS_boxes",
    			options,
    			id: create_fragment$Y.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*data*/ ctx[0] === undefined && !('data' in props)) {
    			console.warn("<HWS_boxes> was created without expected prop 'data'");
    		}
    	}

    	get data() {
    		throw new Error("<HWS_boxes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<HWS_boxes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/projects/projectPage/ProjectSources.svelte generated by Svelte v3.46.4 */
    const file$W = "src/components/shared/projects/projectPage/ProjectSources.svelte";

    function get_each_context$c(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    // (13:4) {#if projectData.links.length > 0}
    function create_if_block_1$h(ctx) {
    	let div0;
    	let h4;
    	let t1;
    	let div1;
    	let ul;
    	let each_value = /*projectData*/ ctx[0].links;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h4 = element("h4");
    			h4.textContent = "— Links";
    			t1 = space();
    			div1 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h4, "class", "svelte-16et155");
    			add_location(h4, file$W, 14, 8, 365);
    			attr_dev(div0, "class", "");
    			add_location(div0, file$W, 13, 4, 345);
    			attr_dev(ul, "class", "svelte-16et155");
    			add_location(ul, file$W, 17, 8, 417);
    			add_location(div1, file$W, 16, 4, 403);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h4);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1) {
    				each_value = /*projectData*/ ctx[0].links;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$c(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$c(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$h.name,
    		type: "if",
    		source: "(13:4) {#if projectData.links.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (19:12) {#each projectData.links as linkData, index}
    function create_each_block$c(ctx) {
    	let li;
    	let a;
    	let t0_value = /*linkData*/ ctx[2].label + "";
    	let t0;
    	let a_href_value;
    	let t1;
    	let t2_value = /*linkData*/ ctx[2].description + "";
    	let t2;

    	const block = {
    		c: function create() {
    			li = element("li");
    			a = element("a");
    			t0 = text$1(t0_value);
    			t1 = text$1(" - ");
    			t2 = text$1(t2_value);
    			attr_dev(a, "href", a_href_value = /*linkData*/ ctx[2].url);
    			attr_dev(a, "class", "svelte-16et155");
    			add_location(a, file$W, 19, 16, 495);
    			add_location(li, file$W, 19, 12, 491);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, a);
    			append_dev(a, t0);
    			append_dev(li, t1);
    			append_dev(li, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1 && t0_value !== (t0_value = /*linkData*/ ctx[2].label + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*projectData*/ 1 && a_href_value !== (a_href_value = /*linkData*/ ctx[2].url)) {
    				attr_dev(a, "href", a_href_value);
    			}

    			if (dirty & /*projectData*/ 1 && t2_value !== (t2_value = /*linkData*/ ctx[2].description + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$c.name,
    		type: "each",
    		source: "(19:12) {#each projectData.links as linkData, index}",
    		ctx
    	});

    	return block;
    }

    // (26:4) {#if projectData.contact.primary.firstName !== '' && projectData.contact.primary.lastName !== ''}
    function create_if_block$m(ctx) {
    	let div0;
    	let h4;
    	let t1;
    	let div5;
    	let div1;
    	let t3;
    	let div2;
    	let html_tag;
    	let raw0_value = /*projectData*/ ctx[0].contact.primary.firstName + "";
    	let t4;
    	let html_tag_1;
    	let raw1_value = /*projectData*/ ctx[0].contact.primary.lastName + "";
    	let t5;
    	let div3;
    	let t7;
    	let div4;
    	let raw2_value = /*projectData*/ ctx[0].contact.primary.email + "";

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h4 = element("h4");
    			h4.textContent = "— Contact";
    			t1 = space();
    			div5 = element("div");
    			div1 = element("div");
    			div1.textContent = "Name:";
    			t3 = space();
    			div2 = element("div");
    			html_tag = new HtmlTag();
    			t4 = space();
    			html_tag_1 = new HtmlTag();
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "Email:";
    			t7 = space();
    			div4 = element("div");
    			attr_dev(h4, "class", "svelte-16et155");
    			add_location(h4, file$W, 27, 8, 745);
    			add_location(div0, file$W, 26, 4, 731);
    			attr_dev(div1, "class", "info-label svelte-16et155");
    			add_location(div1, file$W, 30, 8, 816);
    			html_tag.a = t4;
    			html_tag_1.a = null;
    			attr_dev(div2, "class", "info-content svelte-16et155");
    			add_location(div2, file$W, 31, 8, 861);
    			attr_dev(div3, "class", "info-label svelte-16et155");
    			add_location(div3, file$W, 34, 8, 1015);
    			attr_dev(div4, "class", "info-content svelte-16et155");
    			add_location(div4, file$W, 35, 8, 1061);
    			attr_dev(div5, "class", "info-row svelte-16et155");
    			add_location(div5, file$W, 29, 4, 785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h4);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div1);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			html_tag.m(raw0_value, div2);
    			append_dev(div2, t4);
    			html_tag_1.m(raw1_value, div2);
    			append_dev(div5, t5);
    			append_dev(div5, div3);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			div4.innerHTML = raw2_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1 && raw0_value !== (raw0_value = /*projectData*/ ctx[0].contact.primary.firstName + "")) html_tag.p(raw0_value);
    			if (dirty & /*projectData*/ 1 && raw1_value !== (raw1_value = /*projectData*/ ctx[0].contact.primary.lastName + "")) html_tag_1.p(raw1_value);
    			if (dirty & /*projectData*/ 1 && raw2_value !== (raw2_value = /*projectData*/ ctx[0].contact.primary.email + "")) div4.innerHTML = raw2_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div5);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$m.name,
    		type: "if",
    		source: "(26:4) {#if projectData.contact.primary.firstName !== '' && projectData.contact.primary.lastName !== ''}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$X(ctx) {
    	let section;
    	let t;
    	let section_transition;
    	let current;
    	let if_block0 = /*projectData*/ ctx[0].links.length > 0 && create_if_block_1$h(ctx);
    	let if_block1 = /*projectData*/ ctx[0].contact.primary.firstName !== '' && /*projectData*/ ctx[0].contact.primary.lastName !== '' && create_if_block$m(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(section, "class", "svelte-16et155");
    			add_location(section, file$W, 11, 0, 275);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t);
    			if (if_block1) if_block1.m(section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*projectData*/ ctx[0].links.length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$h(ctx);
    					if_block0.c();
    					if_block0.m(section, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*projectData*/ ctx[0].contact.primary.firstName !== '' && /*projectData*/ ctx[0].contact.primary.lastName !== '') {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$m(ctx);
    					if_block1.c();
    					if_block1.m(section, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, true);
    				section_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, false);
    			section_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching && section_transition) section_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectSources', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectSources> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ slide, ui, projectData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			// Reactive variables
    			$$invalidate(0, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [projectData, $ui];
    }

    class ProjectSources extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$X, create_fragment$X, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectSources",
    			options,
    			id: create_fragment$X.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/ProjectLearnings.svelte generated by Svelte v3.46.4 */
    const file$V = "src/components/shared/projects/projectPage/ProjectLearnings.svelte";

    function get_each_context$b(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_1$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    function get_each_context_2$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	child_ctx[4] = i;
    	return child_ctx;
    }

    // (13:4) {#if projectData.learnings.general.length > 0}
    function create_if_block_2$e(ctx) {
    	let h5;
    	let t1;
    	let ul;
    	let each_value_2 = /*projectData*/ ctx[0].learnings.general;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$4(get_each_context_2$4(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "— General learnings";
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h5, "class", "svelte-1mel3w3");
    			add_location(h5, file$V, 13, 8, 361);
    			attr_dev(ul, "class", "svelte-1mel3w3");
    			add_location(ul, file$V, 14, 8, 403);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1) {
    				each_value_2 = /*projectData*/ ctx[0].learnings.general;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$4(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$e.name,
    		type: "if",
    		source: "(13:4) {#if projectData.learnings.general.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (16:12) {#each projectData.learnings.general as learning, index}
    function create_each_block_2$4(ctx) {
    	let li;
    	let raw_value = /*learning*/ ctx[2] + "";

    	const block = {
    		c: function create() {
    			li = element("li");
    			attr_dev(li, "class", "margin-top");
    			add_location(li, file$V, 16, 16, 493);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			li.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1 && raw_value !== (raw_value = /*learning*/ ctx[2] + "")) li.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$4.name,
    		type: "each",
    		source: "(16:12) {#each projectData.learnings.general as learning, index}",
    		ctx
    	});

    	return block;
    }

    // (22:4) {#if projectData.learnings.worked.length > 0}
    function create_if_block_1$g(ctx) {
    	let h5;
    	let t1;
    	let ul;
    	let each_value_1 = /*projectData*/ ctx[0].learnings.worked;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$6(get_each_context_1$6(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "— What worked well";
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h5, "class", "svelte-1mel3w3");
    			add_location(h5, file$V, 22, 8, 643);
    			attr_dev(ul, "class", "svelte-1mel3w3");
    			add_location(ul, file$V, 23, 8, 684);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1) {
    				each_value_1 = /*projectData*/ ctx[0].learnings.worked;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$6(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$g.name,
    		type: "if",
    		source: "(22:4) {#if projectData.learnings.worked.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (25:12) {#each projectData.learnings.worked as learning, index}
    function create_each_block_1$6(ctx) {
    	let li;
    	let raw_value = /*learning*/ ctx[2] + "";

    	const block = {
    		c: function create() {
    			li = element("li");
    			attr_dev(li, "class", "margin-top");
    			add_location(li, file$V, 25, 12, 769);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			li.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1 && raw_value !== (raw_value = /*learning*/ ctx[2] + "")) li.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$6.name,
    		type: "each",
    		source: "(25:12) {#each projectData.learnings.worked as learning, index}",
    		ctx
    	});

    	return block;
    }

    // (30:4) {#if projectData.learnings.failed.length > 0}
    function create_if_block$l(ctx) {
    	let h5;
    	let t1;
    	let ul;
    	let each_value = /*projectData*/ ctx[0].learnings.failed;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			h5 = element("h5");
    			h5.textContent = "— What didn't work well";
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h5, "class", "svelte-1mel3w3");
    			add_location(h5, file$V, 30, 8, 917);
    			attr_dev(ul, "class", "svelte-1mel3w3");
    			add_location(ul, file$V, 31, 8, 963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h5, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1) {
    				each_value = /*projectData*/ ctx[0].learnings.failed;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$b(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$b(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h5);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$l.name,
    		type: "if",
    		source: "(30:4) {#if projectData.learnings.failed.length > 0}",
    		ctx
    	});

    	return block;
    }

    // (33:12) {#each projectData.learnings.failed as learning, index}
    function create_each_block$b(ctx) {
    	let li;
    	let raw_value = /*learning*/ ctx[2] + "";

    	const block = {
    		c: function create() {
    			li = element("li");
    			attr_dev(li, "class", "margin-top");
    			add_location(li, file$V, 33, 12, 1048);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			li.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 1 && raw_value !== (raw_value = /*learning*/ ctx[2] + "")) li.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$b.name,
    		type: "each",
    		source: "(33:12) {#each projectData.learnings.failed as learning, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$W(ctx) {
    	let section;
    	let t0;
    	let t1;
    	let section_transition;
    	let current;
    	let if_block0 = /*projectData*/ ctx[0].learnings.general.length > 0 && create_if_block_2$e(ctx);
    	let if_block1 = /*projectData*/ ctx[0].learnings.worked.length > 0 && create_if_block_1$g(ctx);
    	let if_block2 = /*projectData*/ ctx[0].learnings.failed.length > 0 && create_if_block$l(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			add_location(section, file$V, 11, 0, 275);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t0);
    			if (if_block1) if_block1.m(section, null);
    			append_dev(section, t1);
    			if (if_block2) if_block2.m(section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*projectData*/ ctx[0].learnings.general.length > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$e(ctx);
    					if_block0.c();
    					if_block0.m(section, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*projectData*/ ctx[0].learnings.worked.length > 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$g(ctx);
    					if_block1.c();
    					if_block1.m(section, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*projectData*/ ctx[0].learnings.failed.length > 0) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block$l(ctx);
    					if_block2.c();
    					if_block2.m(section, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, true);
    				section_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, false);
    			section_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (detaching && section_transition) section_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectLearnings', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectLearnings> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ slide, ui, projectData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			// Reactive variables
    			$$invalidate(0, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [projectData, $ui];
    }

    class ProjectLearnings extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$W, create_fragment$W, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectLearnings",
    			options,
    			id: create_fragment$W.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/ProjectContent.svelte generated by Svelte v3.46.4 */

    const { Object: Object_1$4, console: console_1$g } = globals;
    const file$U = "src/components/shared/projects/projectPage/ProjectContent.svelte";

    // (55:4) {#if visibility.aboutDetails }
    function create_if_block_5$4(ctx) {
    	let div;
    	let h3;
    	let t1;
    	let html_tag;
    	let raw_value = /*projectData*/ ctx[1].about.longDescription + "";
    	let t2;
    	let div_transition;
    	let current;
    	let if_block = /*projectData*/ ctx[1].about.history && create_if_block_6$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "—— Project details";
    			t1 = space();
    			html_tag = new HtmlTag();
    			t2 = space();
    			if (if_block) if_block.c();
    			add_location(h3, file$U, 56, 12, 2089);
    			html_tag.a = t2;
    			add_location(div, file$U, 55, 8, 2033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t1);
    			html_tag.m(raw_value, div);
    			append_dev(div, t2);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*projectData*/ 2) && raw_value !== (raw_value = /*projectData*/ ctx[1].about.longDescription + "")) html_tag.p(raw_value);

    			if (/*projectData*/ ctx[1].about.history) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_6$2(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 1200 }, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 1200 }, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(55:4) {#if visibility.aboutDetails }",
    		ctx
    	});

    	return block;
    }

    // (60:12) {#if projectData.about.history}
    function create_if_block_6$2(ctx) {
    	let h3;
    	let t1;
    	let html_tag;
    	let raw_value = /*projectData*/ ctx[1].about.history + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "—— Project history";
    			t1 = space();
    			html_tag = new HtmlTag();
    			html_anchor = empty();
    			attr_dev(h3, "class", "margin-top svelte-ake6ss");
    			add_location(h3, file$U, 60, 16, 2244);
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectData*/ 2 && raw_value !== (raw_value = /*projectData*/ ctx[1].about.history + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(60:12) {#if projectData.about.history}",
    		ctx
    	});

    	return block;
    }

    // (80:4) {#if visibility.hwsDetails }
    function create_if_block_4$5(ctx) {
    	let hws_boxes;
    	let current;

    	hws_boxes = new HWS_boxes({
    			props: { data: /*conditionsData*/ ctx[6] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(hws_boxes.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(hws_boxes, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const hws_boxes_changes = {};
    			if (dirty & /*conditionsData*/ 64) hws_boxes_changes.data = /*conditionsData*/ ctx[6];
    			hws_boxes.$set(hws_boxes_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(hws_boxes.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(hws_boxes.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(hws_boxes, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(80:4) {#if visibility.hwsDetails }",
    		ctx
    	});

    	return block;
    }

    // (93:4) {#if (Object.values(projectData.learnings).flat().length > 0)}
    function create_if_block_2$d(ctx) {
    	let h3;
    	let t1;
    	let p;
    	let t2;
    	let html_tag;
    	let raw0_value = /*projectData*/ ctx[1].stakeholders.lead.org + "";
    	let t3;
    	let t4;
    	let t5;
    	let div3;
    	let div2;
    	let div0;
    	let t6;
    	let div1;
    	let div3_transition;
    	let t8;
    	let hr;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*visibility*/ ctx[0].learningsDetails && create_if_block_3$c(ctx);

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "—— Project learnings";
    			t1 = space();
    			p = element("p");
    			t2 = text$1("The follow project notes are provided by ");
    			html_tag = new HtmlTag();
    			t3 = text$1(" to help document key lessons from this project.");
    			t4 = space();
    			if (if_block) if_block.c();
    			t5 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t6 = space();
    			div1 = element("div");
    			div1.textContent = "↓";
    			t8 = space();
    			hr = element("hr");
    			add_location(h3, file$U, 93, 8, 3589);
    			html_tag.a = t3;
    			add_location(p, file$U, 94, 8, 3639);
    			attr_dev(div0, "class", "toggle-label svelte-ake6ss");
    			add_location(div0, file$U, 101, 16, 4095);
    			attr_dev(div1, "class", "toggle-icon down svelte-ake6ss");
    			add_location(div1, file$U, 102, 16, 4166);
    			attr_dev(div2, "id", "learningsDetails");
    			attr_dev(div2, "class", "collapse__header svelte-ake6ss");
    			attr_dev(div2, "type", "button");
    			toggle_class(div2, "selected", /*visibility*/ ctx[0].learnings);
    			add_location(div2, file$U, 99, 12, 3931);
    			attr_dev(div3, "class", "collapse__body svelte-ake6ss");
    			add_location(div3, file$U, 98, 8, 3870);
    			add_location(hr, file$U, 105, 8, 4252);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t2);
    			html_tag.m(raw0_value, p);
    			append_dev(p, t3);
    			insert_dev(target, t4, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			div0.innerHTML = /*learningsLabel*/ ctx[3];
    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, hr, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div2, "click", /*togglePane*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*projectData*/ 2) && raw0_value !== (raw0_value = /*projectData*/ ctx[1].stakeholders.lead.org + "")) html_tag.p(raw0_value);

    			if (/*visibility*/ ctx[0].learningsDetails) {
    				if (if_block) {
    					if (dirty & /*visibility*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_3$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t5.parentNode, t5);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*learningsLabel*/ 8) div0.innerHTML = /*learningsLabel*/ ctx[3];
    			if (dirty & /*visibility*/ 1) {
    				toggle_class(div2, "selected", /*visibility*/ ctx[0].learnings);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t4);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			if (detaching && div3_transition) div3_transition.end();
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(hr);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$d.name,
    		type: "if",
    		source: "(93:4) {#if (Object.values(projectData.learnings).flat().length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (96:8) {#if visibility.learningsDetails }
    function create_if_block_3$c(ctx) {
    	let projectlearnings;
    	let current;
    	projectlearnings = new ProjectLearnings({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectlearnings.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectlearnings, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectlearnings.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectlearnings.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectlearnings, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$c.name,
    		type: "if",
    		source: "(96:8) {#if visibility.learningsDetails }",
    		ctx
    	});

    	return block;
    }

    // (110:4) {#if (Object.values(projectData.links).length > 0)}
    function create_if_block$k(ctx) {
    	let h3;
    	let t1;
    	let p;
    	let t2;
    	let html_tag;
    	let raw0_value = /*projectData*/ ctx[1].stakeholders.lead.org + "";
    	let t3;
    	let html_tag_1;
    	let raw1_value = /*projectData*/ ctx[1].status.dates.lastUpdate + "";
    	let t4;
    	let t5;
    	let t6;
    	let div3;
    	let div2;
    	let div0;
    	let t7;
    	let div1;
    	let div3_transition;
    	let t9;
    	let hr;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*visibility*/ ctx[0].sourcesDetails && create_if_block_1$f(ctx);

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "—— Where to find more information";
    			t1 = space();
    			p = element("p");
    			t2 = text$1("Project information was provided from ");
    			html_tag = new HtmlTag();
    			t3 = text$1(" in ");
    			html_tag_1 = new HtmlTag();
    			t4 = text$1(" .");
    			t5 = space();
    			if (if_block) if_block.c();
    			t6 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t7 = space();
    			div1 = element("div");
    			div1.textContent = "↓";
    			t9 = space();
    			hr = element("hr");
    			add_location(h3, file$U, 110, 8, 4376);
    			html_tag.a = t3;
    			html_tag_1.a = t4;
    			add_location(p, file$U, 111, 8, 4439);
    			attr_dev(div0, "class", "toggle-label svelte-ake6ss");
    			add_location(div0, file$U, 118, 16, 4896);
    			attr_dev(div1, "class", "toggle-icon down svelte-ake6ss");
    			add_location(div1, file$U, 119, 16, 4965);
    			attr_dev(div2, "id", "sourcesDetails");
    			attr_dev(div2, "class", "collapse__header svelte-ake6ss");
    			attr_dev(div2, "type", "button");
    			toggle_class(div2, "selected", /*visibility*/ ctx[0].sourcesDetails);
    			add_location(div2, file$U, 116, 12, 4729);
    			attr_dev(div3, "class", "collapse__body svelte-ake6ss");
    			add_location(div3, file$U, 115, 8, 4668);
    			add_location(hr, file$U, 122, 8, 5051);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t2);
    			html_tag.m(raw0_value, p);
    			append_dev(p, t3);
    			html_tag_1.m(raw1_value, p);
    			append_dev(p, t4);
    			insert_dev(target, t5, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			div0.innerHTML = /*sourcesLabel*/ ctx[2];
    			append_dev(div2, t7);
    			append_dev(div2, div1);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, hr, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div2, "click", /*togglePane*/ ctx[9], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*projectData*/ 2) && raw0_value !== (raw0_value = /*projectData*/ ctx[1].stakeholders.lead.org + "")) html_tag.p(raw0_value);
    			if ((!current || dirty & /*projectData*/ 2) && raw1_value !== (raw1_value = /*projectData*/ ctx[1].status.dates.lastUpdate + "")) html_tag_1.p(raw1_value);

    			if (/*visibility*/ ctx[0].sourcesDetails) {
    				if (if_block) {
    					if (dirty & /*visibility*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$f(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(t6.parentNode, t6);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*sourcesLabel*/ 4) div0.innerHTML = /*sourcesLabel*/ ctx[2];
    			if (dirty & /*visibility*/ 1) {
    				toggle_class(div2, "selected", /*visibility*/ ctx[0].sourcesDetails);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t5);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div3);
    			if (detaching && div3_transition) div3_transition.end();
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(hr);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$k.name,
    		type: "if",
    		source: "(110:4) {#if (Object.values(projectData.links).length > 0)}",
    		ctx
    	});

    	return block;
    }

    // (113:8) {#if visibility.sourcesDetails }
    function create_if_block_1$f(ctx) {
    	let projectsources;
    	let current;
    	projectsources = new ProjectSources({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectsources.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectsources, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectsources.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectsources.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectsources, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$f.name,
    		type: "if",
    		source: "(113:8) {#if visibility.sourcesDetails }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$V(ctx) {
    	let section;
    	let div0;
    	let raw0_value = /*projectData*/ ctx[1].about.shortDescription + "";
    	let t0;
    	let t1;
    	let div4;
    	let div3;
    	let div1;
    	let t2;
    	let div2;
    	let div4_transition;
    	let t4;
    	let hr0;
    	let t5;
    	let h3;
    	let t7;
    	let p;
    	let t9;
    	let hws_tags;
    	let t10;
    	let hws_boxes;
    	let t11;
    	let t12;
    	let div8;
    	let div7;
    	let div5;
    	let t13;
    	let div6;
    	let div8_transition;
    	let t15;
    	let hr1;
    	let t16;
    	let show_if_1 = Object.values(/*projectData*/ ctx[1].learnings).flat().length > 0;
    	let t17;
    	let show_if = Object.values(/*projectData*/ ctx[1].links).length > 0;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*visibility*/ ctx[0].aboutDetails && create_if_block_5$4(ctx);

    	hws_tags = new HWS_tags({
    			props: { data: /*themesData*/ ctx[8] },
    			$$inline: true
    		});

    	hws_boxes = new HWS_boxes({
    			props: { data: /*keyValuesData*/ ctx[7] },
    			$$inline: true
    		});

    	let if_block1 = /*visibility*/ ctx[0].hwsDetails && create_if_block_4$5(ctx);
    	let if_block2 = show_if_1 && create_if_block_2$d(ctx);
    	let if_block3 = show_if && create_if_block$k(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "↓";
    			t4 = space();
    			hr0 = element("hr");
    			t5 = space();
    			h3 = element("h3");
    			h3.textContent = "——— Waterways impact";
    			t7 = space();
    			p = element("p");
    			p.textContent = "Every waterways project can be categorised by the waterways themes, key values an conditions which they impact.";
    			t9 = space();
    			create_component(hws_tags.$$.fragment);
    			t10 = space();
    			create_component(hws_boxes.$$.fragment);
    			t11 = space();
    			if (if_block1) if_block1.c();
    			t12 = space();
    			div8 = element("div");
    			div7 = element("div");
    			div5 = element("div");
    			t13 = space();
    			div6 = element("div");
    			div6.textContent = "↓";
    			t15 = space();
    			hr1 = element("hr");
    			t16 = space();
    			if (if_block2) if_block2.c();
    			t17 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(div0, "class", "short-desc svelte-ake6ss");
    			add_location(div0, file$U, 51, 4, 1899);
    			attr_dev(div1, "class", "toggle-label svelte-ake6ss");
    			add_location(div1, file$U, 68, 12, 2613);
    			attr_dev(div2, "class", "toggle-icon down svelte-ake6ss");
    			add_location(div2, file$U, 69, 12, 2676);
    			attr_dev(div3, "id", "aboutDetails");
    			attr_dev(div3, "class", "collapse__header svelte-ake6ss");
    			attr_dev(div3, "type", "button");
    			toggle_class(div3, "selected", /*visibility*/ ctx[0].aboutDetails);
    			add_location(div3, file$U, 66, 8, 2458);
    			attr_dev(div4, "class", "collapse__body svelte-ake6ss");
    			add_location(div4, file$U, 65, 4, 2401);
    			add_location(hr0, file$U, 72, 4, 2750);
    			add_location(h3, file$U, 75, 4, 2791);
    			add_location(p, file$U, 76, 4, 2843);
    			attr_dev(div5, "class", "toggle-label svelte-ake6ss");
    			add_location(div5, file$U, 85, 12, 3332);
    			attr_dev(div6, "class", "toggle-icon down svelte-ake6ss");
    			add_location(div6, file$U, 86, 12, 3393);
    			attr_dev(div7, "id", "hwsDetails");
    			attr_dev(div7, "class", "collapse__header svelte-ake6ss");
    			attr_dev(div7, "type", "button");
    			toggle_class(div7, "selected", /*visibility*/ ctx[0].hwsDetails);
    			add_location(div7, file$U, 83, 8, 3181);
    			attr_dev(div8, "class", "collapse__body svelte-ake6ss");
    			add_location(div8, file$U, 82, 4, 3124);
    			add_location(hr1, file$U, 89, 4, 3467);
    			attr_dev(section, "id", "project-content");
    			attr_dev(section, "class", "content-pane svelte-ake6ss");
    			add_location(section, file$U, 49, 0, 1808);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(section, t0);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t1);
    			append_dev(section, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			div1.innerHTML = /*aboutLabel*/ ctx[5];
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(section, t4);
    			append_dev(section, hr0);
    			append_dev(section, t5);
    			append_dev(section, h3);
    			append_dev(section, t7);
    			append_dev(section, p);
    			append_dev(section, t9);
    			mount_component(hws_tags, section, null);
    			append_dev(section, t10);
    			mount_component(hws_boxes, section, null);
    			append_dev(section, t11);
    			if (if_block1) if_block1.m(section, null);
    			append_dev(section, t12);
    			append_dev(section, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div5);
    			div5.innerHTML = /*hwsLabel*/ ctx[4];
    			append_dev(div7, t13);
    			append_dev(div7, div6);
    			append_dev(section, t15);
    			append_dev(section, hr1);
    			append_dev(section, t16);
    			if (if_block2) if_block2.m(section, null);
    			append_dev(section, t17);
    			if (if_block3) if_block3.m(section, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div3, "click", /*togglePane*/ ctx[9], false, false, false),
    					listen_dev(div7, "click", /*togglePane*/ ctx[9], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*projectData*/ 2) && raw0_value !== (raw0_value = /*projectData*/ ctx[1].about.shortDescription + "")) div0.innerHTML = raw0_value;
    			if (/*visibility*/ ctx[0].aboutDetails) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*visibility*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(section, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*aboutLabel*/ 32) div1.innerHTML = /*aboutLabel*/ ctx[5];
    			if (dirty & /*visibility*/ 1) {
    				toggle_class(div3, "selected", /*visibility*/ ctx[0].aboutDetails);
    			}

    			const hws_tags_changes = {};
    			if (dirty & /*themesData*/ 256) hws_tags_changes.data = /*themesData*/ ctx[8];
    			hws_tags.$set(hws_tags_changes);
    			const hws_boxes_changes = {};
    			if (dirty & /*keyValuesData*/ 128) hws_boxes_changes.data = /*keyValuesData*/ ctx[7];
    			hws_boxes.$set(hws_boxes_changes);

    			if (/*visibility*/ ctx[0].hwsDetails) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*visibility*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_4$5(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section, t12);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*hwsLabel*/ 16) div5.innerHTML = /*hwsLabel*/ ctx[4];
    			if (dirty & /*visibility*/ 1) {
    				toggle_class(div7, "selected", /*visibility*/ ctx[0].hwsDetails);
    			}

    			if (dirty & /*projectData*/ 2) show_if_1 = Object.values(/*projectData*/ ctx[1].learnings).flat().length > 0;

    			if (show_if_1) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*projectData*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2$d(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(section, t17);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*projectData*/ 2) show_if = Object.values(/*projectData*/ ctx[1].links).length > 0;

    			if (show_if) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty & /*projectData*/ 2) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block$k(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(section, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);

    			add_render_callback(() => {
    				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, true);
    				div4_transition.run(1);
    			});

    			transition_in(hws_tags.$$.fragment, local);
    			transition_in(hws_boxes.$$.fragment, local);
    			transition_in(if_block1);

    			add_render_callback(() => {
    				if (!div8_transition) div8_transition = create_bidirectional_transition(div8, slide, {}, true);
    				div8_transition.run(1);
    			});

    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, false);
    			div4_transition.run(0);
    			transition_out(hws_tags.$$.fragment, local);
    			transition_out(hws_boxes.$$.fragment, local);
    			transition_out(if_block1);
    			if (!div8_transition) div8_transition = create_bidirectional_transition(div8, slide, {}, false);
    			div8_transition.run(0);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (detaching && div4_transition) div4_transition.end();
    			destroy_component(hws_tags);
    			destroy_component(hws_boxes);
    			if (if_block1) if_block1.d();
    			if (detaching && div8_transition) div8_transition.end();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let projectData;
    	let themesData;
    	let keyValuesData;
    	let conditionsData;
    	let aboutLabel;
    	let hwsLabel;
    	let learningsLabel;
    	let sourcesLabel;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(10, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectContent', slots, []);

    	const visibility = {
    		hwsDetails: false,
    		aboutDetails: false,
    		learningsDetails: false,
    		sourcesDetails: false
    	};

    	function togglePane() {
    		$$invalidate(0, visibility[this.id] = !visibility[this.id], visibility);
    		console.log(`Toggling ${this.id} to `, visibility[this.id]);
    	}
    	const writable_props = [];

    	Object_1$4.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$g.warn(`<ProjectContent> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ui,
    		slide,
    		HWS_tags,
    		HWS_boxes,
    		ProjectSources,
    		ProjectLearnings,
    		visibility,
    		togglePane,
    		sourcesLabel,
    		learningsLabel,
    		hwsLabel,
    		aboutLabel,
    		projectData,
    		conditionsData,
    		keyValuesData,
    		themesData,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('sourcesLabel' in $$props) $$invalidate(2, sourcesLabel = $$props.sourcesLabel);
    		if ('learningsLabel' in $$props) $$invalidate(3, learningsLabel = $$props.learningsLabel);
    		if ('hwsLabel' in $$props) $$invalidate(4, hwsLabel = $$props.hwsLabel);
    		if ('aboutLabel' in $$props) $$invalidate(5, aboutLabel = $$props.aboutLabel);
    		if ('projectData' in $$props) $$invalidate(1, projectData = $$props.projectData);
    		if ('conditionsData' in $$props) $$invalidate(6, conditionsData = $$props.conditionsData);
    		if ('keyValuesData' in $$props) $$invalidate(7, keyValuesData = $$props.keyValuesData);
    		if ('themesData' in $$props) $$invalidate(8, themesData = $$props.themesData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 1024) {
    			// Reactive variables
    			$$invalidate(1, projectData = $ui.state.focus.projectData);
    		}

    		if ($$self.$$.dirty & /*projectData*/ 2) {
    			// HWS Key Values and conditions data
    			$$invalidate(8, themesData = {
    				name: "&#8212; Themes",
    				array: projectData.hws.poTheme
    			});
    		}

    		if ($$self.$$.dirty & /*projectData*/ 2) {
    			$$invalidate(7, keyValuesData = {
    				name: "&#8212; Values",
    				schemaName: "keyValues",
    				array: projectData.hws.values
    			});
    		}

    		if ($$self.$$.dirty & /*projectData*/ 2) {
    			$$invalidate(6, conditionsData = {
    				name: "&#8212; Conditions",
    				schemaName: "conditions",
    				array: projectData.hws.conditions
    			});
    		}

    		if ($$self.$$.dirty & /*visibility*/ 1) {
    			// Pane toggle labels
    			$$invalidate(5, aboutLabel = !visibility.aboutDetails
    			? 'Show more project details'
    			: 'Hide project details');
    		}

    		if ($$self.$$.dirty & /*visibility*/ 1) {
    			$$invalidate(4, hwsLabel = !visibility.hwsDetails
    			? 'Show more impact details'
    			: 'Hide impact details');
    		}

    		if ($$self.$$.dirty & /*visibility*/ 1) {
    			$$invalidate(3, learningsLabel = !visibility.learningsDetails
    			? 'Show learnings'
    			: 'Hide learnings details');
    		}

    		if ($$self.$$.dirty & /*visibility*/ 1) {
    			$$invalidate(2, sourcesLabel = !visibility.sourcesDetails
    			? 'Show more sources details'
    			: 'Hide sources details');
    		}
    	};

    	return [
    		visibility,
    		projectData,
    		sourcesLabel,
    		learningsLabel,
    		hwsLabel,
    		aboutLabel,
    		conditionsData,
    		keyValuesData,
    		themesData,
    		togglePane,
    		$ui
    	];
    }

    class ProjectContent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$V, create_fragment$V, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectContent",
    			options,
    			id: create_fragment$V.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/ProjectImage.svelte generated by Svelte v3.46.4 */
    const file$T = "src/components/shared/projects/projectPage/ProjectImage.svelte";

    function create_fragment$U(ctx) {
    	let section;
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			section = element("section");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*projectData*/ ctx[0].imgURL)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "Image for " + /*projectData*/ ctx[0].name);
    			attr_dev(img, "class", "svelte-1ksfn7y");
    			add_location(img, file$T, 11, 8, 314);
    			attr_dev(section, "transtion:fly", { y: 200, duration: 1000 });
    			attr_dev(section, "class", "svelte-1ksfn7y");
    			add_location(section, file$T, 10, 4, 253);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, img);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*projectData*/ 1 && !src_url_equal(img.src, img_src_value = /*projectData*/ ctx[0].imgURL)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*projectData*/ 1 && img_alt_value !== (img_alt_value = "Image for " + /*projectData*/ ctx[0].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectImage', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectImage> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, fly, projectData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			$$invalidate(0, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [projectData, $ui];
    }

    class ProjectImage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$U, create_fragment$U, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectImage",
    			options,
    			id: create_fragment$U.name
    		});
    	}
    }

    /* src/components/shared/misc/DividerZagged20px.svelte generated by Svelte v3.46.4 */

    const file$S = "src/components/shared/misc/DividerZagged20px.svelte";

    function create_fragment$T(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "svelte-1df34ly");
    			add_location(div, file$S, 1, 0, 32);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DividerZagged20px', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DividerZagged20px> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class DividerZagged20px extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$T, create_fragment$T, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DividerZagged20px",
    			options,
    			id: create_fragment$T.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/ProjectFeedback.svelte generated by Svelte v3.46.4 */
    const file$R = "src/components/shared/projects/projectPage/ProjectFeedback.svelte";

    function create_fragment$S(ctx) {
    	let section;
    	let dividerzagged20px;
    	let t0;
    	let h3;
    	let t1;
    	let t2_value = /*projectData*/ ctx[0].name + "";
    	let t2;
    	let t3;
    	let div;
    	let current;
    	dividerzagged20px = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px.$$.fragment);
    			t0 = space();
    			h3 = element("h3");
    			t1 = text$1("—— What others think about ");
    			t2 = text$1(t2_value);
    			t3 = space();
    			div = element("div");
    			add_location(h3, file$R, 12, 4, 307);
    			attr_dev(div, "class", "content svelte-1q8i6t6");
    			add_location(div, file$R, 13, 4, 378);
    			attr_dev(section, "class", "svelte-1q8i6t6");
    			add_location(section, file$R, 10, 0, 268);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px, section, null);
    			append_dev(section, t0);
    			append_dev(section, h3);
    			append_dev(h3, t1);
    			append_dev(h3, t2);
    			append_dev(section, t3);
    			append_dev(section, div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*projectData*/ 1) && t2_value !== (t2_value = /*projectData*/ ctx[0].name + "")) set_data_dev(t2, t2_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectFeedback', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectFeedback> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, DividerZagged20px, projectData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			// Reactive variables
    			$$invalidate(0, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [projectData, $ui];
    }

    class ProjectFeedback$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$S, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectFeedback",
    			options,
    			id: create_fragment$S.name
    		});
    	}
    }

    /* src/components/shared/projects/projectPage/SimilarProjects.svelte generated by Svelte v3.46.4 */
    const file$Q = "src/components/shared/projects/projectPage/SimilarProjects.svelte";

    function get_each_context$a(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    function get_each_context_1$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    function get_each_context_2$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    function get_each_context_3$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i];
    	child_ctx[11] = i;
    	return child_ctx;
    }

    // (33:16) {#each simImpactProjects as projectData, index}
    function create_each_block_3$3(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[0],
    				index: /*index*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$3.name,
    		type: "each",
    		source: "(33:16) {#each simImpactProjects as projectData, index}",
    		ctx
    	});

    	return block;
    }

    // (44:16) {#each simProjectType as projectData, index}
    function create_each_block_2$3(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[0],
    				index: /*index*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$3.name,
    		type: "each",
    		source: "(44:16) {#each simProjectType as projectData, index}",
    		ctx
    	});

    	return block;
    }

    // (55:16) {#each simLocationProjects as projectData, index}
    function create_each_block_1$5(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[0],
    				index: /*index*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$5.name,
    		type: "each",
    		source: "(55:16) {#each simLocationProjects as projectData, index}",
    		ctx
    	});

    	return block;
    }

    // (66:16) {#each simLeadProjects as projectData, index}
    function create_each_block$a(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[0],
    				index: /*index*/ ctx[11]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$a.name,
    		type: "each",
    		source: "(66:16) {#each simLeadProjects as projectData, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$R(ctx) {
    	let section;
    	let dividerzagged20px;
    	let t0;
    	let h3;
    	let t1;
    	let t2_value = /*projectData*/ ctx[0].name + "";
    	let t2;
    	let t3;
    	let div1;
    	let h40;
    	let t5;
    	let div0;
    	let ul0;
    	let t6;
    	let div3;
    	let h41;
    	let t8;
    	let div2;
    	let ul1;
    	let t9;
    	let div5;
    	let h42;
    	let t11;
    	let div4;
    	let ul2;
    	let t12;
    	let div7;
    	let h43;
    	let t14;
    	let div6;
    	let ul3;
    	let current;
    	dividerzagged20px = new DividerZagged20px({ $$inline: true });
    	let each_value_3 = /*simImpactProjects*/ ctx[1];
    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3$3(get_each_context_3$3(ctx, each_value_3, i));
    	}

    	const out = i => transition_out(each_blocks_3[i], 1, 1, () => {
    		each_blocks_3[i] = null;
    	});

    	let each_value_2 = /*simProjectType*/ ctx[4];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2$3(get_each_context_2$3(ctx, each_value_2, i));
    	}

    	const out_1 = i => transition_out(each_blocks_2[i], 1, 1, () => {
    		each_blocks_2[i] = null;
    	});

    	let each_value_1 = /*simLocationProjects*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$5(get_each_context_1$5(ctx, each_value_1, i));
    	}

    	const out_2 = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*simLeadProjects*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
    	}

    	const out_3 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px.$$.fragment);
    			t0 = space();
    			h3 = element("h3");
    			t1 = text$1("—— Similar projects to ");
    			t2 = text$1(t2_value);
    			t3 = space();
    			div1 = element("div");
    			h40 = element("h4");
    			h40.textContent = "— by waterways impact";
    			t5 = space();
    			div0 = element("div");
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t6 = space();
    			div3 = element("div");
    			h41 = element("h4");
    			h41.textContent = "— by projectType";
    			t8 = space();
    			div2 = element("div");
    			ul1 = element("ul");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t9 = space();
    			div5 = element("div");
    			h42 = element("h4");
    			h42.textContent = "— by location";
    			t11 = space();
    			div4 = element("div");
    			ul2 = element("ul");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t12 = space();
    			div7 = element("div");
    			h43 = element("h4");
    			h43.textContent = "— by project lead";
    			t14 = space();
    			div6 = element("div");
    			ul3 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "svelte-dr17l6");
    			add_location(h3, file$Q, 26, 4, 930);
    			attr_dev(h40, "class", "svelte-dr17l6");
    			add_location(h40, file$Q, 29, 8, 1038);
    			attr_dev(ul0, "class", "svelte-dr17l6");
    			add_location(ul0, file$Q, 31, 12, 1127);
    			attr_dev(div0, "class", "card-container svelte-dr17l6");
    			add_location(div0, file$Q, 30, 8, 1084);
    			attr_dev(div1, "class", "group-container svelte-dr17l6");
    			add_location(div1, file$Q, 28, 4, 998);
    			attr_dev(h41, "class", "svelte-dr17l6");
    			add_location(h41, file$Q, 40, 8, 1363);
    			attr_dev(ul1, "class", "svelte-dr17l6");
    			add_location(ul1, file$Q, 42, 12, 1447);
    			attr_dev(div2, "class", "card-container svelte-dr17l6");
    			add_location(div2, file$Q, 41, 8, 1404);
    			attr_dev(div3, "class", "group-container svelte-dr17l6");
    			add_location(div3, file$Q, 39, 4, 1323);
    			attr_dev(h42, "class", "svelte-dr17l6");
    			add_location(h42, file$Q, 51, 8, 1680);
    			attr_dev(ul2, "class", "svelte-dr17l6");
    			add_location(ul2, file$Q, 53, 12, 1761);
    			attr_dev(div4, "class", "card-container svelte-dr17l6");
    			add_location(div4, file$Q, 52, 8, 1718);
    			attr_dev(div5, "class", "group-container svelte-dr17l6");
    			add_location(div5, file$Q, 50, 4, 1640);
    			attr_dev(h43, "class", "svelte-dr17l6");
    			add_location(h43, file$Q, 62, 8, 1999);
    			attr_dev(ul3, "class", "svelte-dr17l6");
    			add_location(ul3, file$Q, 64, 12, 2084);
    			attr_dev(div6, "class", "card-container svelte-dr17l6");
    			add_location(div6, file$Q, 63, 8, 2041);
    			attr_dev(div7, "class", "group-container svelte-dr17l6");
    			add_location(div7, file$Q, 61, 4, 1959);
    			attr_dev(section, "class", "svelte-dr17l6");
    			add_location(section, file$Q, 24, 0, 891);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px, section, null);
    			append_dev(section, t0);
    			append_dev(section, h3);
    			append_dev(h3, t1);
    			append_dev(h3, t2);
    			append_dev(section, t3);
    			append_dev(section, div1);
    			append_dev(div1, h40);
    			append_dev(div1, t5);
    			append_dev(div1, div0);
    			append_dev(div0, ul0);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].m(ul0, null);
    			}

    			append_dev(section, t6);
    			append_dev(section, div3);
    			append_dev(div3, h41);
    			append_dev(div3, t8);
    			append_dev(div3, div2);
    			append_dev(div2, ul1);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(ul1, null);
    			}

    			append_dev(section, t9);
    			append_dev(section, div5);
    			append_dev(div5, h42);
    			append_dev(div5, t11);
    			append_dev(div5, div4);
    			append_dev(div4, ul2);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(ul2, null);
    			}

    			append_dev(section, t12);
    			append_dev(section, div7);
    			append_dev(div7, h43);
    			append_dev(div7, t14);
    			append_dev(div7, div6);
    			append_dev(div6, ul3);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul3, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*projectData*/ 1) && t2_value !== (t2_value = /*projectData*/ ctx[0].name + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*simImpactProjects*/ 2) {
    				each_value_3 = /*simImpactProjects*/ ctx[1];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$3(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    						transition_in(each_blocks_3[i], 1);
    					} else {
    						each_blocks_3[i] = create_each_block_3$3(child_ctx);
    						each_blocks_3[i].c();
    						transition_in(each_blocks_3[i], 1);
    						each_blocks_3[i].m(ul0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_3.length; i < each_blocks_3.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*simProjectType*/ 16) {
    				each_value_2 = /*simProjectType*/ ctx[4];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$3(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    						transition_in(each_blocks_2[i], 1);
    					} else {
    						each_blocks_2[i] = create_each_block_2$3(child_ctx);
    						each_blocks_2[i].c();
    						transition_in(each_blocks_2[i], 1);
    						each_blocks_2[i].m(ul1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_2.length; i < each_blocks_2.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*simLocationProjects*/ 4) {
    				each_value_1 = /*simLocationProjects*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$5(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$5(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(ul2, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out_2(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*simLeadProjects*/ 8) {
    				each_value = /*simLeadProjects*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$a(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$a(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul3, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_3(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px.$$.fragment, local);

    			for (let i = 0; i < each_value_3.length; i += 1) {
    				transition_in(each_blocks_3[i]);
    			}

    			for (let i = 0; i < each_value_2.length; i += 1) {
    				transition_in(each_blocks_2[i]);
    			}

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px.$$.fragment, local);
    			each_blocks_3 = each_blocks_3.filter(Boolean);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				transition_out(each_blocks_3[i]);
    			}

    			each_blocks_2 = each_blocks_2.filter(Boolean);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				transition_out(each_blocks_2[i]);
    			}

    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px);
    			destroy_each(each_blocks_3, detaching);
    			destroy_each(each_blocks_2, detaching);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let projectData;
    	let $database;
    	let $ui;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(6, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(5, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SimilarProjects', slots, []);
    	const shuffleArray = array => array.sort(() => Math.random() - 0.5);
    	const projectDatabase = $database.projects;
    	const shuffledProjects = shuffleArray(projectDatabase);
    	const simImpactProjects = shuffledProjects.slice(0, 3);
    	const simLocationProjects = shuffledProjects.slice(3, 6);
    	const simLeadProjects = shuffledProjects.slice(6, 9);
    	const simProjectType = shuffledProjects.slice(9, 12);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SimilarProjects> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ProjectCard,
    		DividerZagged20px,
    		ui,
    		database,
    		shuffleArray,
    		projectDatabase,
    		shuffledProjects,
    		simImpactProjects,
    		simLocationProjects,
    		simLeadProjects,
    		simProjectType,
    		projectData,
    		$database,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 32) {
    			// Reactive variables
    			$$invalidate(0, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [
    		projectData,
    		simImpactProjects,
    		simLocationProjects,
    		simLeadProjects,
    		simProjectType,
    		$ui
    	];
    }

    class SimilarProjects extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$R, create_fragment$R, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SimilarProjects",
    			options,
    			id: create_fragment$R.name
    		});
    	}
    }

    /* src/components/shared/projects/ProjectPage.svelte generated by Svelte v3.46.4 */
    const file$P = "src/components/shared/projects/ProjectPage.svelte";

    function create_fragment$Q(ctx) {
    	let section;
    	let titleblock;
    	let t0;
    	let infopane;
    	let t1;
    	let useractions;
    	let t2;
    	let projectcontent;
    	let t3;
    	let projectimage;
    	let t4;
    	let projectfeedback;
    	let t5;
    	let similarprojects;
    	let section_intro;
    	let section_outro;
    	let current;
    	titleblock = new TitleBlock$1({ $$inline: true });
    	infopane = new Infopane$1({ $$inline: true });
    	useractions = new UserAction$1({ $$inline: true });
    	projectcontent = new ProjectContent({ $$inline: true });
    	projectimage = new ProjectImage({ $$inline: true });
    	projectfeedback = new ProjectFeedback$1({ $$inline: true });
    	similarprojects = new SimilarProjects({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(titleblock.$$.fragment);
    			t0 = space();
    			create_component(infopane.$$.fragment);
    			t1 = space();
    			create_component(useractions.$$.fragment);
    			t2 = space();
    			create_component(projectcontent.$$.fragment);
    			t3 = space();
    			create_component(projectimage.$$.fragment);
    			t4 = space();
    			create_component(projectfeedback.$$.fragment);
    			t5 = space();
    			create_component(similarprojects.$$.fragment);
    			attr_dev(section, "id", "project-overlay");
    			attr_dev(section, "class", "svelte-1d9n5mj");
    			add_location(section, file$P, 14, 0, 623);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(titleblock, section, null);
    			append_dev(section, t0);
    			mount_component(infopane, section, null);
    			append_dev(section, t1);
    			mount_component(useractions, section, null);
    			append_dev(section, t2);
    			mount_component(projectcontent, section, null);
    			append_dev(section, t3);
    			mount_component(projectimage, section, null);
    			append_dev(section, t4);
    			mount_component(projectfeedback, section, null);
    			append_dev(section, t5);
    			mount_component(similarprojects, section, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(infopane.$$.fragment, local);
    			transition_in(useractions.$$.fragment, local);
    			transition_in(projectcontent.$$.fragment, local);
    			transition_in(projectimage.$$.fragment, local);
    			transition_in(projectfeedback.$$.fragment, local);
    			transition_in(similarprojects.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: 500, duration: 1000 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(infopane.$$.fragment, local);
    			transition_out(useractions.$$.fragment, local);
    			transition_out(projectcontent.$$.fragment, local);
    			transition_out(projectimage.$$.fragment, local);
    			transition_out(projectfeedback.$$.fragment, local);
    			transition_out(similarprojects.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fade, { duration: 200 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(titleblock);
    			destroy_component(infopane);
    			destroy_component(useractions);
    			destroy_component(projectcontent);
    			destroy_component(projectimage);
    			destroy_component(projectfeedback);
    			destroy_component(similarprojects);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectPage', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectPage> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		fade,
    		TitleBlock: TitleBlock$1,
    		InfoPane: Infopane$1,
    		UserActions: UserAction$1,
    		ProjectContent,
    		ProjectImage,
    		ProjectFeedback: ProjectFeedback$1,
    		SimilarProjects
    	});

    	return [];
    }

    class ProjectPage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectPage",
    			options,
    			id: create_fragment$Q.name
    		});
    	}
    }

    /* node_modules/svelte-material-icons/Magnify.svelte generated by Svelte v3.46.4 */

    const file$O = "node_modules/svelte-material-icons/Magnify.svelte";

    function create_fragment$P(ctx) {
    	let svg;
    	let path;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", "M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z");
    			attr_dev(path, "fill", /*color*/ ctx[2]);
    			add_location(path, file$O, 8, 59, 234);
    			attr_dev(svg, "width", /*width*/ ctx[0]);
    			attr_dev(svg, "height", /*height*/ ctx[1]);
    			attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			add_location(svg, file$O, 8, 0, 175);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*color*/ 4) {
    				attr_dev(path, "fill", /*color*/ ctx[2]);
    			}

    			if (dirty & /*width*/ 1) {
    				attr_dev(svg, "width", /*width*/ ctx[0]);
    			}

    			if (dirty & /*height*/ 2) {
    				attr_dev(svg, "height", /*height*/ ctx[1]);
    			}

    			if (dirty & /*viewBox*/ 8) {
    				attr_dev(svg, "viewBox", /*viewBox*/ ctx[3]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Magnify', slots, []);
    	let { size = "1em" } = $$props;
    	let { width = size } = $$props;
    	let { height = size } = $$props;
    	let { color = "currentColor" } = $$props;
    	let { viewBox = "0 0 24 24" } = $$props;
    	const writable_props = ['size', 'width', 'height', 'color', 'viewBox'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Magnify> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	$$self.$capture_state = () => ({ size, width, height, color, viewBox });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(4, size = $$props.size);
    		if ('width' in $$props) $$invalidate(0, width = $$props.width);
    		if ('height' in $$props) $$invalidate(1, height = $$props.height);
    		if ('color' in $$props) $$invalidate(2, color = $$props.color);
    		if ('viewBox' in $$props) $$invalidate(3, viewBox = $$props.viewBox);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [width, height, color, viewBox, size];
    }

    class Magnify extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$P, create_fragment$P, safe_not_equal, {
    			size: 4,
    			width: 0,
    			height: 1,
    			color: 2,
    			viewBox: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Magnify",
    			options,
    			id: create_fragment$P.name
    		});
    	}

    	get size() {
    		throw new Error("<Magnify>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<Magnify>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get width() {
    		throw new Error("<Magnify>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set width(value) {
    		throw new Error("<Magnify>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get height() {
    		throw new Error("<Magnify>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set height(value) {
    		throw new Error("<Magnify>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Magnify>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Magnify>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get viewBox() {
    		throw new Error("<Magnify>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set viewBox(value) {
    		throw new Error("<Magnify>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/byPage/discover/QuickSearch.svelte generated by Svelte v3.46.4 */

    const { console: console_1$f } = globals;
    const file$N = "src/components/byPage/discover/QuickSearch.svelte";

    function create_fragment$O(ctx) {
    	let input;
    	let t;
    	let div;
    	let magnify;
    	let current;
    	let mounted;
    	let dispose;

    	magnify = new Magnify({
    			props: { width: "2em", height: "2em" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			input = element("input");
    			t = space();
    			div = element("div");
    			create_component(magnify.$$.fragment);
    			attr_dev(input, "id", "search-term");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Search project name");
    			attr_dev(input, "class", "svelte-uly9n9");
    			add_location(input, file$N, 17, 0, 530);
    			attr_dev(div, "id", "search-button");
    			attr_dev(div, "class", "input-icon svelte-uly9n9");
    			add_location(div, file$N, 19, 0, 631);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*searchInput*/ ctx[0]);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(magnify, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[2]),
    					listen_dev(div, "click", /*handleSearch*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*searchInput*/ 1 && input.value !== /*searchInput*/ ctx[0]) {
    				set_input_value(input, /*searchInput*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(magnify.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(magnify.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			destroy_component(magnify);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(3, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('QuickSearch', slots, []);
    	let searchInput = '';

    	function handleSearch() {
    		console.log('Submit search: ', searchInput);
    		set_store_value(ui, $ui.byPage.discover.projectSearch.isMade = true, $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$f.warn(`<QuickSearch> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		searchInput = this.value;
    		$$invalidate(0, searchInput);
    	}

    	$$self.$capture_state = () => ({
    		QuickSearch: QuickSearch_1$1,
    		ui,
    		Magnify,
    		searchInput,
    		handleSearch,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('searchInput' in $$props) $$invalidate(0, searchInput = $$props.searchInput);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [searchInput, handleSearch, input_input_handler];
    }

    class QuickSearch_1$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$O, create_fragment$O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "QuickSearch_1",
    			options,
    			id: create_fragment$O.name
    		});
    	}
    }

    /* src/components/byPage/discover/infoPane/InfoEmptySearch.svelte generated by Svelte v3.46.4 */
    const file$M = "src/components/byPage/discover/infoPane/InfoEmptySearch.svelte";

    function create_fragment$N(ctx) {
    	let div0;
    	let h20;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.discover.info.selectionHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.discover.info.selectionDefault + "";
    	let t2;
    	let hr;
    	let t3;
    	let div3;
    	let h21;
    	let t4;
    	let html_tag_2;
    	let raw2_value = componentContent.discover.info.searchToolHeader + "";
    	let t5;
    	let html_tag_3;
    	let raw3_value = componentContent.discover.info.searchToolDesc + "";
    	let t6;
    	let ul;
    	let li0;
    	let div1;
    	let quicksearch;
    	let t7;
    	let li1;
    	let div2;
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	quicksearch = new QuickSearch_1$1({ $$inline: true });

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h20 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			t2 = space();
    			hr = element("hr");
    			t3 = space();
    			div3 = element("div");
    			h21 = element("h2");
    			t4 = text$1("— ");
    			html_tag_2 = new HtmlTag();
    			t5 = space();
    			html_tag_3 = new HtmlTag();
    			t6 = space();
    			ul = element("ul");
    			li0 = element("li");
    			div1 = element("div");
    			create_component(quicksearch.$$.fragment);
    			t7 = space();
    			li1 = element("li");
    			div2 = element("div");
    			button = element("button");
    			button.textContent = "User search filters →";
    			html_tag.a = null;
    			add_location(h20, file$M, 14, 4, 456);
    			html_tag_1.a = null;
    			add_location(div0, file$M, 13, 0, 446);
    			attr_dev(hr, "class", "svelte-17a05zh");
    			add_location(hr, file$M, 18, 0, 598);
    			html_tag_2.a = null;
    			add_location(h21, file$M, 20, 4, 639);
    			html_tag_3.a = t6;
    			attr_dev(div1, "class", "search-box-container svelte-17a05zh");
    			add_location(div1, file$M, 24, 12, 826);
    			add_location(li0, file$M, 23, 8, 809);
    			add_location(button, file$M, 30, 16, 1001);
    			attr_dev(div2, "class", "button-container svelte-17a05zh");
    			add_location(div2, file$M, 29, 12, 952);
    			add_location(li1, file$M, 28, 8, 935);
    			attr_dev(ul, "class", "unformatted");
    			add_location(ul, file$M, 22, 4, 774);
    			attr_dev(div3, "class", "search-container svelte-17a05zh");
    			add_location(div3, file$M, 19, 0, 603);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h20);
    			append_dev(h20, t0);
    			html_tag.m(raw0_value, h20);
    			append_dev(div0, t1);
    			html_tag_1.m(raw1_value, div0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, h21);
    			append_dev(h21, t4);
    			html_tag_2.m(raw2_value, h21);
    			append_dev(div3, t5);
    			html_tag_3.m(raw3_value, div3);
    			append_dev(div3, t6);
    			append_dev(div3, ul);
    			append_dev(ul, li0);
    			append_dev(li0, div1);
    			mount_component(quicksearch, div1, null);
    			append_dev(ul, t7);
    			append_dev(ul, li1);
    			append_dev(li1, div2);
    			append_dev(div2, button);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*showSearch*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(quicksearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(quicksearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			destroy_component(quicksearch);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoEmptySearch', slots, []);

    	function showSearch() {
    		set_store_value(ui, $ui.byPage.discover.main = 'search', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoEmptySearch> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		QuickSearch: QuickSearch_1$1,
    		componentContent,
    		ui,
    		showSearch,
    		$ui
    	});

    	return [showSearch];
    }

    class InfoEmptySearch$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoEmptySearch",
    			options,
    			id: create_fragment$N.name
    		});
    	}
    }

    /* src/components/byPage/discover/infoPane/InfoSearchResults.svelte generated by Svelte v3.46.4 */
    const file$L = "src/components/byPage/discover/infoPane/InfoSearchResults.svelte";

    function create_fragment$M(ctx) {
    	let div0;
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.discover.info.searchResultsHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.discover.info.searchResultsDesc + "";
    	let t2;
    	let hr;
    	let t3;
    	let div2;
    	let html_tag_2;
    	let raw2_value = componentContent.discover.info.searchResultsOptions + "";
    	let t4;
    	let div1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h2 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			t2 = space();
    			hr = element("hr");
    			t3 = space();
    			div2 = element("div");
    			html_tag_2 = new HtmlTag();
    			t4 = space();
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "Refine search";
    			html_tag.a = null;
    			add_location(h2, file$L, 17, 4, 523);
    			html_tag_1.a = null;
    			add_location(div0, file$L, 16, 0, 513);
    			add_location(hr, file$L, 20, 0, 667);
    			html_tag_2.a = t4;
    			add_location(button, file$L, 24, 8, 809);
    			attr_dev(div1, "class", "button-container svelte-rorp8s");
    			add_location(div1, file$L, 23, 4, 769);
    			attr_dev(div2, "class", "search-options");
    			add_location(div2, file$L, 21, 0, 672);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h2);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			append_dev(div0, t1);
    			html_tag_1.m(raw1_value, div0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			html_tag_2.m(raw2_value, div2);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*openSearch*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoSearchResults', slots, []);

    	function openSearch() {
    		set_store_value(ui, $ui.byPage.discover.main = 'search', $ui);
    		set_store_value(ui, $ui.byPage.discover.projectSearch.isMade = false, $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoSearchResults> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		componentContent,
    		ui,
    		Magnify,
    		openSearch,
    		$ui
    	});

    	return [openSearch];
    }

    class InfoSearchResults$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoSearchResults",
    			options,
    			id: create_fragment$M.name
    		});
    	}
    }

    /* src/components/byPage/discover/infoPane/InfoMap.svelte generated by Svelte v3.46.4 */
    const file$K = "src/components/byPage/discover/infoPane/InfoMap.svelte";

    function create_fragment$L(ctx) {
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.discover.info.selectionHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.discover.info.mapDesc + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = null;
    			add_location(h2, file$K, 8, 0, 283);
    			html_tag_1.a = html_anchor;
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			insert_dev(target, t1, anchor);
    			html_tag_1.m(raw1_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag_1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoMap', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoMap> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fly, ui, componentContent });
    	return [];
    }

    class InfoMap extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$L, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoMap",
    			options,
    			id: create_fragment$L.name
    		});
    	}
    }

    /* src/components/byPage/discover/InfoPane.svelte generated by Svelte v3.46.4 */
    const file$J = "src/components/byPage/discover/InfoPane.svelte";

    // (32:52) 
    function create_if_block_3$b(ctx) {
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.discover.info.filterHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.discover.info.filterDesc + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = null;
    			add_location(h2, file$J, 32, 8, 1246);
    			html_tag_1.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			insert_dev(target, t1, anchor);
    			html_tag_1.m(raw1_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag_1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$b.name,
    		type: "if",
    		source: "(32:52) ",
    		ctx
    	});

    	return block;
    }

    // (17:4) {#if $ui.byPage.discover.main === 'list'}
    function create_if_block$j(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$e, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.discover.projectView === 'cards') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$j.name,
    		type: "if",
    		source: "(17:4) {#if $ui.byPage.discover.main === 'list'}",
    		ctx
    	});

    	return block;
    }

    // (27:8) {:else}
    function create_else_block_1$2(ctx) {
    	let infomap;
    	let current;
    	infomap = new InfoMap({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infomap.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infomap, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infomap.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infomap.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infomap, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(27:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (19:8) {#if $ui.byPage.discover.projectView === 'cards'}
    function create_if_block_1$e(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$c, create_else_block$7];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.discover.projectSearch.isMade) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$e.name,
    		type: "if",
    		source: "(19:8) {#if $ui.byPage.discover.projectView === 'cards'}",
    		ctx
    	});

    	return block;
    }

    // (22:12) {:else}
    function create_else_block$7(ctx) {
    	let infosearchresults;
    	let current;
    	infosearchresults = new InfoSearchResults$2({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infosearchresults.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infosearchresults, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infosearchresults.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infosearchresults.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infosearchresults, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(22:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:12) {#if !$ui.byPage.discover.projectSearch.isMade}
    function create_if_block_2$c(ctx) {
    	let infoemptysearch;
    	let current;
    	infoemptysearch = new InfoEmptySearch$2({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infoemptysearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infoemptysearch, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infoemptysearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infoemptysearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infoemptysearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$c.name,
    		type: "if",
    		source: "(20:12) {#if !$ui.byPage.discover.projectSearch.isMade}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$K(ctx) {
    	let section;
    	let dividerzagged20px0;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let div;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	const if_block_creators = [create_if_block$j, create_if_block_3$b];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.discover.main === 'list') return 0;
    		if (/*$ui*/ ctx[0].byPage.discover.main === 'search') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			attr_dev(div, "class", "float-bottom svelte-1k7kan1");
    			add_location(div, file$J, 36, 4, 1390);
    			attr_dev(section, "class", "svelte-1k7kan1");
    			add_location(section, file$J, 13, 0, 570);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px0, section, null);
    			append_dev(section, t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			append_dev(section, t1);
    			append_dev(section, div);
    			mount_component(dividerzagged20px1, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(section, t1);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: -500, duration: 1500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: -500, duration: 150 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoPane', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoPane> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		InfoEmptySearch: InfoEmptySearch$2,
    		InfoSearchResults: InfoSearchResults$2,
    		InfoMap,
    		DividerZagged20px,
    		ui,
    		componentContent,
    		$ui
    	});

    	return [$ui];
    }

    class InfoPane$2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$K, create_fragment$K, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoPane",
    			options,
    			id: create_fragment$K.name
    		});
    	}
    }

    /* src/components/shared/MultiSelect.svelte generated by Svelte v3.46.4 */

    const { Object: Object_1$3 } = globals;
    const file$I = "src/components/shared/MultiSelect.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[26] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[29] = list[i];
    	return child_ctx;
    }

    // (108:12) {#if !readonly}
    function create_if_block_2$b(ctx) {
    	let div;
    	let svg;
    	let path;
    	let div_title_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(path, "d", iconClearPath$3);
    			attr_dev(path, "class", "svelte-1yto3i0");
    			add_location(path, file$I, 110, 20, 3881);
    			attr_dev(svg, "class", "icon-clear svelte-1yto3i0");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "18");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$I, 109, 16, 3758);
    			attr_dev(div, "class", "token-remove svelte-1yto3i0");
    			attr_dev(div, "title", div_title_value = "Remove " + /*s*/ ctx[29].name);
    			add_location(div, file$I, 108, 12, 3691);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selected*/ 16 && div_title_value !== (div_title_value = "Remove " + /*s*/ ctx[29].name)) {
    				attr_dev(div, "title", div_title_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$b.name,
    		type: "if",
    		source: "(108:12) {#if !readonly}",
    		ctx
    	});

    	return block;
    }

    // (105:8) {#each Object.values(selected) as s}
    function create_each_block_1$4(ctx) {
    	let div;
    	let span;
    	let t0_value = /*s*/ ctx[29].name + "";
    	let t0;
    	let t1;
    	let div_data_id_value;
    	let if_block = !/*readonly*/ ctx[1] && create_if_block_2$b(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text$1(t0_value);
    			t1 = space();
    			if (if_block) if_block.c();
    			add_location(span, file$I, 106, 12, 3629);
    			attr_dev(div, "class", "token svelte-1yto3i0");
    			attr_dev(div, "data-id", div_data_id_value = /*s*/ ctx[29].value);
    			add_location(div, file$I, 105, 8, 3577);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selected*/ 16 && t0_value !== (t0_value = /*s*/ ctx[29].name + "")) set_data_dev(t0, t0_value);

    			if (!/*readonly*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$b(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*selected*/ 16 && div_data_id_value !== (div_data_id_value = /*s*/ ctx[29].value)) {
    				attr_dev(div, "data-id", div_data_id_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(105:8) {#each Object.values(selected) as s}",
    		ctx
    	});

    	return block;
    }

    // (118:12) {#if !readonly}
    function create_if_block_1$d(ctx) {
    	let input_1;
    	let t0;
    	let div2;
    	let div0;
    	let t2;
    	let div1;
    	let svg0;
    	let path0;
    	let t3;
    	let svg1;
    	let path1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input_1 = element("input");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Clear all";
    			t2 = space();
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t3 = space();
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			attr_dev(input_1, "id", /*id*/ ctx[0]);
    			attr_dev(input_1, "autocomplete", "off");
    			attr_dev(input_1, "placeholder", /*placeholderText*/ ctx[9]);
    			attr_dev(input_1, "class", "svelte-1yto3i0");
    			add_location(input_1, file$I, 118, 12, 4070);
    			attr_dev(div0, "class", "remove-all-label svelte-1yto3i0");
    			add_location(div0, file$I, 123, 16, 4383);
    			attr_dev(path0, "d", iconClearPath$3);
    			attr_dev(path0, "class", "svelte-1yto3i0");
    			add_location(path0, file$I, 126, 24, 4618);
    			attr_dev(svg0, "class", "icon-clear svelte-1yto3i0");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "width", "18");
    			attr_dev(svg0, "height", "18");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			add_location(svg0, file$I, 125, 20, 4491);
    			attr_dev(div1, "class", "remove-all svelte-1yto3i0");
    			add_location(div1, file$I, 124, 16, 4446);
    			attr_dev(div2, "class", "remove-all-container svelte-1yto3i0");
    			attr_dev(div2, "title", "Remove All");
    			toggle_class(div2, "hidden", !Object.keys(/*selected*/ ctx[4]).length);
    			add_location(div2, file$I, 122, 12, 4268);
    			attr_dev(path1, "d", "M5 8l4 4 4-4z");
    			attr_dev(path1, "class", "svelte-1yto3i0");
    			add_location(path1, file$I, 132, 16, 4851);
    			attr_dev(svg1, "class", "dropdown-arrow svelte-1yto3i0");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "width", "18");
    			attr_dev(svg1, "height", "18");
    			attr_dev(svg1, "viewBox", "0 0 18 18");
    			add_location(svg1, file$I, 131, 12, 4728);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input_1, anchor);
    			set_input_value(input_1, /*inputValue*/ ctx[2]);
    			/*input_1_binding*/ ctx[21](input_1);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, svg1, anchor);
    			append_dev(svg1, path1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input_1, "input", /*input_1_input_handler*/ ctx[20]),
    					listen_dev(input_1, "keyup", /*handleKeyup*/ ctx[10], false, false, false),
    					listen_dev(input_1, "blur", /*handleBlur*/ ctx[11], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*id*/ 1) {
    				attr_dev(input_1, "id", /*id*/ ctx[0]);
    			}

    			if (dirty[0] & /*placeholderText*/ 512) {
    				attr_dev(input_1, "placeholder", /*placeholderText*/ ctx[9]);
    			}

    			if (dirty[0] & /*inputValue*/ 4 && input_1.value !== /*inputValue*/ ctx[2]) {
    				set_input_value(input_1, /*inputValue*/ ctx[2]);
    			}

    			if (dirty[0] & /*selected*/ 16) {
    				toggle_class(div2, "hidden", !Object.keys(/*selected*/ ctx[4]).length);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input_1);
    			/*input_1_binding*/ ctx[21](null);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(svg1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(118:12) {#if !readonly}",
    		ctx
    	});

    	return block;
    }

    // (141:4) {#if showOptions}
    function create_if_block$i(ctx) {
    	let ul;
    	let ul_transition;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*filtered*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "options svelte-1yto3i0");
    			add_location(ul, file$I, 141, 4, 5059);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(ul, "mousedown", prevent_default(/*handleOptionMousedown*/ ctx[13]), false, true, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*filtered, selected, activeOption*/ 56) {
    				each_value = /*filtered*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!ul_transition) ul_transition = create_bidirectional_transition(ul, fly, { duration: 200, y: 5 }, true);
    				ul_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!ul_transition) ul_transition = create_bidirectional_transition(ul, fly, { duration: 200, y: 5 }, false);
    			ul_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    			if (detaching && ul_transition) ul_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$i.name,
    		type: "if",
    		source: "(141:4) {#if showOptions}",
    		ctx
    	});

    	return block;
    }

    // (143:8) {#each filtered as option}
    function create_each_block$9(ctx) {
    	let li;
    	let t_value = /*option*/ ctx[26].name + "";
    	let t;
    	let li_data_value_value;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text$1(t_value);
    			attr_dev(li, "data-value", li_data_value_value = /*option*/ ctx[26].value);
    			attr_dev(li, "class", "svelte-1yto3i0");
    			toggle_class(li, "selected", /*selected*/ ctx[4][/*option*/ ctx[26].value]);
    			toggle_class(li, "active", /*activeOption*/ ctx[3] === /*option*/ ctx[26]);
    			add_location(li, file$I, 143, 8, 5216);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*filtered*/ 32 && t_value !== (t_value = /*option*/ ctx[26].name + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*filtered*/ 32 && li_data_value_value !== (li_data_value_value = /*option*/ ctx[26].value)) {
    				attr_dev(li, "data-value", li_data_value_value);
    			}

    			if (dirty[0] & /*selected, filtered*/ 48) {
    				toggle_class(li, "selected", /*selected*/ ctx[4][/*option*/ ctx[26].value]);
    			}

    			if (dirty[0] & /*activeOption, filtered*/ 40) {
    				toggle_class(li, "active", /*activeOption*/ ctx[3] === /*option*/ ctx[26]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(143:8) {#each filtered as option}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$J(ctx) {
    	let section;
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let select;
    	let t2;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = Object.values(/*selected*/ ctx[4]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	let if_block0 = !/*readonly*/ ctx[1] && create_if_block_1$d(ctx);
    	const default_slot_template = /*#slots*/ ctx[19].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
    	let if_block1 = /*showOptions*/ ctx[7] && create_if_block$i(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			select = element("select");
    			if (default_slot) default_slot.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "actions svelte-1yto3i0");
    			add_location(div0, file$I, 116, 8, 4008);
    			attr_dev(div1, "class", "tokens svelte-1yto3i0");
    			toggle_class(div1, "showOptions", /*showOptions*/ ctx[7]);
    			add_location(div1, file$I, 103, 4, 3457);
    			attr_dev(select, "type", "multiple");
    			attr_dev(select, "class", "hidden svelte-1yto3i0");
    			add_location(select, file$I, 138, 4, 4951);
    			attr_dev(section, "class", "multiselect svelte-1yto3i0");
    			toggle_class(section, "readonly", /*readonly*/ ctx[1]);
    			add_location(section, file$I, 102, 0, 3407);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div1, null);
    			}

    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(section, t1);
    			append_dev(section, select);

    			if (default_slot) {
    				default_slot.m(select, null);
    			}

    			/*select_binding*/ ctx[22](select);
    			append_dev(section, t2);
    			if (if_block1) if_block1.m(section, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*handleTokenClick*/ ctx[12], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*selected, readonly*/ 18) {
    				each_value_1 = Object.values(/*selected*/ ctx[4]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div1, t0);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}

    			if (!/*readonly*/ ctx[1]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$d(ctx);
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty[0] & /*showOptions*/ 128) {
    				toggle_class(div1, "showOptions", /*showOptions*/ ctx[7]);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[0] & /*$$scope*/ 262144)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[18],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*showOptions*/ ctx[7]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*showOptions*/ 128) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$i(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*readonly*/ 2) {
    				toggle_class(section, "readonly", /*readonly*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (default_slot) default_slot.d(detaching);
    			/*select_binding*/ ctx[22](null);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const iconClearPath$3 = 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z';

    function instance$J($$self, $$props, $$invalidate) {
    	let filtered;
    	let placeholderText;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MultiSelect', slots, ['default']);
    	let { id = '' } = $$props;
    	let { value = [] } = $$props;
    	let { readonly = false } = $$props;
    	let { placeholder = '' } = $$props;

    	let input,
    		inputValue,
    		options = [],
    		activeOption,
    		showOptions = false,
    		selected = {},
    		first = true,
    		slot;

    	onMount(() => {
    		slot.querySelectorAll('option').forEach(o => {
    			o.selected && !value.includes(o.value) && $$invalidate(14, value = [...value, o.value]);
    			$$invalidate(16, options = [...options, { value: o.value, name: o.textContent }]);
    		});

    		$$invalidate(14, value = value.filter(d => d !== ''));

    		value && $$invalidate(4, selected = options.reduce(
    			(obj, op) => value.includes(op.value)
    			? { ...obj, [op.value]: op }
    			: obj,
    			{}
    		));

    		$$invalidate(17, first = false);
    	});

    	function add(token) {
    		if (!readonly) $$invalidate(4, selected[token.value] = token, selected);
    	}

    	function remove(value) {
    		if (!readonly) {
    			const { [value]: val, ...rest } = selected;
    			$$invalidate(4, selected = rest);
    		}
    	}

    	function optionsVisibility(show) {
    		if (readonly) return;

    		if (typeof show === 'boolean') {
    			$$invalidate(7, showOptions = show);
    			show && input.focus();
    		} else {
    			$$invalidate(7, showOptions = !showOptions);
    		}

    		if (!showOptions) {
    			$$invalidate(3, activeOption = undefined);
    		}
    	}

    	function handleKeyup(e) {
    		if (e.keyCode === 13) {
    			Object.keys(selected).includes(activeOption.value)
    			? remove(activeOption.value)
    			: add(activeOption);

    			$$invalidate(2, inputValue = '');
    		}

    		if ([38, 40].includes(e.keyCode)) {
    			// up and down arrows
    			const increment = e.keyCode === 38 ? -1 : 1;

    			const calcIndex = filtered.indexOf(activeOption) + increment;

    			$$invalidate(3, activeOption = calcIndex < 0
    			? filtered[filtered.length - 1]
    			: calcIndex === filtered.length
    				? filtered[0]
    				: filtered[calcIndex]);
    		}
    	}

    	function handleBlur(e) {
    		optionsVisibility(false);
    	}

    	function handleTokenClick(e) {
    		if (e.target.closest('.token-remove')) {
    			e.stopPropagation();
    			remove(e.target.closest('.token').dataset.id);
    		} else if (e.target.closest('.remove-all')) {
    			$$invalidate(4, selected = []);
    			$$invalidate(2, inputValue = '');
    		} else {
    			optionsVisibility(true);
    		}
    	}

    	function handleOptionMousedown(e) {
    		const value = e.target.dataset.value;

    		if (selected[value]) {
    			remove(value);
    		} else {
    			add(options.filter(o => o.value === value)[0]);
    			input.focus();
    		}
    	}
    	const writable_props = ['id', 'value', 'readonly', 'placeholder'];

    	Object_1$3.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MultiSelect> was created with unknown prop '${key}'`);
    	});

    	function input_1_input_handler() {
    		inputValue = this.value;
    		$$invalidate(2, inputValue);
    	}

    	function input_1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			input = $$value;
    			$$invalidate(6, input);
    		});
    	}

    	function select_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			slot = $$value;
    			$$invalidate(8, slot);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('value' in $$props) $$invalidate(14, value = $$props.value);
    		if ('readonly' in $$props) $$invalidate(1, readonly = $$props.readonly);
    		if ('placeholder' in $$props) $$invalidate(15, placeholder = $$props.placeholder);
    		if ('$$scope' in $$props) $$invalidate(18, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		fly,
    		id,
    		value,
    		readonly,
    		placeholder,
    		input,
    		inputValue,
    		options,
    		activeOption,
    		showOptions,
    		selected,
    		first,
    		slot,
    		iconClearPath: iconClearPath$3,
    		add,
    		remove,
    		optionsVisibility,
    		handleKeyup,
    		handleBlur,
    		handleTokenClick,
    		handleOptionMousedown,
    		filtered,
    		placeholderText
    	});

    	$$self.$inject_state = $$props => {
    		if ('id' in $$props) $$invalidate(0, id = $$props.id);
    		if ('value' in $$props) $$invalidate(14, value = $$props.value);
    		if ('readonly' in $$props) $$invalidate(1, readonly = $$props.readonly);
    		if ('placeholder' in $$props) $$invalidate(15, placeholder = $$props.placeholder);
    		if ('input' in $$props) $$invalidate(6, input = $$props.input);
    		if ('inputValue' in $$props) $$invalidate(2, inputValue = $$props.inputValue);
    		if ('options' in $$props) $$invalidate(16, options = $$props.options);
    		if ('activeOption' in $$props) $$invalidate(3, activeOption = $$props.activeOption);
    		if ('showOptions' in $$props) $$invalidate(7, showOptions = $$props.showOptions);
    		if ('selected' in $$props) $$invalidate(4, selected = $$props.selected);
    		if ('first' in $$props) $$invalidate(17, first = $$props.first);
    		if ('slot' in $$props) $$invalidate(8, slot = $$props.slot);
    		if ('filtered' in $$props) $$invalidate(5, filtered = $$props.filtered);
    		if ('placeholderText' in $$props) $$invalidate(9, placeholderText = $$props.placeholderText);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*first, selected*/ 131088) {
    			if (!first) $$invalidate(14, value = Object.values(selected).map(o => o.value));
    		}

    		if ($$self.$$.dirty[0] & /*options, inputValue*/ 65540) {
    			$$invalidate(5, filtered = options.filter(o => inputValue
    			? o.name.toLowerCase().includes(inputValue.toLowerCase())
    			: o));
    		}

    		if ($$self.$$.dirty[0] & /*activeOption, filtered, inputValue*/ 44) {
    			if (activeOption && !filtered.includes(activeOption) || !activeOption && inputValue) $$invalidate(3, activeOption = filtered[0]);
    		}

    		if ($$self.$$.dirty[0] & /*value, placeholder*/ 49152) {
    			$$invalidate(9, placeholderText = typeof value === 'undefined' || value.length > 0
    			? ''
    			: placeholder);
    		}
    	};

    	return [
    		id,
    		readonly,
    		inputValue,
    		activeOption,
    		selected,
    		filtered,
    		input,
    		showOptions,
    		slot,
    		placeholderText,
    		handleKeyup,
    		handleBlur,
    		handleTokenClick,
    		handleOptionMousedown,
    		value,
    		placeholder,
    		options,
    		first,
    		$$scope,
    		slots,
    		input_1_input_handler,
    		input_1_binding,
    		select_binding
    	];
    }

    class MultiSelect extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$J,
    			create_fragment$J,
    			safe_not_equal,
    			{
    				id: 0,
    				value: 14,
    				readonly: 1,
    				placeholder: 15
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiSelect",
    			options,
    			id: create_fragment$J.name
    		});
    	}

    	get id() {
    		throw new Error("<MultiSelect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<MultiSelect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<MultiSelect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MultiSelect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<MultiSelect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<MultiSelect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<MultiSelect>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<MultiSelect>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/byPage/discover/ProjectSearch.svelte generated by Svelte v3.46.4 */

    const { Object: Object_1$2, console: console_1$e } = globals;

    const file$H = "src/components/byPage/discover/ProjectSearch.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_5$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_6$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_7$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_8$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_9$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_10$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_11$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_12$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_13$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    function get_each_context_14$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    // (61:4) {#if $ui.page === 'discover'}
    function create_if_block_5$3(ctx) {
    	let div1;
    	let div0;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "← Close search filter";
    			attr_dev(div0, "class", "close-button svelte-8akpg7");
    			add_location(div0, file$H, 62, 8, 2268);
    			attr_dev(div1, "class", "close-container svelte-8akpg7");
    			add_location(div1, file$H, 61, 4, 2230);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*handleClose*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(61:4) {#if $ui.page === 'discover'}",
    		ctx
    	});

    	return block;
    }

    // (77:8) {#if paneVisbility.byOutcomes}
    function create_if_block_4$4(ctx) {
    	let div4;
    	let div0;
    	let h40;
    	let raw0_value = keyValues.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = conditions.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = performanceObjectivesGroup.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let t5;
    	let div3;
    	let h43;
    	let raw3_value = performanceObjectivesTheme.label + "";
    	let t6;
    	let multiselect3;
    	let updating_value_3;
    	let div4_transition;
    	let current;

    	function multiselect0_value_binding(value) {
    		/*multiselect0_value_binding*/ ctx[7](value);
    	}

    	let multiselect0_props = {
    		id: keyValues.name,
    		placeholder: keyValues.placeholder,
    		$$slots: { default: [create_default_slot_14$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.keyValues !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.project.keyValues;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding));

    	function multiselect1_value_binding(value) {
    		/*multiselect1_value_binding*/ ctx[8](value);
    	}

    	let multiselect1_props = {
    		id: conditions.name,
    		placeholder: conditions.placeholder,
    		$$slots: { default: [create_default_slot_13$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.conditions !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.project.conditions;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding));

    	function multiselect2_value_binding(value) {
    		/*multiselect2_value_binding*/ ctx[9](value);
    	}

    	let multiselect2_props = {
    		id: performanceObjectivesGroup.name,
    		placeholder: performanceObjectivesGroup.placeholder,
    		$$slots: { default: [create_default_slot_12$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.performanceObjectivesGroup !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.project.performanceObjectivesGroup;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding));

    	function multiselect3_value_binding(value) {
    		/*multiselect3_value_binding*/ ctx[10](value);
    	}

    	let multiselect3_props = {
    		id: performanceObjectivesTheme.name,
    		placeholder: performanceObjectivesTheme.placeholder,
    		$$slots: { default: [create_default_slot_11$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.performanceObjectivesTheme !== void 0) {
    		multiselect3_props.value = /*$ui*/ ctx[0].search.project.performanceObjectivesTheme;
    	}

    	multiselect3 = new MultiSelect({
    			props: multiselect3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect3, 'value', multiselect3_value_binding));

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			t5 = space();
    			div3 = element("div");
    			h43 = element("h4");
    			t6 = space();
    			create_component(multiselect3.$$.fragment);
    			attr_dev(h40, "class", "svelte-8akpg7");
    			add_location(h40, file$H, 79, 16, 2926);
    			attr_dev(div0, "class", "multi-select-container svelte-8akpg7");
    			set_style(div0, "z-index", "21");
    			add_location(div0, file$H, 78, 12, 2852);
    			attr_dev(h41, "class", "svelte-8akpg7");
    			add_location(h41, file$H, 89, 16, 3430);
    			attr_dev(div1, "class", "multi-select-container svelte-8akpg7");
    			set_style(div1, "z-index", "20");
    			add_location(div1, file$H, 88, 12, 3355);
    			attr_dev(h42, "class", "svelte-8akpg7");
    			add_location(h42, file$H, 99, 16, 3940);
    			attr_dev(div2, "class", "multi-select-container svelte-8akpg7");
    			set_style(div2, "z-index", "19");
    			add_location(div2, file$H, 98, 12, 3866);
    			attr_dev(h43, "class", "svelte-8akpg7");
    			add_location(h43, file$H, 109, 16, 4530);
    			attr_dev(div3, "class", "multi-select-container svelte-8akpg7");
    			set_style(div3, "z-index", "18");
    			add_location(div3, file$H, 108, 12, 4456);
    			attr_dev(div4, "class", "collapse__body svelte-8akpg7");
    			add_location(div4, file$H, 77, 8, 2791);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div4, t1);
    			append_dev(div4, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div4, t3);
    			append_dev(div4, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			append_dev(div4, t5);
    			append_dev(div4, div3);
    			append_dev(div3, h43);
    			h43.innerHTML = raw3_value;
    			append_dev(div3, t6);
    			mount_component(multiselect3, div3, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.project.keyValues;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.project.conditions;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.project.performanceObjectivesGroup;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    			const multiselect3_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty[0] & /*$ui*/ 1) {
    				updating_value_3 = true;
    				multiselect3_changes.value = /*$ui*/ ctx[0].search.project.performanceObjectivesTheme;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			multiselect3.$set(multiselect3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);
    			transition_in(multiselect3.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, true);
    				div4_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			transition_out(multiselect3.$$.fragment, local);
    			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, false);
    			div4_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			destroy_component(multiselect3);
    			if (detaching && div4_transition) div4_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(77:8) {#if paneVisbility.byOutcomes}",
    		ctx
    	});

    	return block;
    }

    // (83:20) {#each keyValues.list as name}
    function create_each_block_14$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 83, 20, 3221);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_14$1.name,
    		type: "each",
    		source: "(83:20) {#each keyValues.list as name}",
    		ctx
    	});

    	return block;
    }

    // (81:16) <MultiSelect id={keyValues.name} bind:value={$ui.search.project.keyValues} placeholder={keyValues.placeholder} >
    function create_default_slot_14$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_14 = keyValues.list;
    	validate_each_argument(each_value_14);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_14.length; i += 1) {
    		each_blocks[i] = create_each_block_14$1(get_each_context_14$1(ctx, each_value_14, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 81, 20, 3108);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*keyValues*/ 0) {
    				each_value_14 = keyValues.list;
    				validate_each_argument(each_value_14);
    				let i;

    				for (i = 0; i < each_value_14.length; i += 1) {
    					const child_ctx = get_each_context_14$1(ctx, each_value_14, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_14$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_14.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$1.name,
    		type: "slot",
    		source: "(81:16) <MultiSelect id={keyValues.name} bind:value={$ui.search.project.keyValues} placeholder={keyValues.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (93:20) {#each conditions.list as name}
    function create_each_block_13$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 93, 20, 3732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_13$1.name,
    		type: "each",
    		source: "(93:20) {#each conditions.list as name}",
    		ctx
    	});

    	return block;
    }

    // (91:16) <MultiSelect id={conditions.name} bind:value={$ui.search.project.conditions}   placeholder={conditions.placeholder} >
    function create_default_slot_13$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_13 = conditions.list;
    	validate_each_argument(each_value_13);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_13.length; i += 1) {
    		each_blocks[i] = create_each_block_13$1(get_each_context_13$1(ctx, each_value_13, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 91, 20, 3618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 0) {
    				each_value_13 = conditions.list;
    				validate_each_argument(each_value_13);
    				let i;

    				for (i = 0; i < each_value_13.length; i += 1) {
    					const child_ctx = get_each_context_13$1(ctx, each_value_13, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_13$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_13.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$1.name,
    		type: "slot",
    		source: "(91:16) <MultiSelect id={conditions.name} bind:value={$ui.search.project.conditions}   placeholder={conditions.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (103:20) {#each performanceObjectivesGroup.list as name}
    function create_each_block_12$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 103, 20, 4322);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_12$2.name,
    		type: "each",
    		source: "(103:20) {#each performanceObjectivesGroup.list as name}",
    		ctx
    	});

    	return block;
    }

    // (101:16) <MultiSelect id={performanceObjectivesGroup.name} bind:value={$ui.search.project.performanceObjectivesGroup}   placeholder={performanceObjectivesGroup.placeholder} >
    function create_default_slot_12$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_12 = performanceObjectivesGroup.list;
    	validate_each_argument(each_value_12);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_12.length; i += 1) {
    		each_blocks[i] = create_each_block_12$2(get_each_context_12$2(ctx, each_value_12, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 101, 20, 4192);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*performanceObjectivesGroup*/ 0) {
    				each_value_12 = performanceObjectivesGroup.list;
    				validate_each_argument(each_value_12);
    				let i;

    				for (i = 0; i < each_value_12.length; i += 1) {
    					const child_ctx = get_each_context_12$2(ctx, each_value_12, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_12$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_12.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$2.name,
    		type: "slot",
    		source: "(101:16) <MultiSelect id={performanceObjectivesGroup.name} bind:value={$ui.search.project.performanceObjectivesGroup}   placeholder={performanceObjectivesGroup.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (113:20) {#each performanceObjectivesTheme.list as name}
    function create_each_block_11$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 113, 20, 4912);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_11$2.name,
    		type: "each",
    		source: "(113:20) {#each performanceObjectivesTheme.list as name}",
    		ctx
    	});

    	return block;
    }

    // (111:16) <MultiSelect id={performanceObjectivesTheme.name} bind:value={$ui.search.project.performanceObjectivesTheme}   placeholder={performanceObjectivesTheme.placeholder} >
    function create_default_slot_11$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_11 = performanceObjectivesTheme.list;
    	validate_each_argument(each_value_11);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_11.length; i += 1) {
    		each_blocks[i] = create_each_block_11$2(get_each_context_11$2(ctx, each_value_11, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 111, 20, 4782);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*performanceObjectivesTheme*/ 0) {
    				each_value_11 = performanceObjectivesTheme.list;
    				validate_each_argument(each_value_11);
    				let i;

    				for (i = 0; i < each_value_11.length; i += 1) {
    					const child_ctx = get_each_context_11$2(ctx, each_value_11, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_11$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_11.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$2.name,
    		type: "slot",
    		source: "(111:16) <MultiSelect id={performanceObjectivesTheme.name} bind:value={$ui.search.project.performanceObjectivesTheme}   placeholder={performanceObjectivesTheme.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (129:8) {#if paneVisbility.byLocation}
    function create_if_block_3$a(ctx) {
    	let div3;
    	let div0;
    	let h40;
    	let raw0_value = catchments.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = subcatchments.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = locations.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let div3_transition;
    	let current;

    	function multiselect0_value_binding_1(value) {
    		/*multiselect0_value_binding_1*/ ctx[11](value);
    	}

    	let multiselect0_props = {
    		id: catchments.name,
    		placeholder: catchments.placeholder,
    		$$slots: { default: [create_default_slot_10$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.catchment !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.project.catchment;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_1));

    	function multiselect1_value_binding_1(value) {
    		/*multiselect1_value_binding_1*/ ctx[12](value);
    	}

    	let multiselect1_props = {
    		id: subcatchments.name,
    		placeholder: subcatchments.placeholder,
    		$$slots: { default: [create_default_slot_9$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.subcatchment !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.project.subcatchment;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_1));

    	function multiselect2_value_binding_1(value) {
    		/*multiselect2_value_binding_1*/ ctx[13](value);
    	}

    	let multiselect2_props = {
    		id: locations.name,
    		placeholder: locations.placeholder,
    		$$slots: { default: [create_default_slot_8$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.locations !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.project.locations;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_1));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			attr_dev(h40, "class", "svelte-8akpg7");
    			add_location(h40, file$H, 131, 16, 5570);
    			attr_dev(div0, "class", "multi-select-container svelte-8akpg7");
    			set_style(div0, "z-index", "17");
    			add_location(div0, file$H, 130, 12, 5496);
    			attr_dev(h41, "class", "svelte-8akpg7");
    			add_location(h41, file$H, 141, 16, 6093);
    			attr_dev(div1, "class", "multi-select-container svelte-8akpg7");
    			set_style(div1, "z-index", "16");
    			add_location(div1, file$H, 140, 12, 6019);
    			attr_dev(h42, "class", "svelte-8akpg7");
    			add_location(h42, file$H, 151, 16, 6631);
    			attr_dev(div2, "class", "multi-select-container svelte-8akpg7");
    			set_style(div2, "z-index", "15");
    			add_location(div2, file$H, 150, 12, 6557);
    			attr_dev(div3, "class", "collapse__body svelte-8akpg7");
    			add_location(div3, file$H, 129, 8, 5435);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.project.catchment;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.project.subcatchment;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.project.locations;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			if (detaching && div3_transition) div3_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$a.name,
    		type: "if",
    		source: "(129:8) {#if paneVisbility.byLocation}",
    		ctx
    	});

    	return block;
    }

    // (135:20) {#each catchments.list as name}
    function create_each_block_10$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 135, 20, 5869);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_10$2.name,
    		type: "each",
    		source: "(135:20) {#each catchments.list as name}",
    		ctx
    	});

    	return block;
    }

    // (133:16) <MultiSelect id={catchments.name} bind:value={$ui.search.project.catchment} placeholder={catchments.placeholder} >
    function create_default_slot_10$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_10 = catchments.list;
    	validate_each_argument(each_value_10);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_10.length; i += 1) {
    		each_blocks[i] = create_each_block_10$2(get_each_context_10$2(ctx, each_value_10, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 133, 20, 5755);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*catchments*/ 0) {
    				each_value_10 = catchments.list;
    				validate_each_argument(each_value_10);
    				let i;

    				for (i = 0; i < each_value_10.length; i += 1) {
    					const child_ctx = get_each_context_10$2(ctx, each_value_10, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_10$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_10.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$2.name,
    		type: "slot",
    		source: "(133:16) <MultiSelect id={catchments.name} bind:value={$ui.search.project.catchment} placeholder={catchments.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (145:20) {#each subcatchments.list as name}
    function create_each_block_9$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 145, 20, 6407);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_9$2.name,
    		type: "each",
    		source: "(145:20) {#each subcatchments.list as name}",
    		ctx
    	});

    	return block;
    }

    // (143:16) <MultiSelect id={subcatchments.name} bind:value={$ui.search.project.subcatchment} placeholder={subcatchments.placeholder} >
    function create_default_slot_9$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_9 = subcatchments.list;
    	validate_each_argument(each_value_9);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_9.length; i += 1) {
    		each_blocks[i] = create_each_block_9$2(get_each_context_9$2(ctx, each_value_9, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 143, 20, 6290);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*subcatchments*/ 0) {
    				each_value_9 = subcatchments.list;
    				validate_each_argument(each_value_9);
    				let i;

    				for (i = 0; i < each_value_9.length; i += 1) {
    					const child_ctx = get_each_context_9$2(ctx, each_value_9, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_9$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_9.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$2.name,
    		type: "slot",
    		source: "(143:16) <MultiSelect id={subcatchments.name} bind:value={$ui.search.project.subcatchment} placeholder={subcatchments.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (155:20) {#each locations.list as name}
    function create_each_block_8$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 155, 20, 6925);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8$2.name,
    		type: "each",
    		source: "(155:20) {#each locations.list as name}",
    		ctx
    	});

    	return block;
    }

    // (153:16) <MultiSelect id={locations.name} bind:value={$ui.search.project.locations} placeholder={locations.placeholder}>
    function create_default_slot_8$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_8 = locations.list;
    	validate_each_argument(each_value_8);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks[i] = create_each_block_8$2(get_each_context_8$2(ctx, each_value_8, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 153, 20, 6812);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*locations*/ 0) {
    				each_value_8 = locations.list;
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8$2(ctx, each_value_8, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_8$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_8.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$2.name,
    		type: "slot",
    		source: "(153:16) <MultiSelect id={locations.name} bind:value={$ui.search.project.locations} placeholder={locations.placeholder}>",
    		ctx
    	});

    	return block;
    }

    // (171:8) {#if paneVisbility.byCharacteristics}
    function create_if_block_2$a(ctx) {
    	let div5;
    	let div0;
    	let h40;
    	let raw0_value = initiativeType.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = projectStage.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = projectClass.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let t5;
    	let div3;
    	let h43;
    	let raw3_value = projectSize.label + "";
    	let t6;
    	let multiselect3;
    	let updating_value_3;
    	let t7;
    	let div4;
    	let h44;
    	let raw4_value = projectScale.label + "";
    	let t8;
    	let multiselect4;
    	let updating_value_4;
    	let div5_transition;
    	let current;

    	function multiselect0_value_binding_2(value) {
    		/*multiselect0_value_binding_2*/ ctx[14](value);
    	}

    	let multiselect0_props = {
    		id: initiativeType.name,
    		placeholder: initiativeType.placeholder,
    		$$slots: { default: [create_default_slot_7$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.initiativeType !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.project.initiativeType;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_2));

    	function multiselect1_value_binding_2(value) {
    		/*multiselect1_value_binding_2*/ ctx[15](value);
    	}

    	let multiselect1_props = {
    		id: projectStage.name,
    		placeholder: projectStage.placeholder,
    		$$slots: { default: [create_default_slot_6$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.projectStage !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.project.projectStage;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_2));

    	function multiselect2_value_binding_2(value) {
    		/*multiselect2_value_binding_2*/ ctx[16](value);
    	}

    	let multiselect2_props = {
    		id: projectClass.name,
    		placeholder: projectClass.placeholder,
    		$$slots: { default: [create_default_slot_5$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.projectClass !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.project.projectClass;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_2));

    	function multiselect3_value_binding_1(value) {
    		/*multiselect3_value_binding_1*/ ctx[17](value);
    	}

    	let multiselect3_props = {
    		id: projectSize.name,
    		placeholder: projectSize.placeholder,
    		$$slots: { default: [create_default_slot_4$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.projectSize !== void 0) {
    		multiselect3_props.value = /*$ui*/ ctx[0].search.project.projectSize;
    	}

    	multiselect3 = new MultiSelect({
    			props: multiselect3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect3, 'value', multiselect3_value_binding_1));

    	function multiselect4_value_binding(value) {
    		/*multiselect4_value_binding*/ ctx[18](value);
    	}

    	let multiselect4_props = {
    		id: projectScale.name,
    		placeholder: projectScale.placeholder,
    		$$slots: { default: [create_default_slot_3$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.projectScale !== void 0) {
    		multiselect4_props.value = /*$ui*/ ctx[0].search.project.projectScale;
    	}

    	multiselect4 = new MultiSelect({
    			props: multiselect4_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect4, 'value', multiselect4_value_binding));

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			t5 = space();
    			div3 = element("div");
    			h43 = element("h4");
    			t6 = space();
    			create_component(multiselect3.$$.fragment);
    			t7 = space();
    			div4 = element("div");
    			h44 = element("h4");
    			t8 = space();
    			create_component(multiselect4.$$.fragment);
    			attr_dev(h40, "class", "svelte-8akpg7");
    			add_location(h40, file$H, 173, 16, 7641);
    			attr_dev(div0, "class", "multi-select-container svelte-8akpg7");
    			set_style(div0, "z-index", "14");
    			add_location(div0, file$H, 172, 12, 7567);
    			attr_dev(h41, "class", "svelte-8akpg7");
    			add_location(h41, file$H, 182, 16, 8186);
    			attr_dev(div1, "class", "multi-select-container svelte-8akpg7");
    			set_style(div1, "z-index", "13");
    			add_location(div1, file$H, 181, 12, 8112);
    			attr_dev(h42, "class", "svelte-8akpg7");
    			add_location(h42, file$H, 191, 16, 8721);
    			attr_dev(div2, "class", "multi-select-container svelte-8akpg7");
    			set_style(div2, "z-index", "12");
    			add_location(div2, file$H, 190, 12, 8647);
    			attr_dev(h43, "class", "svelte-8akpg7");
    			add_location(h43, file$H, 200, 16, 9256);
    			attr_dev(div3, "class", "multi-select-container svelte-8akpg7");
    			set_style(div3, "z-index", "11");
    			add_location(div3, file$H, 199, 12, 9182);
    			attr_dev(h44, "class", "svelte-8akpg7");
    			add_location(h44, file$H, 209, 16, 9786);
    			attr_dev(div4, "class", "multi-select-container svelte-8akpg7");
    			set_style(div4, "z-index", "10");
    			add_location(div4, file$H, 208, 12, 9712);
    			attr_dev(div5, "class", "collapse__body svelte-8akpg7");
    			add_location(div5, file$H, 171, 8, 7506);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div5, t1);
    			append_dev(div5, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			append_dev(div5, t5);
    			append_dev(div5, div3);
    			append_dev(div3, h43);
    			h43.innerHTML = raw3_value;
    			append_dev(div3, t6);
    			mount_component(multiselect3, div3, null);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			append_dev(div4, h44);
    			h44.innerHTML = raw4_value;
    			append_dev(div4, t8);
    			mount_component(multiselect4, div4, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.project.initiativeType;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.project.projectStage;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.project.projectClass;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    			const multiselect3_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty[0] & /*$ui*/ 1) {
    				updating_value_3 = true;
    				multiselect3_changes.value = /*$ui*/ ctx[0].search.project.projectSize;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			multiselect3.$set(multiselect3_changes);
    			const multiselect4_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect4_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_4 && dirty[0] & /*$ui*/ 1) {
    				updating_value_4 = true;
    				multiselect4_changes.value = /*$ui*/ ctx[0].search.project.projectScale;
    				add_flush_callback(() => updating_value_4 = false);
    			}

    			multiselect4.$set(multiselect4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);
    			transition_in(multiselect3.$$.fragment, local);
    			transition_in(multiselect4.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div5_transition) div5_transition = create_bidirectional_transition(div5, slide, {}, true);
    				div5_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			transition_out(multiselect3.$$.fragment, local);
    			transition_out(multiselect4.$$.fragment, local);
    			if (!div5_transition) div5_transition = create_bidirectional_transition(div5, slide, {}, false);
    			div5_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			destroy_component(multiselect3);
    			destroy_component(multiselect4);
    			if (detaching && div5_transition) div5_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(171:8) {#if paneVisbility.byCharacteristics}",
    		ctx
    	});

    	return block;
    }

    // (177:20) {#each initiativeType.list as name}
    function create_each_block_7$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 177, 20, 7963);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7$2.name,
    		type: "each",
    		source: "(177:20) {#each initiativeType.list as name}",
    		ctx
    	});

    	return block;
    }

    // (175:16) <MultiSelect id = {initiativeType.name} bind:value={$ui.search.project.initiativeType} placeholder={initiativeType.placeholder} >
    function create_default_slot_7$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_7 = initiativeType.list;
    	validate_each_argument(each_value_7);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks[i] = create_each_block_7$2(get_each_context_7$2(ctx, each_value_7, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 175, 20, 7845);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*initiativeType*/ 0) {
    				each_value_7 = initiativeType.list;
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7$2(ctx, each_value_7, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_7$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_7.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$2.name,
    		type: "slot",
    		source: "(175:16) <MultiSelect id = {initiativeType.name} bind:value={$ui.search.project.initiativeType} placeholder={initiativeType.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (186:20) {#each projectStage.list as name}
    function create_each_block_6$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 186, 20, 8498);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6$2.name,
    		type: "each",
    		source: "(186:20) {#each projectStage.list as name}",
    		ctx
    	});

    	return block;
    }

    // (184:16) <MultiSelect id = {projectStage.name} bind:value={$ui.search.project.projectStage} placeholder={projectStage.placeholder} >
    function create_default_slot_6$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_6 = projectStage.list;
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6$2(get_each_context_6$2(ctx, each_value_6, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 184, 20, 8382);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectStage*/ 0) {
    				each_value_6 = projectStage.list;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6$2(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_6$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_6.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$2.name,
    		type: "slot",
    		source: "(184:16) <MultiSelect id = {projectStage.name} bind:value={$ui.search.project.projectStage} placeholder={projectStage.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (195:20) {#each projectClass.list as name}
    function create_each_block_5$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 195, 20, 9033);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$2.name,
    		type: "each",
    		source: "(195:20) {#each projectClass.list as name}",
    		ctx
    	});

    	return block;
    }

    // (193:16) <MultiSelect id = {projectClass.name} bind:value={$ui.search.project.projectClass} placeholder={projectClass.placeholder} >
    function create_default_slot_5$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_5 = projectClass.list;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5$2(get_each_context_5$2(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 193, 20, 8917);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectClass*/ 0) {
    				each_value_5 = projectClass.list;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$2(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$2.name,
    		type: "slot",
    		source: "(193:16) <MultiSelect id = {projectClass.name} bind:value={$ui.search.project.projectClass} placeholder={projectClass.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (204:20) {#each projectSize.list as name}
    function create_each_block_4$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 204, 20, 9563);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$2.name,
    		type: "each",
    		source: "(204:20) {#each projectSize.list as name}",
    		ctx
    	});

    	return block;
    }

    // (202:16) <MultiSelect id = {projectSize.name} bind:value={$ui.search.project.projectSize} placeholder={projectSize.placeholder} >
    function create_default_slot_4$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_4 = projectSize.list;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$2(get_each_context_4$2(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 202, 20, 9448);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectSize*/ 0) {
    				each_value_4 = projectSize.list;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$2(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(202:16) <MultiSelect id = {projectSize.name} bind:value={$ui.search.project.projectSize} placeholder={projectSize.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (213:20) {#each projectScale.list as name}
    function create_each_block_3$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 213, 20, 10098);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$2.name,
    		type: "each",
    		source: "(213:20) {#each projectScale.list as name}",
    		ctx
    	});

    	return block;
    }

    // (211:16) <MultiSelect id = {projectScale.name} bind:value={$ui.search.project.projectScale} placeholder={projectScale.placeholder} >
    function create_default_slot_3$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_3 = projectScale.list;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$2(get_each_context_3$2(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 211, 20, 9982);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectScale*/ 0) {
    				each_value_3 = projectScale.list;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$2(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(211:16) <MultiSelect id = {projectScale.name} bind:value={$ui.search.project.projectScale} placeholder={projectScale.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (229:8) {#if paneVisbility.byStakeholders}
    function create_if_block_1$c(ctx) {
    	let div3;
    	let div0;
    	let h40;
    	let raw0_value = leadOrg.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = leadOrgType.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = partnerOrg.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let div3_transition;
    	let current;

    	function multiselect0_value_binding_3(value) {
    		/*multiselect0_value_binding_3*/ ctx[19](value);
    	}

    	let multiselect0_props = {
    		id: leadOrg.name,
    		placeholder: leadOrg.placeholder,
    		$$slots: { default: [create_default_slot_2$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.leadOrg !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.project.leadOrg;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_3));

    	function multiselect1_value_binding_3(value) {
    		/*multiselect1_value_binding_3*/ ctx[20](value);
    	}

    	let multiselect1_props = {
    		id: leadOrgType.name,
    		placeholder: leadOrgType.placeholder,
    		$$slots: { default: [create_default_slot_1$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.leadOrgType !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.project.leadOrgType;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_3));

    	function multiselect2_value_binding_3(value) {
    		/*multiselect2_value_binding_3*/ ctx[21](value);
    	}

    	let multiselect2_props = {
    		id: partnerOrg.name,
    		placeholder: partnerOrg.placeholder,
    		$$slots: { default: [create_default_slot$2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.partnerOrg !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.project.partnerOrg;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_3));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			attr_dev(h40, "class", "svelte-8akpg7");
    			add_location(h40, file$H, 231, 16, 10782);
    			attr_dev(div0, "class", "multi-select-container svelte-8akpg7");
    			set_style(div0, "z-index", "9");
    			add_location(div0, file$H, 230, 12, 10709);
    			attr_dev(h41, "class", "svelte-8akpg7");
    			add_location(h41, file$H, 240, 16, 11291);
    			attr_dev(div1, "class", "multi-select-container svelte-8akpg7");
    			set_style(div1, "z-index", "8");
    			add_location(div1, file$H, 239, 12, 11218);
    			attr_dev(h42, "class", "svelte-8akpg7");
    			add_location(h42, file$H, 249, 16, 11820);
    			attr_dev(div2, "class", "multi-select-container svelte-8akpg7");
    			set_style(div2, "z-index", "7");
    			add_location(div2, file$H, 248, 12, 11747);
    			attr_dev(div3, "class", "collapse__body svelte-8akpg7");
    			add_location(div3, file$H, 229, 8, 10649);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.project.leadOrg;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.project.leadOrgType;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 4194304) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.project.partnerOrg;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			if (detaching && div3_transition) div3_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(229:8) {#if paneVisbility.byStakeholders}",
    		ctx
    	});

    	return block;
    }

    // (235:20) {#each leadOrg.list as name}
    function create_each_block_2$2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 235, 20, 11069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$2.name,
    		type: "each",
    		source: "(235:20) {#each leadOrg.list as name}",
    		ctx
    	});

    	return block;
    }

    // (233:16) <MultiSelect id = {leadOrg.name} bind:value={$ui.search.project.leadOrg} placeholder={leadOrg.placeholder} >
    function create_default_slot_2$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_2 = leadOrg.list;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 233, 20, 10958);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*leadOrg*/ 0) {
    				each_value_2 = leadOrg.list;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(233:16) <MultiSelect id = {leadOrg.name} bind:value={$ui.search.project.leadOrg} placeholder={leadOrg.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (244:20) {#each leadOrgType.list as name}
    function create_each_block_1$3(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 244, 20, 11598);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(244:20) {#each leadOrgType.list as name}",
    		ctx
    	});

    	return block;
    }

    // (242:16) <MultiSelect id = {leadOrgType.name} bind:value={$ui.search.project.leadOrgType} placeholder={leadOrgType.placeholder} >
    function create_default_slot_1$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_1 = leadOrgType.list;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 242, 20, 11483);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*leadOrgType*/ 0) {
    				each_value_1 = leadOrgType.list;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(242:16) <MultiSelect id = {leadOrgType.name} bind:value={$ui.search.project.leadOrgType} placeholder={leadOrgType.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (253:20) {#each partnerOrg.list as name}
    function create_each_block$8(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[22] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[22];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 253, 20, 12122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(253:20) {#each partnerOrg.list as name}",
    		ctx
    	});

    	return block;
    }

    // (251:16) <MultiSelect id = {partnerOrg.name} bind:value={$ui.search.project.partnerOrg} placeholder={partnerOrg.placeholder} >
    function create_default_slot$2(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value = partnerOrg.list;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-8akpg7");
    			add_location(option, file$H, 251, 20, 12008);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*partnerOrg*/ 0) {
    				each_value = partnerOrg.list;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(251:16) <MultiSelect id = {partnerOrg.name} bind:value={$ui.search.project.partnerOrg} placeholder={partnerOrg.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (265:4) {#if noSearchParams > 0}
    function create_if_block$h(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Clear the search parameters";
    			attr_dev(div, "class", "clear-search-container svelte-8akpg7");
    			add_location(div, file$H, 265, 8, 12469);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleClearSearch*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(265:4) {#if noSearchParams > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$I(ctx) {
    	let section;
    	let t0;
    	let div2;
    	let div1;
    	let h30;
    	let t2;
    	let div0;
    	let t4;
    	let t5;
    	let div5;
    	let div4;
    	let h31;
    	let t7;
    	let div3;
    	let t9;
    	let t10;
    	let div8;
    	let div7;
    	let h32;
    	let t12;
    	let div6;
    	let t14;
    	let t15;
    	let div11;
    	let div10;
    	let h33;
    	let t17;
    	let div9;
    	let t19;
    	let t20;
    	let div12;
    	let button;
    	let t22;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$ui*/ ctx[0].page === 'discover' && create_if_block_5$3(ctx);
    	let if_block1 = /*paneVisbility*/ ctx[1].byOutcomes && create_if_block_4$4(ctx);
    	let if_block2 = /*paneVisbility*/ ctx[1].byLocation && create_if_block_3$a(ctx);
    	let if_block3 = /*paneVisbility*/ ctx[1].byCharacteristics && create_if_block_2$a(ctx);
    	let if_block4 = /*paneVisbility*/ ctx[1].byStakeholders && create_if_block_1$c(ctx);
    	let if_block5 = /*noSearchParams*/ ctx[2] > 0 && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div2 = element("div");
    			div1 = element("div");
    			h30 = element("h3");
    			h30.textContent = "Waterway outcomes";
    			t2 = space();
    			div0 = element("div");
    			div0.textContent = "↓";
    			t4 = space();
    			if (if_block1) if_block1.c();
    			t5 = space();
    			div5 = element("div");
    			div4 = element("div");
    			h31 = element("h3");
    			h31.textContent = "Location";
    			t7 = space();
    			div3 = element("div");
    			div3.textContent = "↓";
    			t9 = space();
    			if (if_block2) if_block2.c();
    			t10 = space();
    			div8 = element("div");
    			div7 = element("div");
    			h32 = element("h3");
    			h32.textContent = "Project characteristics";
    			t12 = space();
    			div6 = element("div");
    			div6.textContent = "↓";
    			t14 = space();
    			if (if_block3) if_block3.c();
    			t15 = space();
    			div11 = element("div");
    			div10 = element("div");
    			h33 = element("h3");
    			h33.textContent = "Stakeholders";
    			t17 = space();
    			div9 = element("div");
    			div9.textContent = "↓";
    			t19 = space();
    			if (if_block4) if_block4.c();
    			t20 = space();
    			div12 = element("div");
    			button = element("button");
    			button.textContent = "Search for projects";
    			t22 = space();
    			if (if_block5) if_block5.c();
    			attr_dev(h30, "class", "svelte-8akpg7");
    			add_location(h30, file$H, 73, 12, 2646);
    			attr_dev(div0, "class", "toggle-icon down svelte-8akpg7");
    			add_location(div0, file$H, 74, 12, 2685);
    			attr_dev(div1, "id", "byOutcomes");
    			attr_dev(div1, "class", "collapse__header svelte-8akpg7");
    			attr_dev(div1, "type", "button");
    			toggle_class(div1, "selected", /*paneVisbility*/ ctx[1].byOutcomes);
    			add_location(div1, file$H, 71, 8, 2492);
    			attr_dev(div2, "class", "container svelte-8akpg7");
    			add_location(div2, file$H, 70, 4, 2458);
    			attr_dev(h31, "class", "svelte-8akpg7");
    			add_location(h31, file$H, 125, 12, 5299);
    			attr_dev(div3, "class", "toggle-icon down svelte-8akpg7");
    			add_location(div3, file$H, 126, 12, 5329);
    			attr_dev(div4, "id", "byLocation");
    			attr_dev(div4, "class", "collapse__header svelte-8akpg7");
    			attr_dev(div4, "type", "button");
    			toggle_class(div4, "selected", /*paneVisbility*/ ctx[1].byLocation);
    			add_location(div4, file$H, 123, 8, 5145);
    			attr_dev(div5, "class", "container svelte-8akpg7");
    			add_location(div5, file$H, 122, 4, 5111);
    			attr_dev(h32, "class", "svelte-8akpg7");
    			add_location(h32, file$H, 167, 12, 7348);
    			attr_dev(div6, "class", "toggle-icon down svelte-8akpg7");
    			add_location(div6, file$H, 168, 12, 7393);
    			attr_dev(div7, "id", "byCharacteristics");
    			attr_dev(div7, "class", "collapse__header svelte-8akpg7");
    			attr_dev(div7, "type", "button");
    			toggle_class(div7, "selected", /*paneVisbility*/ ctx[1].byCharacteristics);
    			add_location(div7, file$H, 165, 8, 7180);
    			attr_dev(div8, "class", "container svelte-8akpg7");
    			add_location(div8, file$H, 164, 4, 7146);
    			attr_dev(h33, "class", "svelte-8akpg7");
    			add_location(h33, file$H, 225, 12, 10505);
    			attr_dev(div9, "class", "toggle-icon down svelte-8akpg7");
    			add_location(div9, file$H, 226, 12, 10539);
    			attr_dev(div10, "id", "byStakeholders");
    			attr_dev(div10, "class", "collapse__header svelte-8akpg7");
    			attr_dev(div10, "type", "button");
    			toggle_class(div10, "selected", /*paneVisbility*/ ctx[1].byStakeholders);
    			add_location(div10, file$H, 223, 8, 10343);
    			attr_dev(div11, "class", "container svelte-8akpg7");
    			add_location(div11, file$H, 222, 4, 10309);
    			add_location(button, file$H, 262, 8, 12345);
    			attr_dev(div12, "class", "button-container svelte-8akpg7");
    			add_location(div12, file$H, 261, 4, 12304);
    			attr_dev(section, "class", "svelte-8akpg7");
    			add_location(section, file$H, 58, 0, 2077);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t0);
    			append_dev(section, div2);
    			append_dev(div2, div1);
    			append_dev(div1, h30);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div2, t4);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(section, t5);
    			append_dev(section, div5);
    			append_dev(div5, div4);
    			append_dev(div4, h31);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div5, t9);
    			if (if_block2) if_block2.m(div5, null);
    			append_dev(section, t10);
    			append_dev(section, div8);
    			append_dev(div8, div7);
    			append_dev(div7, h32);
    			append_dev(div7, t12);
    			append_dev(div7, div6);
    			append_dev(div8, t14);
    			if (if_block3) if_block3.m(div8, null);
    			append_dev(section, t15);
    			append_dev(section, div11);
    			append_dev(div11, div10);
    			append_dev(div10, h33);
    			append_dev(div10, t17);
    			append_dev(div10, div9);
    			append_dev(div11, t19);
    			if (if_block4) if_block4.m(div11, null);
    			append_dev(section, t20);
    			append_dev(section, div12);
    			append_dev(div12, button);
    			append_dev(section, t22);
    			if (if_block5) if_block5.m(section, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div4, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div7, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div10, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(button, "click", prevent_default(/*handleSearch*/ ctx[4]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*$ui*/ ctx[0].page === 'discover') {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5$3(ctx);
    					if_block0.c();
    					if_block0.m(section, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div1, "selected", /*paneVisbility*/ ctx[1].byOutcomes);
    			}

    			if (/*paneVisbility*/ ctx[1].byOutcomes) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_4$4(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div4, "selected", /*paneVisbility*/ ctx[1].byLocation);
    			}

    			if (/*paneVisbility*/ ctx[1].byLocation) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_3$a(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div5, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div7, "selected", /*paneVisbility*/ ctx[1].byCharacteristics);
    			}

    			if (/*paneVisbility*/ ctx[1].byCharacteristics) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_2$a(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div8, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div10, "selected", /*paneVisbility*/ ctx[1].byStakeholders);
    			}

    			if (/*paneVisbility*/ ctx[1].byStakeholders) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_1$c(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div11, null);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (/*noSearchParams*/ ctx[2] > 0) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block$h(ctx);
    					if_block5.c();
    					if_block5.m(section, null);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { duration: 800, x: -100 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { duration: 200, x: -100 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let noSearchParams;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectSearch', slots, []);

    	const paneVisbility = {
    		byOutcomes: false,
    		byLocation: false,
    		byCharacteristics: false,
    		byStakeholders: false
    	};

    	function togglePane() {
    		Object.keys(paneVisbility).map(key => {
    			if (this.id !== key) {
    				$$invalidate(1, paneVisbility[key] = false, paneVisbility);
    			}
    		});

    		$$invalidate(1, paneVisbility[this.id] = !paneVisbility[this.id], paneVisbility);
    	}

    	function handleSearch() {
    		switch ($ui.page) {
    			case 'discover':
    				set_store_value(ui, $ui.byPage.discover.main = 'list', $ui);
    				set_store_value(ui, $ui.byPage.discover.projectSearch.isMade = true, $ui);
    				break;
    			case 'share':
    				set_store_value(ui, $ui.byPage.share.main = 'list', $ui);
    				set_store_value(ui, $ui.byPage.share.projectSearch.isMade = true, $ui);
    				break;
    		}
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    		console.log($ui.search);
    	}

    	function handleClose() {
    		set_store_value(ui, $ui.byPage.discover.main = 'list', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}

    	function handleClearSearch() {
    		console.log('Clearing the search');
    		set_store_value(ui, $ui.search.project = {}, $ui);

    		for (const key of Object.keys(paneVisbility)) {
    			$$invalidate(1, paneVisbility[key] = false, paneVisbility);
    		}

    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object_1$2.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$e.warn(`<ProjectSearch> was created with unknown prop '${key}'`);
    	});

    	function multiselect0_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.keyValues, value)) {
    			$ui.search.project.keyValues = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.conditions, value)) {
    			$ui.search.project.conditions = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.performanceObjectivesGroup, value)) {
    			$ui.search.project.performanceObjectivesGroup = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect3_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.performanceObjectivesTheme, value)) {
    			$ui.search.project.performanceObjectivesTheme = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.project.catchment, value)) {
    			$ui.search.project.catchment = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.project.subcatchment, value)) {
    			$ui.search.project.subcatchment = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.project.locations, value)) {
    			$ui.search.project.locations = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.project.initiativeType, value)) {
    			$ui.search.project.initiativeType = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectStage, value)) {
    			$ui.search.project.projectStage = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectClass, value)) {
    			$ui.search.project.projectClass = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect3_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectSize, value)) {
    			$ui.search.project.projectSize = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect4_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectScale, value)) {
    			$ui.search.project.projectScale = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding_3(value) {
    		if ($$self.$$.not_equal($ui.search.project.leadOrg, value)) {
    			$ui.search.project.leadOrg = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding_3(value) {
    		if ($$self.$$.not_equal($ui.search.project.leadOrgType, value)) {
    			$ui.search.project.leadOrgType = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding_3(value) {
    		if ($$self.$$.not_equal($ui.search.project.partnerOrg, value)) {
    			$ui.search.project.partnerOrg = value;
    			ui.set($ui);
    		}
    	}

    	$$self.$capture_state = () => ({
    		MultiSelect,
    		slide,
    		fly,
    		ui,
    		database,
    		keyValues,
    		conditions,
    		performanceObjectivesGroup,
    		performanceObjectivesTheme,
    		catchments,
    		subcatchments,
    		locations,
    		leadOrg,
    		leadOrgType,
    		partnerOrg,
    		initiativeType,
    		projectStage,
    		projectClass,
    		projectSize,
    		projectScale,
    		paneVisbility,
    		togglePane,
    		handleSearch,
    		handleClose,
    		handleClearSearch,
    		noSearchParams,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('noSearchParams' in $$props) $$invalidate(2, noSearchParams = $$props.noSearchParams);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$ui*/ 1) {
    			// Keep count of search param number
    			$$invalidate(2, noSearchParams = typeof Object.values($ui.search.project) === 'undefined'
    			? 0
    			: Object.values($ui.search.project).flat().length);
    		}
    	};

    	return [
    		$ui,
    		paneVisbility,
    		noSearchParams,
    		togglePane,
    		handleSearch,
    		handleClose,
    		handleClearSearch,
    		multiselect0_value_binding,
    		multiselect1_value_binding,
    		multiselect2_value_binding,
    		multiselect3_value_binding,
    		multiselect0_value_binding_1,
    		multiselect1_value_binding_1,
    		multiselect2_value_binding_1,
    		multiselect0_value_binding_2,
    		multiselect1_value_binding_2,
    		multiselect2_value_binding_2,
    		multiselect3_value_binding_1,
    		multiselect4_value_binding,
    		multiselect0_value_binding_3,
    		multiselect1_value_binding_3,
    		multiselect2_value_binding_3
    	];
    }

    class ProjectSearch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$I, create_fragment$I, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectSearch",
    			options,
    			id: create_fragment$I.name
    		});
    	}
    }

    /* src/pages/Discover.svelte generated by Svelte v3.46.4 */
    const file$G = "src/pages/Discover.svelte";

    // (31:56) 
    function create_if_block_3$9(ctx) {
    	let projectpage;
    	let current;
    	projectpage = new ProjectPage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectpage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectpage, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectpage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectpage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectpage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$9.name,
    		type: "if",
    		source: "(31:56) ",
    		ctx
    	});

    	return block;
    }

    // (19:4) {#if !$ui.byPage.discover.overlay}
    function create_if_block$g(ctx) {
    	let titleblock;
    	let t0;
    	let infopane;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	infopane = new InfoPane$2({ $$inline: true });
    	const if_block_creators = [create_if_block_1$b, create_if_block_2$9];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.discover.main === 'list') return 0;
    		if (/*$ui*/ ctx[0].byPage.discover.main === 'search') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			create_component(titleblock.$$.fragment);
    			t0 = space();
    			create_component(infopane.$$.fragment);
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(titleblock, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(infopane, target, anchor);
    			insert_dev(target, t1, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(infopane.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(infopane.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(titleblock, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(infopane, detaching);
    			if (detaching) detach_dev(t1);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(19:4) {#if !$ui.byPage.discover.overlay}",
    		ctx
    	});

    	return block;
    }

    // (26:56) 
    function create_if_block_2$9(ctx) {
    	let projectsearch;
    	let current;
    	projectsearch = new ProjectSearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectsearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectsearch, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectsearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectsearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectsearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(26:56) ",
    		ctx
    	});

    	return block;
    }

    // (23:8) {#if $ui.byPage.discover.main === 'list'}
    function create_if_block_1$b(ctx) {
    	let projectlist;
    	let current;
    	projectlist = new ProjectList({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectlist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectlist, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(23:8) {#if $ui.byPage.discover.main === 'list'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$H(ctx) {
    	let section;
    	let current_block_type_index;
    	let if_block;
    	let section_intro;
    	let current;
    	const if_block_creators = [create_if_block$g, create_if_block_3$9];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.discover.overlay) return 0;
    		if (/*$ui*/ ctx[0].byPage.discover.overlay === 'project') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block) if_block.c();
    			attr_dev(section, "id", "discover-page");
    			attr_dev(section, "class", "page");
    			add_location(section, file$G, 16, 0, 713);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fade, { duration: 1500 });
    					section_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Discover', slots, []);
    	const titleData = getPageInfo($ui.page)[0].TitleBlock;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Discover> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		TitleBlock: TitleBlock$2,
    		ProjectList,
    		ProjectPage,
    		InfoPane: InfoPane$2,
    		ProjectSearch,
    		ui,
    		getPageInfo,
    		titleData,
    		$ui
    	});

    	return [$ui, titleData];
    }

    class Discover extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Discover",
    			options,
    			id: create_fragment$H.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/StakeholderListHeader.svelte generated by Svelte v3.46.4 */
    const file$F = "src/components/shared/stakeholders/StakeholderListHeader.svelte";

    // (21:8) {:else}
    function create_else_block$6(ctx) {
    	let h4;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			h4.textContent = "—— Stakeholder network";
    			attr_dev(h4, "class", "svelte-ivz50c");
    			add_location(h4, file$F, 21, 8, 758);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(21:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (19:8) {#if $ui.byPage.connect.stakeholderView === 'cards'}
    function create_if_block$f(ctx) {
    	let h4;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			h4.textContent = "—— Stakeholders menu";
    			attr_dev(h4, "class", "svelte-ivz50c");
    			add_location(h4, file$F, 19, 8, 692);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(19:8) {#if $ui.byPage.connect.stakeholderView === 'cards'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$G(ctx) {
    	let section;
    	let div0;
    	let t0;
    	let div4;
    	let div1;
    	let t2;
    	let div2;
    	let t4;
    	let div3;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.connect.stakeholderView === 'cards') return create_if_block$f;
    		return create_else_block$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			if_block.c();
    			t0 = space();
    			div4 = element("div");
    			div1 = element("div");
    			div1.textContent = "Cards";
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "|";
    			t4 = space();
    			div3 = element("div");
    			div3.textContent = "Network";
    			add_location(div0, file$F, 17, 4, 614);
    			attr_dev(div1, "name", "cards");
    			attr_dev(div1, "class", "icon-container cards selected svelte-ivz50c");
    			attr_dev(div1, "type", "button");
    			add_location(div1, file$F, 26, 8, 881);
    			attr_dev(div2, "class", "icon-divider svelte-ivz50c");
    			add_location(div2, file$F, 30, 8, 1032);
    			attr_dev(div3, "name", "network");
    			attr_dev(div3, "class", "icon-container network svelte-ivz50c");
    			attr_dev(div3, "type", "button");
    			add_location(div3, file$F, 31, 8, 1076);
    			attr_dev(div4, "class", "switch-container svelte-ivz50c");
    			add_location(div4, file$F, 25, 4, 840);
    			attr_dev(section, "class", "svelte-ivz50c");
    			add_location(section, file$F, 16, 0, 528);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			if_block.m(div0, null);
    			append_dev(section, t0);
    			append_dev(section, div4);
    			append_dev(div4, div1);
    			append_dev(div4, t2);
    			append_dev(div4, div2);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div1, "click", /*switchView*/ ctx[1], false, false, false),
    					listen_dev(div3, "click", /*switchView*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: 500, duration: 1500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: 500, duration: 150 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if_block.d();
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderListHeader', slots, []);
    	set_store_value(ui, $ui.byPage.connect.stakeholderView = 'cards', $ui);

    	function switchView() {
    		set_store_value(ui, $ui.byPage.connect.stakeholderView = this.getAttribute('name'), $ui);

    		for (const item of document.getElementsByClassName('icon-container')) {
    			item.classList.remove('selected');
    		}

    		this.classList.add('selected');
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StakeholderListHeader> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, fly, switchView, $ui });
    	return [$ui, switchView];
    }

    class StakeholderListHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$G, create_fragment$G, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderListHeader",
    			options,
    			id: create_fragment$G.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/StakeholderCard.svelte generated by Svelte v3.46.4 */

    const { console: console_1$d } = globals;
    const file$E = "src/components/shared/stakeholders/StakeholderCard.svelte";

    // (37:8) {#if hoverState}
    function create_if_block$e(ctx) {
    	let div1;
    	let p;
    	let raw_value = /*stakeholderData*/ ctx[0].about.shortDescription + "";
    	let t0;
    	let div0;
    	let a;
    	let div1_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			p = element("p");
    			t0 = space();
    			div0 = element("div");
    			a = element("a");
    			a.textContent = "→ Tap to see more";
    			add_location(p, file$E, 38, 12, 1344);
    			add_location(a, file$E, 40, 16, 1459);
    			attr_dev(div0, "class", "stakeholder-link svelte-18wjebp");
    			add_location(div0, file$E, 39, 12, 1410);
    			attr_dev(div1, "class", "desc-container svelte-18wjebp");
    			add_location(div1, file$E, 37, 8, 1285);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, p);
    			p.innerHTML = raw_value;
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, a);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*stakeholderData*/ 1) && raw_value !== (raw_value = /*stakeholderData*/ ctx[0].about.shortDescription + "")) p.innerHTML = raw_value;		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(37:8) {#if hoverState}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$F(ctx) {
    	let li;
    	let div;
    	let img;
    	let img_src_value;
    	let t0;
    	let h3;
    	let raw_value = /*stakeholderData*/ ctx[0].name + "";
    	let t1;
    	let li_intro;
    	let li_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*hoverState*/ ctx[2] && create_if_block$e(ctx);

    	const block = {
    		c: function create() {
    			li = element("li");
    			div = element("div");
    			img = element("img");
    			t0 = space();
    			h3 = element("h3");
    			t1 = space();
    			if (if_block) if_block.c();
    			if (!src_url_equal(img.src, img_src_value = /*stakeholderData*/ ctx[0].imgURL)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "tba");
    			attr_dev(img, "class", "svelte-18wjebp");
    			add_location(img, file$E, 33, 8, 1157);
    			attr_dev(h3, "class", "svelte-18wjebp");
    			add_location(h3, file$E, 34, 8, 1213);
    			attr_dev(div, "id", `card-${/*id*/ ctx[3]}`);
    			attr_dev(div, "class", "card svelte-18wjebp");
    			add_location(div, file$E, 28, 4, 936);
    			attr_dev(li, "class", "svelte-18wjebp");
    			add_location(li, file$E, 27, 0, 808);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div);
    			append_dev(div, img);
    			append_dev(div, t0);
    			append_dev(div, h3);
    			h3.innerHTML = raw_value;
    			append_dev(div, t1);
    			if (if_block) if_block.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div,
    						"click",
    						function () {
    							if (is_function(/*openStakeholder*/ ctx[6](/*stakeholderData*/ ctx[0]))) /*openStakeholder*/ ctx[6](/*stakeholderData*/ ctx[0]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(div, "mouseover", /*showDesc*/ ctx[4], false, false, false),
    					listen_dev(div, "focus", /*showDesc*/ ctx[4], false, false, false),
    					listen_dev(div, "mouseout", /*hideDesc*/ ctx[5], false, false, false),
    					listen_dev(div, "blur", /*hideDesc*/ ctx[5], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (!current || dirty & /*stakeholderData*/ 1 && !src_url_equal(img.src, img_src_value = /*stakeholderData*/ ctx[0].imgURL)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if ((!current || dirty & /*stakeholderData*/ 1) && raw_value !== (raw_value = /*stakeholderData*/ ctx[0].name + "")) h3.innerHTML = raw_value;
    			if (/*hoverState*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*hoverState*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$e(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			add_render_callback(() => {
    				if (li_outro) li_outro.end(1);

    				li_intro = create_in_transition(li, fly, {
    					x: 500,
    					duration: 1000,
    					delay: 500 + 100 * /*index*/ ctx[1]
    				});

    				li_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			if (li_intro) li_intro.invalidate();

    			li_outro = create_out_transition(li, fly, {
    				x: 500,
    				duration: 200,
    				delay: 50 * /*index*/ ctx[1]
    			});

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (if_block) if_block.d();
    			if (detaching && li_outro) li_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(7, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderCard', slots, []);
    	let { stakeholderData } = $$props;
    	let { index } = $$props;
    	const id = stakeholderData._id.toString();

    	// Show and hide descriptions 
    	let hoverState = false;

    	function showDesc() {
    		$$invalidate(2, hoverState = true);
    	}

    	function hideDesc() {
    		$$invalidate(2, hoverState = false);
    	}

    	// Open a stakeholder
    	function openStakeholder() {
    		console.log('Open stakeholder with id: ', id);
    		set_store_value(ui, $ui.state.focus.stakeholderData = stakeholderData, $ui);
    		set_store_value(ui, $ui.byPage.connect.overlay = 'stakeholder', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = ['stakeholderData', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$d.warn(`<StakeholderCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('stakeholderData' in $$props) $$invalidate(0, stakeholderData = $$props.stakeholderData);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		fly,
    		ui,
    		getRandomAbstractImgPath,
    		stakeholderData,
    		index,
    		id,
    		hoverState,
    		showDesc,
    		hideDesc,
    		openStakeholder,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('stakeholderData' in $$props) $$invalidate(0, stakeholderData = $$props.stakeholderData);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    		if ('hoverState' in $$props) $$invalidate(2, hoverState = $$props.hoverState);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [stakeholderData, index, hoverState, id, showDesc, hideDesc, openStakeholder];
    }

    class StakeholderCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$F, create_fragment$F, safe_not_equal, { stakeholderData: 0, index: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderCard",
    			options,
    			id: create_fragment$F.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*stakeholderData*/ ctx[0] === undefined && !('stakeholderData' in props)) {
    			console_1$d.warn("<StakeholderCard> was created without expected prop 'stakeholderData'");
    		}

    		if (/*index*/ ctx[1] === undefined && !('index' in props)) {
    			console_1$d.warn("<StakeholderCard> was created without expected prop 'index'");
    		}
    	}

    	get stakeholderData() {
    		throw new Error("<StakeholderCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set stakeholderData(value) {
    		throw new Error("<StakeholderCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<StakeholderCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<StakeholderCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/stakeholders/StakeholderNetwork.svelte generated by Svelte v3.46.4 */
    const file$D = "src/components/shared/stakeholders/StakeholderNetwork.svelte";

    function create_fragment$E(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*imageURL*/ ctx[0])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "tba");
    			attr_dev(img, "class", "svelte-1t5s1to");
    			add_location(img, file$D, 7, 0, 171);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderNetwork', slots, []);
    	const imageURL = getRandomAbstractImgPath();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StakeholderNetwork> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ getRandomAbstractImgPath, imageURL });
    	return [imageURL];
    }

    class StakeholderNetwork extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$E, create_fragment$E, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderNetwork",
    			options,
    			id: create_fragment$E.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/StakeholderList.svelte generated by Svelte v3.46.4 */
    const file$C = "src/components/shared/stakeholders/StakeholderList.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (33:4) {:else}
    function create_else_block$5(ctx) {
    	let stakeholdernetwork;
    	let current;
    	stakeholdernetwork = new StakeholderNetwork({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(stakeholdernetwork.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stakeholdernetwork, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stakeholdernetwork.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stakeholdernetwork.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stakeholdernetwork, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(33:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (27:4) {#if $ui.byPage.connect.stakeholderView === 'cards'}
    function create_if_block$d(ctx) {
    	let ul;
    	let current;
    	let each_value = /*stakeholders*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(ul, "class", "svelte-3vvcs2");
    			add_location(ul, file$C, 27, 4, 1077);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stakeholders*/ 2) {
    				each_value = /*stakeholders*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(27:4) {#if $ui.byPage.connect.stakeholderView === 'cards'}",
    		ctx
    	});

    	return block;
    }

    // (29:8) {#each stakeholders as stakeholderData, index}
    function create_each_block$7(ctx) {
    	let stakeholdercard;
    	let current;

    	stakeholdercard = new StakeholderCard({
    			props: {
    				stakeholderData: /*stakeholderData*/ ctx[5],
    				index: /*index*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(stakeholdercard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stakeholdercard, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stakeholdercard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stakeholdercard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stakeholdercard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(29:8) {#each stakeholders as stakeholderData, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$D(ctx) {
    	let section;
    	let stakeholderlistheader;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let section_intro;
    	let current;
    	stakeholderlistheader = new StakeholderListHeader({ $$inline: true });
    	const if_block_creators = [create_if_block$d, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.connect.stakeholderView === 'cards') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(stakeholderlistheader.$$.fragment);
    			t = space();
    			if_block.c();
    			attr_dev(section, "class", "svelte-3vvcs2");
    			add_location(section, file$C, 24, 0, 924);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(stakeholderlistheader, section, null);
    			append_dev(section, t);
    			if_blocks[current_block_type_index].m(section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stakeholderlistheader.$$.fragment, local);
    			transition_in(if_block);

    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fly, { x: 500, duration: 1000, delay: 500 });
    					section_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stakeholderlistheader.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(stakeholderlistheader);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const randStakeholderNumber = 6;

    // Random stakeholder selection
    function getRandomInt$1(min, max) {
    	min = Math.ceil(min);
    	max = Math.floor(max);
    	return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let $database;
    	let $ui;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(2, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderList', slots, []);
    	const shuffleArray = array => array.sort(() => Math.random() - 0.5);
    	const orgDatabase = $database.organisations;
    	const stakeholders = shuffleArray(orgDatabase.slice(0, randStakeholderNumber));
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StakeholderList> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		fly,
    		StakeholderListHeader,
    		StakeholderCard,
    		StakeholderNetwork,
    		ui,
    		database,
    		getRandomInt: getRandomInt$1,
    		shuffleArray,
    		orgDatabase,
    		randStakeholderNumber,
    		stakeholders,
    		$database,
    		$ui
    	});

    	return [$ui, stakeholders];
    }

    class StakeholderList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderList",
    			options,
    			id: create_fragment$D.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/TitleBlock.svelte generated by Svelte v3.46.4 */
    const file$B = "src/components/shared/stakeholders/stakeholderPage/TitleBlock.svelte";

    function create_fragment$C(ctx) {
    	let section;
    	let div;
    	let t0;
    	let span;
    	let t2;
    	let h1;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			t0 = text$1("——— ");
    			span = element("span");
    			span.textContent = "waterways stakeholder";
    			t2 = space();
    			h1 = element("h1");
    			attr_dev(span, "class", "svelte-1uaaku0");
    			add_location(span, file$B, 12, 50, 345);
    			attr_dev(div, "class", "subtitle svelte-1uaaku0");
    			add_location(div, file$B, 12, 4, 299);
    			attr_dev(h1, "class", "svelte-1uaaku0");
    			add_location(h1, file$B, 13, 4, 390);
    			attr_dev(section, "class", "svelte-1uaaku0");
    			add_location(section, file$B, 11, 0, 285);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, t0);
    			append_dev(div, span);
    			append_dev(section, t2);
    			append_dev(section, h1);
    			h1.innerHTML = /*stakeholderName*/ ctx[0];
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*stakeholderName*/ 1) h1.innerHTML = /*stakeholderName*/ ctx[0];		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let stakeholderName;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TitleBlock', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TitleBlock> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, fade, stakeholderName, $ui });

    	$$self.$inject_state = $$props => {
    		if ('stakeholderName' in $$props) $$invalidate(0, stakeholderName = $$props.stakeholderName);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			// Reactive variables
    			$$invalidate(0, stakeholderName = $ui.state.focus.stakeholderData.name);
    		}
    	};

    	return [stakeholderName, $ui];
    }

    class TitleBlock extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$C, create_fragment$C, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TitleBlock",
    			options,
    			id: create_fragment$C.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/Infopane.svelte generated by Svelte v3.46.4 */
    const file$A = "src/components/shared/stakeholders/stakeholderPage/Infopane.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (29:8) {#if stakeholderData.meta.subtype1}
    function create_if_block$c(ctx) {
    	let div2;
    	let div0;
    	let t1;
    	let div1;
    	let html_tag;
    	let raw_value = /*stakeholderData*/ ctx[1].meta.subtype1 + "";
    	let t2;
    	let if_block = /*stakeholderData*/ ctx[1].meta.subtype2 && create_if_block_1$a(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "Type:";
    			t1 = space();
    			div1 = element("div");
    			html_tag = new HtmlTag();
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "info-label svelte-13c3fwn");
    			add_location(div0, file$A, 30, 12, 1081);
    			html_tag.a = t2;
    			attr_dev(div1, "class", "info-content svelte-13c3fwn");
    			add_location(div1, file$A, 31, 12, 1130);
    			attr_dev(div2, "class", "info-row svelte-13c3fwn");
    			add_location(div2, file$A, 29, 8, 1046);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			html_tag.m(raw_value, div1);
    			append_dev(div1, t2);
    			if (if_block) if_block.m(div1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stakeholderData*/ 2 && raw_value !== (raw_value = /*stakeholderData*/ ctx[1].meta.subtype1 + "")) html_tag.p(raw_value);

    			if (/*stakeholderData*/ ctx[1].meta.subtype2) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$a(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(29:8) {#if stakeholderData.meta.subtype1}",
    		ctx
    	});

    	return block;
    }

    // (34:16) {#if stakeholderData.meta.subtype2}
    function create_if_block_1$a(ctx) {
    	let t0;
    	let html_tag;
    	let raw_value = /*stakeholderData*/ ctx[1].meta.subtype2 + "";
    	let t1;

    	const block = {
    		c: function create() {
    			t0 = text$1("(");
    			html_tag = new HtmlTag();
    			t1 = text$1(")");
    			html_tag.a = t1;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*stakeholderData*/ 2 && raw_value !== (raw_value = /*stakeholderData*/ ctx[1].meta.subtype2 + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) html_tag.d();
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(34:16) {#if stakeholderData.meta.subtype2}",
    		ctx
    	});

    	return block;
    }

    // (51:16) {#each leadCatchments as catchment, index}
    function create_each_block$6(ctx) {
    	let span;

    	let t0_value = (/*leadCatchments*/ ctx[2].length === 1 || /*index*/ ctx[7] === /*leadCatchments*/ ctx[2].length - 2
    	? /*catchment*/ ctx[5]
    	: /*index*/ ctx[7] === /*leadCatchments*/ ctx[2].length - 1
    		? ` and ${/*catchment*/ ctx[5]}`
    		: `${/*catchment*/ ctx[5]}, `) + "";

    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text$1(t0_value);
    			t1 = space();
    			add_location(span, file$A, 51, 16, 1855);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*leadCatchments*/ 4 && t0_value !== (t0_value = (/*leadCatchments*/ ctx[2].length === 1 || /*index*/ ctx[7] === /*leadCatchments*/ ctx[2].length - 2
    			? /*catchment*/ ctx[5]
    			: /*index*/ ctx[7] === /*leadCatchments*/ ctx[2].length - 1
    				? ` and ${/*catchment*/ ctx[5]}`
    				: `${/*catchment*/ ctx[5]}, `) + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(51:16) {#each leadCatchments as catchment, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let section;
    	let div0;
    	let h3;
    	let t1;
    	let div22;
    	let h40;
    	let t3;
    	let div3;
    	let div1;
    	let t5;
    	let div2;
    	let raw0_value = /*stakeholderData*/ ctx[1].meta.type + "";
    	let t6;
    	let t7;
    	let h41;
    	let t9;
    	let div6;
    	let div4;
    	let t11;
    	let div5;
    	let raw1_value = /*leadProjects*/ ctx[0].length + "";
    	let t12;
    	let div9;
    	let div7;
    	let t14;
    	let div8;
    	let t15;
    	let h42;
    	let t17;
    	let div12;
    	let div10;
    	let t19;
    	let div11;
    	let html_tag;
    	let raw2_value = /*stakeholderData*/ ctx[1].contact.address + "";
    	let br0;
    	let t20;
    	let html_tag_1;
    	let raw3_value = /*stakeholderData*/ ctx[1].contact.city + "";
    	let t21;
    	let html_tag_2;
    	let raw4_value = /*stakeholderData*/ ctx[1].contact.postcode + "";
    	let br1;
    	let t22;
    	let html_tag_3;
    	let raw5_value = /*stakeholderData*/ ctx[1].contact.state + "";
    	let t23;
    	let div15;
    	let div13;
    	let t25;
    	let div14;
    	let html_tag_4;
    	let raw6_value = /*stakeholderData*/ ctx[1].contact.name.first + "";
    	let t26;
    	let html_tag_5;
    	let raw7_value = /*stakeholderData*/ ctx[1].contact.name.last + "";
    	let t27;
    	let div18;
    	let div16;
    	let t29;
    	let div17;
    	let a0;
    	let raw8_value = /*stakeholderData*/ ctx[1].contact.email + "";
    	let a0_href_value;
    	let t30;
    	let div21;
    	let div19;
    	let t32;
    	let div20;
    	let a1;
    	let t33;
    	let html_tag_6;
    	let raw9_value = /*stakeholderData*/ ctx[1].contact.website + "";
    	let a1_href_value;
    	let if_block = /*stakeholderData*/ ctx[1].meta.subtype1 && create_if_block$c(ctx);
    	let each_value = /*leadCatchments*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h3 = element("h3");
    			h3.textContent = "key info";
    			t1 = space();
    			div22 = element("div");
    			h40 = element("h4");
    			h40.textContent = "—— Organisation type";
    			t3 = space();
    			div3 = element("div");
    			div1 = element("div");
    			div1.textContent = "Category:";
    			t5 = space();
    			div2 = element("div");
    			t6 = space();
    			if (if_block) if_block.c();
    			t7 = space();
    			h41 = element("h4");
    			h41.textContent = "—— Waterways projects";
    			t9 = space();
    			div6 = element("div");
    			div4 = element("div");
    			div4.textContent = "No. projects:";
    			t11 = space();
    			div5 = element("div");
    			t12 = space();
    			div9 = element("div");
    			div7 = element("div");
    			div7.textContent = "Catchments:";
    			t14 = space();
    			div8 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t15 = space();
    			h42 = element("h4");
    			h42.textContent = "—— Contact details";
    			t17 = space();
    			div12 = element("div");
    			div10 = element("div");
    			div10.textContent = "Address:";
    			t19 = space();
    			div11 = element("div");
    			html_tag = new HtmlTag();
    			br0 = element("br");
    			t20 = space();
    			html_tag_1 = new HtmlTag();
    			t21 = text$1(", ");
    			html_tag_2 = new HtmlTag();
    			br1 = element("br");
    			t22 = space();
    			html_tag_3 = new HtmlTag();
    			t23 = space();
    			div15 = element("div");
    			div13 = element("div");
    			div13.textContent = "Contact:";
    			t25 = space();
    			div14 = element("div");
    			html_tag_4 = new HtmlTag();
    			t26 = space();
    			html_tag_5 = new HtmlTag();
    			t27 = space();
    			div18 = element("div");
    			div16 = element("div");
    			div16.textContent = "Email:";
    			t29 = space();
    			div17 = element("div");
    			a0 = element("a");
    			t30 = space();
    			div21 = element("div");
    			div19 = element("div");
    			div19.textContent = "Website:";
    			t32 = space();
    			div20 = element("div");
    			a1 = element("a");
    			t33 = text$1("www.");
    			html_tag_6 = new HtmlTag();
    			attr_dev(h3, "class", "svelte-13c3fwn");
    			add_location(h3, file$A, 18, 8, 668);
    			attr_dev(div0, "class", "info-pane-header svelte-13c3fwn");
    			add_location(div0, file$A, 17, 4, 627);
    			attr_dev(h40, "class", "svelte-13c3fwn");
    			add_location(h40, file$A, 21, 8, 743);
    			attr_dev(div1, "class", "info-label svelte-13c3fwn");
    			add_location(div1, file$A, 23, 12, 829);
    			attr_dev(div2, "class", "info-content svelte-13c3fwn");
    			add_location(div2, file$A, 24, 12, 882);
    			attr_dev(div3, "class", "info-row svelte-13c3fwn");
    			add_location(div3, file$A, 22, 8, 794);
    			attr_dev(h41, "class", "svelte-13c3fwn");
    			add_location(h41, file$A, 40, 8, 1404);
    			attr_dev(div4, "class", "info-label svelte-13c3fwn");
    			add_location(div4, file$A, 42, 12, 1491);
    			attr_dev(div5, "class", "info-content svelte-13c3fwn");
    			add_location(div5, file$A, 43, 12, 1548);
    			attr_dev(div6, "class", "info-row svelte-13c3fwn");
    			add_location(div6, file$A, 41, 8, 1456);
    			attr_dev(div7, "class", "info-label svelte-13c3fwn");
    			add_location(div7, file$A, 48, 12, 1697);
    			attr_dev(div8, "class", "info-content svelte-13c3fwn");
    			add_location(div8, file$A, 49, 12, 1752);
    			attr_dev(div9, "class", "info-row svelte-13c3fwn");
    			add_location(div9, file$A, 47, 8, 1662);
    			attr_dev(h42, "class", "svelte-13c3fwn");
    			add_location(h42, file$A, 56, 8, 2097);
    			attr_dev(div10, "class", "info-label svelte-13c3fwn");
    			add_location(div10, file$A, 58, 12, 2181);
    			html_tag.a = br0;
    			add_location(br0, file$A, 60, 55, 2316);
    			html_tag_1.a = t21;
    			html_tag_2.a = br1;
    			add_location(br1, file$A, 61, 94, 2415);
    			html_tag_3.a = null;
    			attr_dev(div11, "class", "info-content svelte-13c3fwn");
    			add_location(div11, file$A, 59, 12, 2233);
    			attr_dev(div12, "class", "info-row svelte-13c3fwn");
    			add_location(div12, file$A, 57, 8, 2146);
    			attr_dev(div13, "class", "info-label svelte-13c3fwn");
    			add_location(div13, file$A, 66, 12, 2551);
    			html_tag_4.a = t26;
    			html_tag_5.a = null;
    			attr_dev(div14, "class", "info-content svelte-13c3fwn");
    			add_location(div14, file$A, 67, 12, 2603);
    			attr_dev(div15, "class", "info-row svelte-13c3fwn");
    			add_location(div15, file$A, 65, 8, 2516);
    			attr_dev(div16, "class", "info-label svelte-13c3fwn");
    			add_location(div16, file$A, 72, 12, 2809);
    			attr_dev(a0, "href", a0_href_value = "mailto:" + /*stakeholderData*/ ctx[1].contact.email);
    			add_location(a0, file$A, 74, 16, 2903);
    			attr_dev(div17, "class", "info-content svelte-13c3fwn");
    			add_location(div17, file$A, 73, 12, 2859);
    			attr_dev(div18, "class", "info-row svelte-13c3fwn");
    			add_location(div18, file$A, 71, 8, 2774);
    			attr_dev(div19, "class", "info-label svelte-13c3fwn");
    			add_location(div19, file$A, 78, 12, 3072);
    			html_tag_6.a = null;
    			attr_dev(a1, "href", a1_href_value = 'http://www.' + /*stakeholderData*/ ctx[1].contact.website);
    			attr_dev(a1, "target", "_blank");
    			add_location(a1, file$A, 80, 16, 3168);
    			attr_dev(div20, "class", "info-content svelte-13c3fwn");
    			add_location(div20, file$A, 79, 12, 3124);
    			attr_dev(div21, "class", "info-row svelte-13c3fwn");
    			add_location(div21, file$A, 77, 8, 3037);
    			attr_dev(div22, "class", "info-pane-content svelte-13c3fwn");
    			add_location(div22, file$A, 20, 4, 701);
    			attr_dev(section, "class", "svelte-13c3fwn");
    			add_location(section, file$A, 16, 0, 613);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h3);
    			append_dev(section, t1);
    			append_dev(section, div22);
    			append_dev(div22, h40);
    			append_dev(div22, t3);
    			append_dev(div22, div3);
    			append_dev(div3, div1);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			div2.innerHTML = raw0_value;
    			append_dev(div22, t6);
    			if (if_block) if_block.m(div22, null);
    			append_dev(div22, t7);
    			append_dev(div22, h41);
    			append_dev(div22, t9);
    			append_dev(div22, div6);
    			append_dev(div6, div4);
    			append_dev(div6, t11);
    			append_dev(div6, div5);
    			div5.innerHTML = raw1_value;
    			append_dev(div22, t12);
    			append_dev(div22, div9);
    			append_dev(div9, div7);
    			append_dev(div9, t14);
    			append_dev(div9, div8);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div8, null);
    			}

    			append_dev(div22, t15);
    			append_dev(div22, h42);
    			append_dev(div22, t17);
    			append_dev(div22, div12);
    			append_dev(div12, div10);
    			append_dev(div12, t19);
    			append_dev(div12, div11);
    			html_tag.m(raw2_value, div11);
    			append_dev(div11, br0);
    			append_dev(div11, t20);
    			html_tag_1.m(raw3_value, div11);
    			append_dev(div11, t21);
    			html_tag_2.m(raw4_value, div11);
    			append_dev(div11, br1);
    			append_dev(div11, t22);
    			html_tag_3.m(raw5_value, div11);
    			append_dev(div22, t23);
    			append_dev(div22, div15);
    			append_dev(div15, div13);
    			append_dev(div15, t25);
    			append_dev(div15, div14);
    			html_tag_4.m(raw6_value, div14);
    			append_dev(div14, t26);
    			html_tag_5.m(raw7_value, div14);
    			append_dev(div22, t27);
    			append_dev(div22, div18);
    			append_dev(div18, div16);
    			append_dev(div18, t29);
    			append_dev(div18, div17);
    			append_dev(div17, a0);
    			a0.innerHTML = raw8_value;
    			append_dev(div22, t30);
    			append_dev(div22, div21);
    			append_dev(div21, div19);
    			append_dev(div21, t32);
    			append_dev(div21, div20);
    			append_dev(div20, a1);
    			append_dev(a1, t33);
    			html_tag_6.m(raw9_value, a1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*stakeholderData*/ 2 && raw0_value !== (raw0_value = /*stakeholderData*/ ctx[1].meta.type + "")) div2.innerHTML = raw0_value;
    			if (/*stakeholderData*/ ctx[1].meta.subtype1) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					if_block.m(div22, t7);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*leadProjects*/ 1 && raw1_value !== (raw1_value = /*leadProjects*/ ctx[0].length + "")) div5.innerHTML = raw1_value;
    			if (dirty & /*leadCatchments*/ 4) {
    				each_value = /*leadCatchments*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div8, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*stakeholderData*/ 2 && raw2_value !== (raw2_value = /*stakeholderData*/ ctx[1].contact.address + "")) html_tag.p(raw2_value);
    			if (dirty & /*stakeholderData*/ 2 && raw3_value !== (raw3_value = /*stakeholderData*/ ctx[1].contact.city + "")) html_tag_1.p(raw3_value);
    			if (dirty & /*stakeholderData*/ 2 && raw4_value !== (raw4_value = /*stakeholderData*/ ctx[1].contact.postcode + "")) html_tag_2.p(raw4_value);
    			if (dirty & /*stakeholderData*/ 2 && raw5_value !== (raw5_value = /*stakeholderData*/ ctx[1].contact.state + "")) html_tag_3.p(raw5_value);
    			if (dirty & /*stakeholderData*/ 2 && raw6_value !== (raw6_value = /*stakeholderData*/ ctx[1].contact.name.first + "")) html_tag_4.p(raw6_value);
    			if (dirty & /*stakeholderData*/ 2 && raw7_value !== (raw7_value = /*stakeholderData*/ ctx[1].contact.name.last + "")) html_tag_5.p(raw7_value);
    			if (dirty & /*stakeholderData*/ 2 && raw8_value !== (raw8_value = /*stakeholderData*/ ctx[1].contact.email + "")) a0.innerHTML = raw8_value;
    			if (dirty & /*stakeholderData*/ 2 && a0_href_value !== (a0_href_value = "mailto:" + /*stakeholderData*/ ctx[1].contact.email)) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (dirty & /*stakeholderData*/ 2 && raw9_value !== (raw9_value = /*stakeholderData*/ ctx[1].contact.website + "")) html_tag_6.p(raw9_value);

    			if (dirty & /*stakeholderData*/ 2 && a1_href_value !== (a1_href_value = 'http://www.' + /*stakeholderData*/ ctx[1].contact.website)) {
    				attr_dev(a1, "href", a1_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let stakeholderData;
    	let leadProjects;
    	let leadCatchments;
    	let $database;
    	let $ui;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(3, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(4, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Infopane', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Infopane> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		ui,
    		database,
    		capitaliseFirst,
    		leadProjects,
    		leadCatchments,
    		stakeholderData,
    		$database,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('leadProjects' in $$props) $$invalidate(0, leadProjects = $$props.leadProjects);
    		if ('leadCatchments' in $$props) $$invalidate(2, leadCatchments = $$props.leadCatchments);
    		if ('stakeholderData' in $$props) $$invalidate(1, stakeholderData = $$props.stakeholderData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 16) {
    			// Reactive variables
    			$$invalidate(1, stakeholderData = $ui.state.focus.stakeholderData);
    		}

    		if ($$self.$$.dirty & /*$database, stakeholderData*/ 10) {
    			$$invalidate(0, leadProjects = $database.projects.filter(d => d.stakeholders.lead.org === stakeholderData.name));
    		}

    		if ($$self.$$.dirty & /*leadProjects*/ 1) {
    			$$invalidate(2, leadCatchments = [...new Set(leadProjects.map(d => d.location.catchments).flat())]);
    		}
    	};

    	return [leadProjects, stakeholderData, leadCatchments, $database, $ui];
    }

    class Infopane extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$B, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Infopane",
    			options,
    			id: create_fragment$B.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/UserAction.svelte generated by Svelte v3.46.4 */
    const file$z = "src/components/shared/stakeholders/stakeholderPage/UserAction.svelte";

    function create_fragment$A(ctx) {
    	let section;
    	let span0;
    	let staroutline;
    	let t;
    	let span1;
    	let heartoutline;
    	let current;
    	staroutline = new StarOutline({ $$inline: true });
    	heartoutline = new HeartOutline({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			span0 = element("span");
    			create_component(staroutline.$$.fragment);
    			t = space();
    			span1 = element("span");
    			create_component(heartoutline.$$.fragment);
    			attr_dev(span0, "class", "favourite svelte-cnephw");
    			add_location(span0, file$z, 15, 4, 524);
    			attr_dev(span1, "class", "like svelte-cnephw");
    			add_location(span1, file$z, 18, 4, 651);
    			attr_dev(section, "class", "actions-pane svelte-cnephw");
    			add_location(section, file$z, 14, 0, 487);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, span0);
    			mount_component(staroutline, span0, null);
    			append_dev(section, t);
    			append_dev(section, span1);
    			mount_component(heartoutline, span1, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(staroutline.$$.fragment, local);
    			transition_in(heartoutline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(staroutline.$$.fragment, local);
    			transition_out(heartoutline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(staroutline);
    			destroy_component(heartoutline);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let stakeholderData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserAction', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserAction> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ui,
    		StarOutline,
    		Star,
    		Heart,
    		HeartOutline,
    		stakeholderData,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('stakeholderData' in $$props) stakeholderData = $$props.stakeholderData;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 1) {
    			stakeholderData = $ui.state.focus.stakeholderData;
    		}
    	};

    	return [$ui];
    }

    class UserAction extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserAction",
    			options,
    			id: create_fragment$A.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/Sources.svelte generated by Svelte v3.46.4 */
    const file$y = "src/components/shared/stakeholders/stakeholderPage/Sources.svelte";

    function create_fragment$z(ctx) {
    	let section;
    	let div0;
    	let h40;
    	let t1;
    	let div1;
    	let p0;
    	let t3;
    	let ul;
    	let li0;
    	let a0;
    	let t5;
    	let li1;
    	let a1;
    	let t7;
    	let li2;
    	let a2;
    	let t9;
    	let div2;
    	let h41;
    	let t11;
    	let div3;
    	let p1;
    	let section_transition;
    	let current;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h40 = element("h4");
    			h40.textContent = "—— Links";
    			t1 = space();
    			div1 = element("div");
    			p0 = element("p");
    			p0.textContent = "More details about this project are availbable at tho following links";
    			t3 = space();
    			ul = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Data source link #1";
    			t5 = space();
    			li1 = element("li");
    			a1 = element("a");
    			a1.textContent = "Data source link #2";
    			t7 = space();
    			li2 = element("li");
    			a2 = element("a");
    			a2.textContent = "Data source link #3";
    			t9 = space();
    			div2 = element("div");
    			h41 = element("h4");
    			h41.textContent = "—— Contacts";
    			t11 = space();
    			div3 = element("div");
    			p1 = element("p");
    			p1.textContent = "Project contacts from lead org tba";
    			attr_dev(h40, "class", "svelte-oevqt9");
    			add_location(h40, file$y, 14, 8, 332);
    			attr_dev(div0, "class", "");
    			add_location(div0, file$y, 13, 4, 307);
    			attr_dev(p0, "class", "svelte-oevqt9");
    			add_location(p0, file$y, 17, 8, 402);
    			add_location(a0, file$y, 19, 16, 508);
    			add_location(li0, file$y, 19, 12, 504);
    			add_location(a1, file$y, 20, 16, 556);
    			add_location(li1, file$y, 20, 12, 552);
    			add_location(a2, file$y, 21, 16, 604);
    			add_location(li2, file$y, 21, 12, 600);
    			attr_dev(ul, "class", "svelte-oevqt9");
    			add_location(ul, file$y, 18, 8, 487);
    			attr_dev(div1, "class", "");
    			add_location(div1, file$y, 16, 4, 377);
    			attr_dev(h41, "class", "svelte-oevqt9");
    			add_location(h41, file$y, 26, 8, 680);
    			add_location(div2, file$y, 25, 4, 666);
    			attr_dev(p1, "class", "svelte-oevqt9");
    			add_location(p1, file$y, 29, 8, 753);
    			attr_dev(div3, "class", "");
    			add_location(div3, file$y, 28, 4, 728);
    			attr_dev(section, "class", "svelte-oevqt9");
    			add_location(section, file$y, 12, 0, 276);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h40);
    			append_dev(section, t1);
    			append_dev(section, div1);
    			append_dev(div1, p0);
    			append_dev(div1, t3);
    			append_dev(div1, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a0);
    			append_dev(ul, t5);
    			append_dev(ul, li1);
    			append_dev(li1, a1);
    			append_dev(ul, t7);
    			append_dev(ul, li2);
    			append_dev(li2, a2);
    			append_dev(section, t9);
    			append_dev(section, div2);
    			append_dev(div2, h41);
    			append_dev(section, t11);
    			append_dev(section, div3);
    			append_dev(div3, p1);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, true);
    				section_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, false);
    			section_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching && section_transition) section_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Sources', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Sources> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ slide, ui, projectData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) projectData = $$props.projectData;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 1) {
    			// Reactive variables
    			projectData = $ui.state.focus.projectData;
    		}
    	};

    	return [$ui];
    }

    class Sources extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Sources",
    			options,
    			id: create_fragment$z.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/StakeholderContent.svelte generated by Svelte v3.46.4 */

    const { console: console_1$c } = globals;
    const file$x = "src/components/shared/stakeholders/stakeholderPage/StakeholderContent.svelte";

    // (53:4) {#if visibility.aboutDetails }
    function create_if_block_1$9(ctx) {
    	let div;
    	let h3;
    	let t1;
    	let html_tag;
    	let raw_value = /*stakeholderData*/ ctx[1].about.longDescription + "";
    	let div_transition;
    	let current;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h3 = element("h3");
    			h3.textContent = "—— About";
    			t1 = space();
    			html_tag = new HtmlTag();
    			add_location(h3, file$x, 54, 12, 2023);
    			html_tag.a = null;
    			add_location(div, file$x, 53, 8, 1988);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h3);
    			append_dev(div, t1);
    			html_tag.m(raw_value, div);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*stakeholderData*/ 2) && raw_value !== (raw_value = /*stakeholderData*/ ctx[1].about.longDescription + "")) html_tag.p(raw_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(53:4) {#if visibility.aboutDetails }",
    		ctx
    	});

    	return block;
    }

    // (74:4) {#if visibility.hwsDetails }
    function create_if_block$b(ctx) {
    	let hws_boxes;
    	let current;

    	hws_boxes = new HWS_boxes({
    			props: { data: /*conditionsData*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(hws_boxes.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(hws_boxes, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const hws_boxes_changes = {};
    			if (dirty & /*conditionsData*/ 4) hws_boxes_changes.data = /*conditionsData*/ ctx[2];
    			hws_boxes.$set(hws_boxes_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(hws_boxes.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(hws_boxes.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(hws_boxes, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(74:4) {#if visibility.hwsDetails }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$y(ctx) {
    	let section;
    	let div0;
    	let raw0_value = /*stakeholderData*/ ctx[1].about.shortDescription + "";
    	let t0;
    	let t1;
    	let div4;
    	let div3;
    	let div1;
    	let t2;
    	let div2;
    	let div4_transition;
    	let t4;
    	let hr0;
    	let t5;
    	let h3;
    	let t7;
    	let p;
    	let t8_value = /*stakeholderData*/ ctx[1].name + "";
    	let t8;
    	let t9;
    	let t10;
    	let hws_tags;
    	let t11;
    	let hws_boxes;
    	let t12;
    	let t13;
    	let div8;
    	let div7;
    	let div5;
    	let t14;
    	let div6;
    	let div8_transition;
    	let t16;
    	let hr1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*visibility*/ ctx[0].aboutDetails && create_if_block_1$9(ctx);

    	hws_tags = new HWS_tags({
    			props: { data: /*themesData*/ ctx[4] },
    			$$inline: true
    		});

    	hws_boxes = new HWS_boxes({
    			props: { data: /*keyValuesData*/ ctx[3] },
    			$$inline: true
    		});

    	let if_block1 = /*visibility*/ ctx[0].hwsDetails && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			t2 = space();
    			div2 = element("div");
    			div2.textContent = "↓";
    			t4 = space();
    			hr0 = element("hr");
    			t5 = space();
    			h3 = element("h3");
    			h3.textContent = "——— Impact on waterways";
    			t7 = space();
    			p = element("p");
    			t8 = text$1(t8_value);
    			t9 = text$1(" is involved with projects that impact our waterways in the following ways:");
    			t10 = space();
    			create_component(hws_tags.$$.fragment);
    			t11 = space();
    			create_component(hws_boxes.$$.fragment);
    			t12 = space();
    			if (if_block1) if_block1.c();
    			t13 = space();
    			div8 = element("div");
    			div7 = element("div");
    			div5 = element("div");
    			t14 = space();
    			div6 = element("div");
    			div6.textContent = "↓";
    			t16 = space();
    			hr1 = element("hr");
    			attr_dev(div0, "class", "short-desc svelte-xxu4ed");
    			add_location(div0, file$x, 49, 4, 1850);
    			attr_dev(div1, "class", "toggle-label svelte-xxu4ed");
    			add_location(div1, file$x, 61, 12, 2352);
    			attr_dev(div2, "class", "toggle-icon down svelte-xxu4ed");
    			add_location(div2, file$x, 62, 12, 2415);
    			attr_dev(div3, "id", "aboutDetails");
    			attr_dev(div3, "class", "collapse__header svelte-xxu4ed");
    			attr_dev(div3, "type", "button");
    			toggle_class(div3, "selected", /*visibility*/ ctx[0].aboutDetails);
    			add_location(div3, file$x, 59, 8, 2197);
    			attr_dev(div4, "class", "collapse__body svelte-xxu4ed");
    			add_location(div4, file$x, 58, 4, 2140);
    			add_location(hr0, file$x, 66, 4, 2490);
    			add_location(h3, file$x, 68, 4, 2530);
    			add_location(p, file$x, 69, 4, 2585);
    			attr_dev(div5, "class", "toggle-label svelte-xxu4ed");
    			add_location(div5, file$x, 79, 12, 3065);
    			attr_dev(div6, "class", "toggle-icon down svelte-xxu4ed");
    			add_location(div6, file$x, 80, 12, 3126);
    			attr_dev(div7, "id", "hwsDetails");
    			attr_dev(div7, "class", "collapse__header svelte-xxu4ed");
    			attr_dev(div7, "type", "button");
    			toggle_class(div7, "selected", /*visibility*/ ctx[0].hwsDetails);
    			add_location(div7, file$x, 77, 8, 2914);
    			attr_dev(div8, "class", "collapse__body svelte-xxu4ed");
    			add_location(div8, file$x, 76, 4, 2857);
    			add_location(hr1, file$x, 83, 4, 3200);
    			attr_dev(section, "class", "content-pane svelte-xxu4ed");
    			add_location(section, file$x, 47, 0, 1782);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(section, t0);
    			if (if_block0) if_block0.m(section, null);
    			append_dev(section, t1);
    			append_dev(section, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			div1.innerHTML = /*aboutLabel*/ ctx[6];
    			append_dev(div3, t2);
    			append_dev(div3, div2);
    			append_dev(section, t4);
    			append_dev(section, hr0);
    			append_dev(section, t5);
    			append_dev(section, h3);
    			append_dev(section, t7);
    			append_dev(section, p);
    			append_dev(p, t8);
    			append_dev(p, t9);
    			append_dev(section, t10);
    			mount_component(hws_tags, section, null);
    			append_dev(section, t11);
    			mount_component(hws_boxes, section, null);
    			append_dev(section, t12);
    			if (if_block1) if_block1.m(section, null);
    			append_dev(section, t13);
    			append_dev(section, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div5);
    			div5.innerHTML = /*hwsLabel*/ ctx[5];
    			append_dev(div7, t14);
    			append_dev(div7, div6);
    			append_dev(section, t16);
    			append_dev(section, hr1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div3, "click", /*togglePane*/ ctx[7], false, false, false),
    					listen_dev(div7, "click", /*togglePane*/ ctx[7], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*stakeholderData*/ 2) && raw0_value !== (raw0_value = /*stakeholderData*/ ctx[1].about.shortDescription + "")) div0.innerHTML = raw0_value;
    			if (/*visibility*/ ctx[0].aboutDetails) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*visibility*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$9(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(section, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*aboutLabel*/ 64) div1.innerHTML = /*aboutLabel*/ ctx[6];
    			if (dirty & /*visibility*/ 1) {
    				toggle_class(div3, "selected", /*visibility*/ ctx[0].aboutDetails);
    			}

    			if ((!current || dirty & /*stakeholderData*/ 2) && t8_value !== (t8_value = /*stakeholderData*/ ctx[1].name + "")) set_data_dev(t8, t8_value);
    			const hws_tags_changes = {};
    			if (dirty & /*themesData*/ 16) hws_tags_changes.data = /*themesData*/ ctx[4];
    			hws_tags.$set(hws_tags_changes);
    			const hws_boxes_changes = {};
    			if (dirty & /*keyValuesData*/ 8) hws_boxes_changes.data = /*keyValuesData*/ ctx[3];
    			hws_boxes.$set(hws_boxes_changes);

    			if (/*visibility*/ ctx[0].hwsDetails) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*visibility*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block$b(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(section, t13);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*hwsLabel*/ 32) div5.innerHTML = /*hwsLabel*/ ctx[5];
    			if (dirty & /*visibility*/ 1) {
    				toggle_class(div7, "selected", /*visibility*/ ctx[0].hwsDetails);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);

    			add_render_callback(() => {
    				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, true);
    				div4_transition.run(1);
    			});

    			transition_in(hws_tags.$$.fragment, local);
    			transition_in(hws_boxes.$$.fragment, local);
    			transition_in(if_block1);

    			add_render_callback(() => {
    				if (!div8_transition) div8_transition = create_bidirectional_transition(div8, slide, {}, true);
    				div8_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, false);
    			div4_transition.run(0);
    			transition_out(hws_tags.$$.fragment, local);
    			transition_out(hws_boxes.$$.fragment, local);
    			transition_out(if_block1);
    			if (!div8_transition) div8_transition = create_bidirectional_transition(div8, slide, {}, false);
    			div8_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (detaching && div4_transition) div4_transition.end();
    			destroy_component(hws_tags);
    			destroy_component(hws_boxes);
    			if (if_block1) if_block1.d();
    			if (detaching && div8_transition) div8_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let aboutLabel;
    	let hwsLabel;
    	let stakeholderData;
    	let leadProjects;
    	let leadCatchments;
    	let themesData;
    	let keyValuesData;
    	let conditionsData;
    	let $database;
    	let $ui;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(9, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(10, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderContent', slots, []);
    	const visibility = { hwsDetails: false, aboutDetails: false };

    	function togglePane() {
    		$$invalidate(0, visibility[this.id] = !visibility[this.id], visibility);
    		console.log(`Toggling ${this.id}  to `, visibility[this.id]);
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$c.warn(`<StakeholderContent> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ui,
    		database,
    		slide,
    		HWS_tags,
    		HWS_boxes,
    		Sources,
    		visibility,
    		togglePane,
    		leadProjects,
    		conditionsData,
    		keyValuesData,
    		themesData,
    		leadCatchments,
    		stakeholderData,
    		hwsLabel,
    		aboutLabel,
    		$database,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('leadProjects' in $$props) $$invalidate(8, leadProjects = $$props.leadProjects);
    		if ('conditionsData' in $$props) $$invalidate(2, conditionsData = $$props.conditionsData);
    		if ('keyValuesData' in $$props) $$invalidate(3, keyValuesData = $$props.keyValuesData);
    		if ('themesData' in $$props) $$invalidate(4, themesData = $$props.themesData);
    		if ('leadCatchments' in $$props) leadCatchments = $$props.leadCatchments;
    		if ('stakeholderData' in $$props) $$invalidate(1, stakeholderData = $$props.stakeholderData);
    		if ('hwsLabel' in $$props) $$invalidate(5, hwsLabel = $$props.hwsLabel);
    		if ('aboutLabel' in $$props) $$invalidate(6, aboutLabel = $$props.aboutLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*visibility*/ 1) {
    			// Pane toggle labels
    			$$invalidate(6, aboutLabel = !visibility.aboutDetails
    			? 'Show more details'
    			: 'Hide details');
    		}

    		if ($$self.$$.dirty & /*visibility*/ 1) {
    			$$invalidate(5, hwsLabel = !visibility.hwsDetails
    			? 'Show more impact details'
    			: 'Hide impact details');
    		}

    		if ($$self.$$.dirty & /*$ui*/ 1024) {
    			// Reactive variables
    			$$invalidate(1, stakeholderData = $ui.state.focus.stakeholderData);
    		}

    		if ($$self.$$.dirty & /*$database, stakeholderData*/ 514) {
    			$$invalidate(8, leadProjects = $database.projects.filter(d => d.stakeholders.lead.org === stakeholderData.name));
    		}

    		if ($$self.$$.dirty & /*leadProjects*/ 256) {
    			leadCatchments = [...new Set(leadProjects.map(d => d.location.catchments).flat())];
    		}

    		if ($$self.$$.dirty & /*leadProjects*/ 256) {
    			// HWS Key Values and conditions data
    			$$invalidate(4, themesData = {
    				name: "&#8212; Themes",
    				array: [...new Set(leadProjects.map(d => d.hws.poTheme).flat())]
    			});
    		}

    		if ($$self.$$.dirty & /*leadProjects*/ 256) {
    			$$invalidate(3, keyValuesData = {
    				name: "&#8212; Values",
    				schemaName: "keyValues",
    				array: [...new Set(leadProjects.map(d => d.hws.values).flat())]
    			});
    		}

    		if ($$self.$$.dirty & /*leadProjects*/ 256) {
    			$$invalidate(2, conditionsData = {
    				name: "&#8212; Conditions",
    				schemaName: "conditions",
    				array: [...new Set(leadProjects.map(d => d.hws.conditions).flat())]
    			});
    		}
    	};

    	return [
    		visibility,
    		stakeholderData,
    		conditionsData,
    		keyValuesData,
    		themesData,
    		hwsLabel,
    		aboutLabel,
    		togglePane,
    		leadProjects,
    		$database,
    		$ui
    	];
    }

    class StakeholderContent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderContent",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/StakeholderImage.svelte generated by Svelte v3.46.4 */
    const file$w = "src/components/shared/stakeholders/stakeholderPage/StakeholderImage.svelte";

    function create_fragment$x(ctx) {
    	let section;
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			section = element("section");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*stakeholderData*/ ctx[0].imgURL)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = "Image for " + /*stakeholderData*/ ctx[0].name);
    			attr_dev(img, "class", "svelte-1ksfn7y");
    			add_location(img, file$w, 12, 8, 322);
    			attr_dev(section, "transtion:fly", { y: 200, duration: 1000 });
    			attr_dev(section, "class", "svelte-1ksfn7y");
    			add_location(section, file$w, 11, 4, 261);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, img);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*stakeholderData*/ 1 && !src_url_equal(img.src, img_src_value = /*stakeholderData*/ ctx[0].imgURL)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*stakeholderData*/ 1 && img_alt_value !== (img_alt_value = "Image for " + /*stakeholderData*/ ctx[0].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let stakeholderData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderImage', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StakeholderImage> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, fly, stakeholderData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('stakeholderData' in $$props) $$invalidate(0, stakeholderData = $$props.stakeholderData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			$$invalidate(0, stakeholderData = $ui.state.focus.stakeholderData);
    		}
    	};

    	return [stakeholderData, $ui];
    }

    class StakeholderImage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderImage",
    			options,
    			id: create_fragment$x.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/ProjectFeedback.svelte generated by Svelte v3.46.4 */
    const file$v = "src/components/shared/stakeholders/stakeholderPage/ProjectFeedback.svelte";

    function create_fragment$w(ctx) {
    	let section;
    	let dividerzagged20px;
    	let t0;
    	let h3;
    	let t1;
    	let t2_value = /*projectData*/ ctx[0].name + "";
    	let t2;
    	let t3;
    	let div;
    	let current;
    	dividerzagged20px = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px.$$.fragment);
    			t0 = space();
    			h3 = element("h3");
    			t1 = text$1("—— What others think about ");
    			t2 = text$1(t2_value);
    			t3 = space();
    			div = element("div");
    			add_location(h3, file$v, 12, 4, 307);
    			attr_dev(div, "class", "content svelte-1q8i6t6");
    			add_location(div, file$v, 13, 4, 378);
    			attr_dev(section, "class", "svelte-1q8i6t6");
    			add_location(section, file$v, 10, 0, 268);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px, section, null);
    			append_dev(section, t0);
    			append_dev(section, h3);
    			append_dev(h3, t1);
    			append_dev(h3, t2);
    			append_dev(section, t3);
    			append_dev(section, div);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*projectData*/ 1) && t2_value !== (t2_value = /*projectData*/ ctx[0].name + "")) set_data_dev(t2, t2_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectFeedback', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ProjectFeedback> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ ui, DividerZagged20px, projectData, $ui });

    	$$self.$inject_state = $$props => {
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 2) {
    			// Reactive variables
    			$$invalidate(0, projectData = $ui.state.focus.projectData);
    		}
    	};

    	return [projectData, $ui];
    }

    class ProjectFeedback extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectFeedback",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/stakeholderPage/OtherProjects.svelte generated by Svelte v3.46.4 */
    const file$u = "src/components/shared/stakeholders/stakeholderPage/OtherProjects.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[5] = list[i];
    	child_ctx[7] = i;
    	return child_ctx;
    }

    // (26:16) {#each leadProjects as projectData, index}
    function create_each_block_1$2(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[5],
    				index: /*index*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const projectcard_changes = {};
    			if (dirty & /*leadProjects*/ 4) projectcard_changes.projectData = /*projectData*/ ctx[5];
    			projectcard.$set(projectcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(26:16) {#each leadProjects as projectData, index}",
    		ctx
    	});

    	return block;
    }

    // (37:16) {#each partnerProjects as projectData, index}
    function create_each_block$5(ctx) {
    	let projectcard;
    	let current;

    	projectcard = new ProjectCard({
    			props: {
    				projectData: /*projectData*/ ctx[5],
    				index: /*index*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(projectcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const projectcard_changes = {};
    			if (dirty & /*partnerProjects*/ 2) projectcard_changes.projectData = /*projectData*/ ctx[5];
    			projectcard.$set(projectcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(37:16) {#each partnerProjects as projectData, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$v(ctx) {
    	let section;
    	let dividerzagged20px;
    	let t0;
    	let h3;
    	let t1;
    	let t2_value = /*stakeholderData*/ ctx[0].name + "";
    	let t2;
    	let t3;
    	let t4;
    	let div1;
    	let h40;
    	let t6;
    	let div0;
    	let ul0;
    	let t7;
    	let div3;
    	let h41;
    	let t9;
    	let div2;
    	let ul1;
    	let current;
    	dividerzagged20px = new DividerZagged20px({ $$inline: true });
    	let each_value_1 = /*leadProjects*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*partnerProjects*/ ctx[1];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px.$$.fragment);
    			t0 = space();
    			h3 = element("h3");
    			t1 = text$1("—— Projects ");
    			t2 = text$1(t2_value);
    			t3 = text$1(" is invovled with");
    			t4 = space();
    			div1 = element("div");
    			h40 = element("h4");
    			h40.textContent = "— as project lead";
    			t6 = space();
    			div0 = element("div");
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t7 = space();
    			div3 = element("div");
    			h41 = element("h4");
    			h41.textContent = "— as a project partner";
    			t9 = space();
    			div2 = element("div");
    			ul1 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h3, "class", "svelte-1hlktwc");
    			add_location(h3, file$u, 19, 4, 750);
    			attr_dev(h40, "class", "svelte-1hlktwc");
    			add_location(h40, file$u, 22, 8, 868);
    			attr_dev(ul0, "class", "svelte-1hlktwc");
    			add_location(ul0, file$u, 24, 12, 953);
    			attr_dev(div0, "class", "card-container svelte-1hlktwc");
    			add_location(div0, file$u, 23, 8, 910);
    			attr_dev(div1, "class", "group-container svelte-1hlktwc");
    			add_location(div1, file$u, 21, 4, 828);
    			attr_dev(h41, "class", "svelte-1hlktwc");
    			add_location(h41, file$u, 33, 8, 1184);
    			attr_dev(ul1, "class", "svelte-1hlktwc");
    			add_location(ul1, file$u, 35, 12, 1274);
    			attr_dev(div2, "class", "card-container svelte-1hlktwc");
    			add_location(div2, file$u, 34, 8, 1231);
    			attr_dev(div3, "class", "group-container svelte-1hlktwc");
    			add_location(div3, file$u, 32, 4, 1144);
    			attr_dev(section, "class", "svelte-1hlktwc");
    			add_location(section, file$u, 17, 0, 711);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px, section, null);
    			append_dev(section, t0);
    			append_dev(section, h3);
    			append_dev(h3, t1);
    			append_dev(h3, t2);
    			append_dev(h3, t3);
    			append_dev(section, t4);
    			append_dev(section, div1);
    			append_dev(div1, h40);
    			append_dev(div1, t6);
    			append_dev(div1, div0);
    			append_dev(div0, ul0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(ul0, null);
    			}

    			append_dev(section, t7);
    			append_dev(section, div3);
    			append_dev(div3, h41);
    			append_dev(div3, t9);
    			append_dev(div3, div2);
    			append_dev(div2, ul1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul1, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*stakeholderData*/ 1) && t2_value !== (t2_value = /*stakeholderData*/ ctx[0].name + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*leadProjects*/ 4) {
    				each_value_1 = /*leadProjects*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(ul0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*partnerProjects*/ 2) {
    				each_value = /*partnerProjects*/ ctx[1];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul1, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px.$$.fragment, local);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px.$$.fragment, local);
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let stakeholderData;
    	let leadProjects;
    	let partnerProjects;
    	let $database;
    	let $ui;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(3, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(4, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('OtherProjects', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<OtherProjects> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ProjectCard,
    		DividerZagged20px,
    		ui,
    		database,
    		stakeholderData,
    		partnerProjects,
    		leadProjects,
    		$database,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('stakeholderData' in $$props) $$invalidate(0, stakeholderData = $$props.stakeholderData);
    		if ('partnerProjects' in $$props) $$invalidate(1, partnerProjects = $$props.partnerProjects);
    		if ('leadProjects' in $$props) $$invalidate(2, leadProjects = $$props.leadProjects);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$ui*/ 16) {
    			// Reactive variables
    			$$invalidate(0, stakeholderData = $ui.state.focus.stakeholderData);
    		}

    		if ($$self.$$.dirty & /*$database, stakeholderData*/ 9) {
    			$$invalidate(2, leadProjects = $database.projects.filter(d => d.stakeholders.lead.org === stakeholderData.name).slice(0, 3));
    		}

    		if ($$self.$$.dirty & /*$database, stakeholderData*/ 9) {
    			$$invalidate(1, partnerProjects = $database.projects.filter(d => d.stakeholders.partners.indexOf(stakeholderData.name) > -1).slice(0, 3));
    		}
    	};

    	return [stakeholderData, partnerProjects, leadProjects, $database, $ui];
    }

    class OtherProjects extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "OtherProjects",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* src/components/shared/stakeholders/StakeholderPage.svelte generated by Svelte v3.46.4 */
    const file$t = "src/components/shared/stakeholders/StakeholderPage.svelte";

    function create_fragment$u(ctx) {
    	let section;
    	let titleblock;
    	let t0;
    	let infopane;
    	let t1;
    	let stakeholdercontent;
    	let t2;
    	let stakeholderimage;
    	let t3;
    	let otherprojects;
    	let section_intro;
    	let section_outro;
    	let current;
    	titleblock = new TitleBlock({ $$inline: true });
    	infopane = new Infopane({ $$inline: true });
    	stakeholdercontent = new StakeholderContent({ $$inline: true });
    	stakeholderimage = new StakeholderImage({ $$inline: true });
    	otherprojects = new OtherProjects({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(titleblock.$$.fragment);
    			t0 = space();
    			create_component(infopane.$$.fragment);
    			t1 = space();
    			create_component(stakeholdercontent.$$.fragment);
    			t2 = space();
    			create_component(stakeholderimage.$$.fragment);
    			t3 = space();
    			create_component(otherprojects.$$.fragment);
    			attr_dev(section, "id", "stakeholder-overlay");
    			attr_dev(section, "class", "svelte-tkcm05");
    			add_location(section, file$t, 14, 0, 689);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(titleblock, section, null);
    			append_dev(section, t0);
    			mount_component(infopane, section, null);
    			append_dev(section, t1);
    			mount_component(stakeholdercontent, section, null);
    			append_dev(section, t2);
    			mount_component(stakeholderimage, section, null);
    			append_dev(section, t3);
    			mount_component(otherprojects, section, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(infopane.$$.fragment, local);
    			transition_in(stakeholdercontent.$$.fragment, local);
    			transition_in(stakeholderimage.$$.fragment, local);
    			transition_in(otherprojects.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: 500, duration: 1000 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(infopane.$$.fragment, local);
    			transition_out(stakeholdercontent.$$.fragment, local);
    			transition_out(stakeholderimage.$$.fragment, local);
    			transition_out(otherprojects.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: 500, duration: 200 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(titleblock);
    			destroy_component(infopane);
    			destroy_component(stakeholdercontent);
    			destroy_component(stakeholderimage);
    			destroy_component(otherprojects);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderPage', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StakeholderPage> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		fade,
    		TitleBlock,
    		InfoPane: Infopane,
    		UserActions: UserAction,
    		StakeholderContent,
    		StakeholderImage,
    		ProjectFeedback,
    		OtherProjects
    	});

    	return [];
    }

    class StakeholderPage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderPage",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* src/components/byPage/connect/QuickSearch.svelte generated by Svelte v3.46.4 */

    const { console: console_1$b } = globals;
    const file$s = "src/components/byPage/connect/QuickSearch.svelte";

    function create_fragment$t(ctx) {
    	let input;
    	let t;
    	let div;
    	let magnify;
    	let current;
    	let mounted;
    	let dispose;

    	magnify = new Magnify({
    			props: { width: "2em", height: "2em" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			input = element("input");
    			t = space();
    			div = element("div");
    			create_component(magnify.$$.fragment);
    			attr_dev(input, "id", "search-term");
    			attr_dev(input, "type", "text");
    			attr_dev(input, "placeholder", "Search project name by keyword");
    			attr_dev(input, "class", "svelte-1d32qps");
    			add_location(input, file$s, 17, 0, 531);
    			attr_dev(div, "id", "search-button");
    			attr_dev(div, "class", "input-icon svelte-1d32qps");
    			add_location(div, file$s, 19, 0, 643);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			set_input_value(input, /*searchInput*/ ctx[0]);
    			insert_dev(target, t, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(magnify, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[2]),
    					listen_dev(div, "click", /*handleSearch*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*searchInput*/ 1 && input.value !== /*searchInput*/ ctx[0]) {
    				set_input_value(input, /*searchInput*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(magnify.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(magnify.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			destroy_component(magnify);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(3, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('QuickSearch', slots, []);
    	let searchInput = '';

    	function handleSearch() {
    		console.log('Submit search: ', searchInput);
    		set_store_value(ui, $ui.byPage.discover.connectSearch.isMade = true, $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$b.warn(`<QuickSearch> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		searchInput = this.value;
    		$$invalidate(0, searchInput);
    	}

    	$$self.$capture_state = () => ({
    		QuickSearch: QuickSearch_1,
    		ui,
    		Magnify,
    		searchInput,
    		handleSearch,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('searchInput' in $$props) $$invalidate(0, searchInput = $$props.searchInput);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [searchInput, handleSearch, input_input_handler];
    }

    class QuickSearch_1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "QuickSearch_1",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    /* src/components/byPage/connect/infoPane/InfoEmptySearch.svelte generated by Svelte v3.46.4 */
    const file$r = "src/components/byPage/connect/infoPane/InfoEmptySearch.svelte";

    function create_fragment$s(ctx) {
    	let div0;
    	let h20;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.connect.info.selectionHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.connect.info.selectionDefault + "";
    	let t2;
    	let hr;
    	let t3;
    	let div2;
    	let h21;
    	let t4;
    	let html_tag_2;
    	let raw2_value = componentContent.connect.info.searchToolHeader + "";
    	let t5;
    	let html_tag_3;
    	let raw3_value = componentContent.connect.info.searchToolDesc + "";
    	let t6;
    	let ul;
    	let li;
    	let div1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h20 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			t2 = space();
    			hr = element("hr");
    			t3 = space();
    			div2 = element("div");
    			h21 = element("h2");
    			t4 = text$1("— ");
    			html_tag_2 = new HtmlTag();
    			t5 = space();
    			html_tag_3 = new HtmlTag();
    			t6 = space();
    			ul = element("ul");
    			li = element("li");
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "Search for stakeholders →";
    			html_tag.a = null;
    			add_location(h20, file$r, 19, 4, 619);
    			html_tag_1.a = null;
    			attr_dev(div0, "class", "selection-info info-container");
    			add_location(div0, file$r, 18, 0, 569);
    			attr_dev(hr, "class", "svelte-ikt362");
    			add_location(hr, file$r, 22, 0, 759);
    			html_tag_2.a = null;
    			add_location(h21, file$r, 24, 4, 809);
    			html_tag_3.a = t6;
    			add_location(button, file$r, 29, 16, 1022);
    			attr_dev(div1, "class", "button-container svelte-ikt362");
    			add_location(div1, file$r, 28, 12, 973);
    			add_location(li, file$r, 27, 8, 956);
    			attr_dev(ul, "class", "svelte-ikt362");
    			add_location(ul, file$r, 26, 4, 943);
    			attr_dev(div2, "class", "search-options-container");
    			add_location(div2, file$r, 23, 0, 764);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h20);
    			append_dev(h20, t0);
    			html_tag.m(raw0_value, h20);
    			append_dev(div0, t1);
    			html_tag_1.m(raw1_value, div0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, h21);
    			append_dev(h21, t4);
    			html_tag_2.m(raw2_value, h21);
    			append_dev(div2, t5);
    			html_tag_3.m(raw3_value, div2);
    			append_dev(div2, t6);
    			append_dev(div2, ul);
    			append_dev(ul, li);
    			append_dev(li, div1);
    			append_dev(div1, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*showSearch*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoEmptySearch', slots, []);

    	function showSearch() {
    		set_store_value(ui, $ui.byPage.connect.main = 'search', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}

    	function showMoreRandom() {
    		set_store_value(ui, $ui.byPage.discover.main = 'list', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoEmptySearch> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		QuickSearch: QuickSearch_1,
    		componentContent,
    		ui,
    		showSearch,
    		showMoreRandom,
    		$ui
    	});

    	return [showSearch];
    }

    class InfoEmptySearch$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoEmptySearch",
    			options,
    			id: create_fragment$s.name
    		});
    	}
    }

    /* src/components/byPage/connect/infoPane/InfoSearchResults.svelte generated by Svelte v3.46.4 */

    const { console: console_1$a } = globals;
    const file$q = "src/components/byPage/connect/infoPane/InfoSearchResults.svelte";

    function create_fragment$r(ctx) {
    	let div0;
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.connect.info.searchResultsHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.connect.info.searchResultsDesc + "";
    	let t2;
    	let hr;
    	let t3;
    	let div2;
    	let html_tag_2;
    	let raw2_value = componentContent.connect.info.searchResultsOptions + "";
    	let t4;
    	let div1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h2 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			t2 = space();
    			hr = element("hr");
    			t3 = space();
    			div2 = element("div");
    			html_tag_2 = new HtmlTag();
    			t4 = space();
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "Refine search";
    			html_tag.a = null;
    			add_location(h2, file$q, 18, 4, 581);
    			html_tag_1.a = null;
    			add_location(div0, file$q, 17, 0, 571);
    			add_location(hr, file$q, 21, 0, 723);
    			html_tag_2.a = t4;
    			add_location(button, file$q, 25, 8, 864);
    			attr_dev(div1, "class", "button-container svelte-11rw9zy");
    			add_location(div1, file$q, 24, 4, 824);
    			attr_dev(div2, "class", "search-options");
    			add_location(div2, file$q, 22, 0, 728);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h2);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			append_dev(div0, t1);
    			html_tag_1.m(raw1_value, div0);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			html_tag_2.m(raw2_value, div2);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*openSearch*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoSearchResults', slots, []);

    	function openSearch() {
    		set_store_value(ui, $ui.byPage.connect.main = 'search', $ui);
    		set_store_value(ui, $ui.byPage.connect.stakeholderSearch.isMade = false, $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    		console.log('Opening search cleared');
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$a.warn(`<InfoSearchResults> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		Magnify,
    		ui,
    		componentContent,
    		openSearch,
    		$ui
    	});

    	return [openSearch];
    }

    class InfoSearchResults$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoSearchResults",
    			options,
    			id: create_fragment$r.name
    		});
    	}
    }

    /* src/components/byPage/connect/infoPane/InfoNetwork.svelte generated by Svelte v3.46.4 */
    const file$p = "src/components/byPage/connect/infoPane/InfoNetwork.svelte";

    function create_fragment$q(ctx) {
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.connect.info.networkHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.connect.info.networkDesc + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text$1("—  ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = null;
    			add_location(h2, file$p, 8, 0, 291);
    			html_tag_1.a = html_anchor;
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			insert_dev(target, t1, anchor);
    			html_tag_1.m(raw1_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag_1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoNetwork', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoNetwork> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fly, ui, componentContent });
    	return [];
    }

    class InfoNetwork extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoNetwork",
    			options,
    			id: create_fragment$q.name
    		});
    	}
    }

    /* src/components/byPage/connect/InfoPane.svelte generated by Svelte v3.46.4 */
    const file$o = "src/components/byPage/connect/InfoPane.svelte";

    // (31:51) 
    function create_if_block_3$8(ctx) {
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.connect.info.filterHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.connect.info.filterDesc + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = null;
    			add_location(h2, file$o, 31, 8, 1269);
    			html_tag_1.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			insert_dev(target, t1, anchor);
    			html_tag_1.m(raw1_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag_1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$8.name,
    		type: "if",
    		source: "(31:51) ",
    		ctx
    	});

    	return block;
    }

    // (17:4) {#if $ui.byPage.connect.main === 'list'}
    function create_if_block$a(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$8, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.connect.stakeholderView === 'cards') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(17:4) {#if $ui.byPage.connect.main === 'list'}",
    		ctx
    	});

    	return block;
    }

    // (26:8) {:else}
    function create_else_block_1$1(ctx) {
    	let infonetwork;
    	let current;
    	infonetwork = new InfoNetwork({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infonetwork.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infonetwork, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infonetwork.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infonetwork.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infonetwork, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(26:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (19:8) {#if $ui.byPage.connect.stakeholderView === 'cards'}
    function create_if_block_1$8(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$8, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.connect.stakeholderSearch.isMade) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(19:8) {#if $ui.byPage.connect.stakeholderView === 'cards'}",
    		ctx
    	});

    	return block;
    }

    // (22:12) {:else}
    function create_else_block$4(ctx) {
    	let infosearchresults;
    	let current;
    	infosearchresults = new InfoSearchResults$1({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infosearchresults.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infosearchresults, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infosearchresults.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infosearchresults.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infosearchresults, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(22:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:12) {#if !$ui.byPage.connect.stakeholderSearch.isMade}
    function create_if_block_2$8(ctx) {
    	let infoemptysearch;
    	let current;
    	infoemptysearch = new InfoEmptySearch$1({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infoemptysearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infoemptysearch, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infoemptysearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infoemptysearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infoemptysearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(20:12) {#if !$ui.byPage.connect.stakeholderSearch.isMade}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let section;
    	let dividerzagged20px0;
    	let t0;
    	let current_block_type_index;
    	let if_block;
    	let t1;
    	let div;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	const if_block_creators = [create_if_block$a, create_if_block_3$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.connect.main === 'list') return 0;
    		if (/*$ui*/ ctx[0].byPage.connect.main === 'search') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			div = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			attr_dev(div, "class", "float-bottom svelte-mzrsv1");
    			add_location(div, file$o, 34, 4, 1410);
    			attr_dev(section, "class", "svelte-mzrsv1");
    			add_location(section, file$o, 13, 0, 573);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px0, section, null);
    			append_dev(section, t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			append_dev(section, t1);
    			append_dev(section, div);
    			mount_component(dividerzagged20px1, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(section, t1);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: -500, duration: 1500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: -500, duration: 150 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoPane', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoPane> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		InfoEmptySearch: InfoEmptySearch$1,
    		InfoSearchResults: InfoSearchResults$1,
    		InfoNetwork,
    		DividerZagged20px,
    		ui,
    		componentContent,
    		$ui
    	});

    	return [$ui];
    }

    class InfoPane$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoPane",
    			options,
    			id: create_fragment$p.name
    		});
    	}
    }

    /* src/components/byPage/connect/StakeholderSearch.svelte generated by Svelte v3.46.4 */

    const { Object: Object_1$1, console: console_1$9 } = globals;

    const file$n = "src/components/byPage/connect/StakeholderSearch.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_2$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_3$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_4$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_5$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_6$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_7$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_8$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_9$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_10$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_11$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_12$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (74:8) {#if paneVisbility.byStakeholders}
    function create_if_block_4$3(ctx) {
    	let div1;
    	let div0;
    	let h4;
    	let raw_value = partnerOrg.label + "";
    	let t;
    	let multiselect;
    	let updating_value;
    	let div1_transition;
    	let current;

    	function multiselect_value_binding(value) {
    		/*multiselect_value_binding*/ ctx[7](value);
    	}

    	let multiselect_props = {
    		id: partnerOrg.name,
    		placeholder: partnerOrg.placeholder,
    		$$slots: { default: [create_default_slot_12$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.partnerOrg !== void 0) {
    		multiselect_props.value = /*$ui*/ ctx[0].search.organisation.partnerOrg;
    	}

    	multiselect = new MultiSelect({ props: multiselect_props, $$inline: true });
    	binding_callbacks.push(() => bind(multiselect, 'value', multiselect_value_binding));

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			h4 = element("h4");
    			t = space();
    			create_component(multiselect.$$.fragment);
    			attr_dev(h4, "class", "svelte-kelrrb");
    			add_location(h4, file$n, 76, 16, 2937);
    			attr_dev(div0, "class", "multi-select-container svelte-kelrrb");
    			set_style(div0, "z-index", "9");
    			add_location(div0, file$n, 75, 12, 2864);
    			attr_dev(div1, "class", "collapse__body svelte-kelrrb");
    			add_location(div1, file$n, 74, 8, 2804);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, h4);
    			h4.innerHTML = raw_value;
    			append_dev(div0, t);
    			mount_component(multiselect, div0, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect_changes.value = /*$ui*/ ctx[0].search.organisation.partnerOrg;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect.$set(multiselect_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect.$$.fragment, local);
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(multiselect);
    			if (detaching && div1_transition) div1_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(74:8) {#if paneVisbility.byStakeholders}",
    		ctx
    	});

    	return block;
    }

    // (80:20) {#each partnerOrg.list as name}
    function create_each_block_12$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 80, 20, 3244);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_12$1.name,
    		type: "each",
    		source: "(80:20) {#each partnerOrg.list as name}",
    		ctx
    	});

    	return block;
    }

    // (78:16) <MultiSelect id = {partnerOrg.name} bind:value={$ui.search.organisation.partnerOrg} placeholder={partnerOrg.placeholder} >
    function create_default_slot_12$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_12 = partnerOrg.list;
    	validate_each_argument(each_value_12);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_12.length; i += 1) {
    		each_blocks[i] = create_each_block_12$1(get_each_context_12$1(ctx, each_value_12, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 78, 20, 3130);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*partnerOrg*/ 0) {
    				each_value_12 = partnerOrg.list;
    				validate_each_argument(each_value_12);
    				let i;

    				for (i = 0; i < each_value_12.length; i += 1) {
    					const child_ctx = get_each_context_12$1(ctx, each_value_12, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_12$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_12.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$1.name,
    		type: "slot",
    		source: "(78:16) <MultiSelect id = {partnerOrg.name} bind:value={$ui.search.organisation.partnerOrg} placeholder={partnerOrg.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (97:8) {#if paneVisbility.byOutcomes}
    function create_if_block_3$7(ctx) {
    	let div4;
    	let div0;
    	let h40;
    	let raw0_value = keyValues.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = conditions.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = performanceObjectivesGroup.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let t5;
    	let div3;
    	let h43;
    	let raw3_value = performanceObjectivesTheme.label + "";
    	let t6;
    	let multiselect3;
    	let updating_value_3;
    	let div4_transition;
    	let current;

    	function multiselect0_value_binding(value) {
    		/*multiselect0_value_binding*/ ctx[8](value);
    	}

    	let multiselect0_props = {
    		id: keyValues.name,
    		placeholder: keyValues.placeholder,
    		$$slots: { default: [create_default_slot_11$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.keyValues !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.organisation.keyValues;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding));

    	function multiselect1_value_binding(value) {
    		/*multiselect1_value_binding*/ ctx[9](value);
    	}

    	let multiselect1_props = {
    		id: conditions.name,
    		placeholder: conditions.placeholder,
    		$$slots: { default: [create_default_slot_10$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.conditions !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.organisation.conditions;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding));

    	function multiselect2_value_binding(value) {
    		/*multiselect2_value_binding*/ ctx[10](value);
    	}

    	let multiselect2_props = {
    		id: performanceObjectivesGroup.name,
    		placeholder: performanceObjectivesGroup.placeholder,
    		$$slots: { default: [create_default_slot_9$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.performanceObjectivesGroup !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.organisation.performanceObjectivesGroup;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding));

    	function multiselect3_value_binding(value) {
    		/*multiselect3_value_binding*/ ctx[11](value);
    	}

    	let multiselect3_props = {
    		id: performanceObjectivesTheme.name,
    		placeholder: performanceObjectivesTheme.placeholder,
    		$$slots: { default: [create_default_slot_8$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.project.performanceObjectivesTheme !== void 0) {
    		multiselect3_props.value = /*$ui*/ ctx[0].search.project.performanceObjectivesTheme;
    	}

    	multiselect3 = new MultiSelect({
    			props: multiselect3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect3, 'value', multiselect3_value_binding));

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			t5 = space();
    			div3 = element("div");
    			h43 = element("h4");
    			t6 = space();
    			create_component(multiselect3.$$.fragment);
    			attr_dev(h40, "class", "svelte-kelrrb");
    			add_location(h40, file$n, 99, 16, 3928);
    			attr_dev(div0, "class", "multi-select-container svelte-kelrrb");
    			set_style(div0, "z-index", "21");
    			add_location(div0, file$n, 98, 12, 3854);
    			attr_dev(h41, "class", "svelte-kelrrb");
    			add_location(h41, file$n, 109, 16, 4437);
    			attr_dev(div1, "class", "multi-select-container svelte-kelrrb");
    			set_style(div1, "z-index", "20");
    			add_location(div1, file$n, 108, 12, 4362);
    			attr_dev(h42, "class", "svelte-kelrrb");
    			add_location(h42, file$n, 119, 16, 4952);
    			attr_dev(div2, "class", "multi-select-container svelte-kelrrb");
    			set_style(div2, "z-index", "19");
    			add_location(div2, file$n, 118, 12, 4878);
    			attr_dev(h43, "class", "svelte-kelrrb");
    			add_location(h43, file$n, 128, 16, 5546);
    			attr_dev(div3, "class", "multi-select-container svelte-kelrrb");
    			set_style(div3, "z-index", "18");
    			add_location(div3, file$n, 127, 12, 5472);
    			attr_dev(div4, "class", "collapse__body svelte-kelrrb");
    			add_location(div4, file$n, 97, 8, 3793);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div4, t1);
    			append_dev(div4, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div4, t3);
    			append_dev(div4, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			append_dev(div4, t5);
    			append_dev(div4, div3);
    			append_dev(div3, h43);
    			h43.innerHTML = raw3_value;
    			append_dev(div3, t6);
    			mount_component(multiselect3, div3, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.organisation.keyValues;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.organisation.conditions;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.organisation.performanceObjectivesGroup;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    			const multiselect3_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty[0] & /*$ui*/ 1) {
    				updating_value_3 = true;
    				multiselect3_changes.value = /*$ui*/ ctx[0].search.project.performanceObjectivesTheme;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			multiselect3.$set(multiselect3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);
    			transition_in(multiselect3.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, true);
    				div4_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			transition_out(multiselect3.$$.fragment, local);
    			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, slide, {}, false);
    			div4_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			destroy_component(multiselect3);
    			if (detaching && div4_transition) div4_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(97:8) {#if paneVisbility.byOutcomes}",
    		ctx
    	});

    	return block;
    }

    // (103:20) {#each keyValues.list as name}
    function create_each_block_11$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 103, 20, 4228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_11$1.name,
    		type: "each",
    		source: "(103:20) {#each keyValues.list as name}",
    		ctx
    	});

    	return block;
    }

    // (101:16) <MultiSelect id={keyValues.name} bind:value={$ui.search.organisation.keyValues} placeholder={keyValues.placeholder} >
    function create_default_slot_11$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_11 = keyValues.list;
    	validate_each_argument(each_value_11);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_11.length; i += 1) {
    		each_blocks[i] = create_each_block_11$1(get_each_context_11$1(ctx, each_value_11, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 101, 20, 4115);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*keyValues*/ 0) {
    				each_value_11 = keyValues.list;
    				validate_each_argument(each_value_11);
    				let i;

    				for (i = 0; i < each_value_11.length; i += 1) {
    					const child_ctx = get_each_context_11$1(ctx, each_value_11, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_11$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_11.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$1.name,
    		type: "slot",
    		source: "(101:16) <MultiSelect id={keyValues.name} bind:value={$ui.search.organisation.keyValues} placeholder={keyValues.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (113:20) {#each conditions.list as name}
    function create_each_block_10$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 113, 20, 4744);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_10$1.name,
    		type: "each",
    		source: "(113:20) {#each conditions.list as name}",
    		ctx
    	});

    	return block;
    }

    // (111:16) <MultiSelect id={conditions.name} bind:value={$ui.search.organisation.conditions}   placeholder={conditions.placeholder} >
    function create_default_slot_10$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_10 = conditions.list;
    	validate_each_argument(each_value_10);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_10.length; i += 1) {
    		each_blocks[i] = create_each_block_10$1(get_each_context_10$1(ctx, each_value_10, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 111, 20, 4630);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 0) {
    				each_value_10 = conditions.list;
    				validate_each_argument(each_value_10);
    				let i;

    				for (i = 0; i < each_value_10.length; i += 1) {
    					const child_ctx = get_each_context_10$1(ctx, each_value_10, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_10$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_10.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$1.name,
    		type: "slot",
    		source: "(111:16) <MultiSelect id={conditions.name} bind:value={$ui.search.organisation.conditions}   placeholder={conditions.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (123:20) {#each performanceObjectivesGroup.list as name}
    function create_each_block_9$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 123, 20, 5339);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_9$1.name,
    		type: "each",
    		source: "(123:20) {#each performanceObjectivesGroup.list as name}",
    		ctx
    	});

    	return block;
    }

    // (121:16) <MultiSelect id={performanceObjectivesGroup.name} bind:value={$ui.search.organisation.performanceObjectivesGroup}   placeholder={performanceObjectivesGroup.placeholder} >
    function create_default_slot_9$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_9 = performanceObjectivesGroup.list;
    	validate_each_argument(each_value_9);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_9.length; i += 1) {
    		each_blocks[i] = create_each_block_9$1(get_each_context_9$1(ctx, each_value_9, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 121, 20, 5209);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*performanceObjectivesGroup*/ 0) {
    				each_value_9 = performanceObjectivesGroup.list;
    				validate_each_argument(each_value_9);
    				let i;

    				for (i = 0; i < each_value_9.length; i += 1) {
    					const child_ctx = get_each_context_9$1(ctx, each_value_9, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_9$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_9.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$1.name,
    		type: "slot",
    		source: "(121:16) <MultiSelect id={performanceObjectivesGroup.name} bind:value={$ui.search.organisation.performanceObjectivesGroup}   placeholder={performanceObjectivesGroup.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (132:20) {#each performanceObjectivesTheme.list as name}
    function create_each_block_8$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 132, 20, 5928);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8$1.name,
    		type: "each",
    		source: "(132:20) {#each performanceObjectivesTheme.list as name}",
    		ctx
    	});

    	return block;
    }

    // (130:16) <MultiSelect id={performanceObjectivesTheme.name} bind:value={$ui.search.project.performanceObjectivesTheme}   placeholder={performanceObjectivesTheme.placeholder} >
    function create_default_slot_8$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_8 = performanceObjectivesTheme.list;
    	validate_each_argument(each_value_8);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks[i] = create_each_block_8$1(get_each_context_8$1(ctx, each_value_8, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 130, 20, 5798);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*performanceObjectivesTheme*/ 0) {
    				each_value_8 = performanceObjectivesTheme.list;
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8$1(ctx, each_value_8, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_8$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_8.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$1.name,
    		type: "slot",
    		source: "(130:16) <MultiSelect id={performanceObjectivesTheme.name} bind:value={$ui.search.project.performanceObjectivesTheme}   placeholder={performanceObjectivesTheme.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (149:8) {#if paneVisbility.byLocation}
    function create_if_block_2$7(ctx) {
    	let div3;
    	let div0;
    	let h40;
    	let raw0_value = catchments.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = subcatchments.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = locations.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let div3_transition;
    	let current;

    	function multiselect0_value_binding_1(value) {
    		/*multiselect0_value_binding_1*/ ctx[12](value);
    	}

    	let multiselect0_props = {
    		id: catchments.name,
    		placeholder: catchments.placeholder,
    		$$slots: { default: [create_default_slot_7$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.catchment !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.organisation.catchment;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_1));

    	function multiselect1_value_binding_1(value) {
    		/*multiselect1_value_binding_1*/ ctx[13](value);
    	}

    	let multiselect1_props = {
    		id: subcatchments.name,
    		placeholder: subcatchments.placeholder,
    		$$slots: { default: [create_default_slot_6$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.subcatchment !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.organisation.subcatchment;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_1));

    	function multiselect2_value_binding_1(value) {
    		/*multiselect2_value_binding_1*/ ctx[14](value);
    	}

    	let multiselect2_props = {
    		id: locations.name,
    		placeholder: locations.placeholder,
    		$$slots: { default: [create_default_slot_5$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.locations !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.organisation.locations;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_1));

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			attr_dev(h40, "class", "svelte-kelrrb");
    			add_location(h40, file$n, 151, 16, 6595);
    			attr_dev(div0, "class", "multi-select-container svelte-kelrrb");
    			set_style(div0, "z-index", "17");
    			add_location(div0, file$n, 150, 12, 6521);
    			attr_dev(h41, "class", "svelte-kelrrb");
    			add_location(h41, file$n, 161, 16, 7123);
    			attr_dev(div1, "class", "multi-select-container svelte-kelrrb");
    			set_style(div1, "z-index", "16");
    			add_location(div1, file$n, 160, 12, 7049);
    			attr_dev(h42, "class", "svelte-kelrrb");
    			add_location(h42, file$n, 171, 16, 7666);
    			attr_dev(div2, "class", "multi-select-container svelte-kelrrb");
    			set_style(div2, "z-index", "15");
    			add_location(div2, file$n, 170, 12, 7592);
    			attr_dev(div3, "class", "collapse__body svelte-kelrrb");
    			add_location(div3, file$n, 149, 8, 6460);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div3, t1);
    			append_dev(div3, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.organisation.catchment;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.organisation.subcatchment;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.organisation.locations;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, true);
    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			if (!div3_transition) div3_transition = create_bidirectional_transition(div3, slide, {}, false);
    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			if (detaching && div3_transition) div3_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(149:8) {#if paneVisbility.byLocation}",
    		ctx
    	});

    	return block;
    }

    // (155:20) {#each catchments.list as name}
    function create_each_block_7$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 155, 20, 6899);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7$1.name,
    		type: "each",
    		source: "(155:20) {#each catchments.list as name}",
    		ctx
    	});

    	return block;
    }

    // (153:16) <MultiSelect id={catchments.name} bind:value={$ui.search.organisation.catchment} placeholder={catchments.placeholder} >
    function create_default_slot_7$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_7 = catchments.list;
    	validate_each_argument(each_value_7);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks[i] = create_each_block_7$1(get_each_context_7$1(ctx, each_value_7, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 153, 20, 6785);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*catchments*/ 0) {
    				each_value_7 = catchments.list;
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7$1(ctx, each_value_7, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_7$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_7.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$1.name,
    		type: "slot",
    		source: "(153:16) <MultiSelect id={catchments.name} bind:value={$ui.search.organisation.catchment} placeholder={catchments.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (165:20) {#each subcatchments.list as name}
    function create_each_block_6$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 165, 20, 7442);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6$1.name,
    		type: "each",
    		source: "(165:20) {#each subcatchments.list as name}",
    		ctx
    	});

    	return block;
    }

    // (163:16) <MultiSelect id={subcatchments.name} bind:value={$ui.search.organisation.subcatchment} placeholder={subcatchments.placeholder} >
    function create_default_slot_6$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_6 = subcatchments.list;
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6$1(get_each_context_6$1(ctx, each_value_6, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 163, 20, 7325);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*subcatchments*/ 0) {
    				each_value_6 = subcatchments.list;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6$1(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_6$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_6.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(163:16) <MultiSelect id={subcatchments.name} bind:value={$ui.search.organisation.subcatchment} placeholder={subcatchments.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (175:20) {#each locations.list as name}
    function create_each_block_5$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 175, 20, 7965);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5$1.name,
    		type: "each",
    		source: "(175:20) {#each locations.list as name}",
    		ctx
    	});

    	return block;
    }

    // (173:16) <MultiSelect id={locations.name} bind:value={$ui.search.organisation.locations} placeholder={locations.placeholder}>
    function create_default_slot_5$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_5 = locations.list;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5$1(get_each_context_5$1(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 173, 20, 7852);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*locations*/ 0) {
    				each_value_5 = locations.list;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5$1(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(173:16) <MultiSelect id={locations.name} bind:value={$ui.search.organisation.locations} placeholder={locations.placeholder}>",
    		ctx
    	});

    	return block;
    }

    // (191:8) {#if paneVisbility.byCharacteristics}
    function create_if_block_1$7(ctx) {
    	let div5;
    	let div0;
    	let h40;
    	let raw0_value = initiativeType.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div1;
    	let h41;
    	let raw1_value = projectStage.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div2;
    	let h42;
    	let raw2_value = projectClass.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let t5;
    	let div3;
    	let h43;
    	let raw3_value = projectSize.label + "";
    	let t6;
    	let multiselect3;
    	let updating_value_3;
    	let t7;
    	let div4;
    	let h44;
    	let raw4_value = projectScale.label + "";
    	let t8;
    	let multiselect4;
    	let updating_value_4;
    	let div5_transition;
    	let current;

    	function multiselect0_value_binding_2(value) {
    		/*multiselect0_value_binding_2*/ ctx[15](value);
    	}

    	let multiselect0_props = {
    		id: initiativeType.name,
    		placeholder: initiativeType.placeholder,
    		$$slots: { default: [create_default_slot_4$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.initiativeType !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[0].search.organisation.initiativeType;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_2));

    	function multiselect1_value_binding_2(value) {
    		/*multiselect1_value_binding_2*/ ctx[16](value);
    	}

    	let multiselect1_props = {
    		id: projectStage.name,
    		placeholder: projectStage.placeholder,
    		$$slots: { default: [create_default_slot_3$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.projectStage !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[0].search.organisation.projectStage;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_2));

    	function multiselect2_value_binding_2(value) {
    		/*multiselect2_value_binding_2*/ ctx[17](value);
    	}

    	let multiselect2_props = {
    		id: projectClass.name,
    		placeholder: projectClass.placeholder,
    		$$slots: { default: [create_default_slot_2$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.projectClass !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[0].search.organisation.projectClass;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_2));

    	function multiselect3_value_binding_1(value) {
    		/*multiselect3_value_binding_1*/ ctx[18](value);
    	}

    	let multiselect3_props = {
    		id: projectSize.name,
    		placeholder: projectSize.placeholder,
    		$$slots: { default: [create_default_slot_1$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.projectSize !== void 0) {
    		multiselect3_props.value = /*$ui*/ ctx[0].search.organisation.projectSize;
    	}

    	multiselect3 = new MultiSelect({
    			props: multiselect3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect3, 'value', multiselect3_value_binding_1));

    	function multiselect4_value_binding(value) {
    		/*multiselect4_value_binding*/ ctx[19](value);
    	}

    	let multiselect4_props = {
    		id: projectScale.name,
    		placeholder: projectScale.placeholder,
    		$$slots: { default: [create_default_slot$1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[0].search.organisation.projectScale !== void 0) {
    		multiselect4_props.value = /*$ui*/ ctx[0].search.organisation.projectScale;
    	}

    	multiselect4 = new MultiSelect({
    			props: multiselect4_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect4, 'value', multiselect4_value_binding));

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			div0 = element("div");
    			h40 = element("h4");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			h41 = element("h4");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div2 = element("div");
    			h42 = element("h4");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			t5 = space();
    			div3 = element("div");
    			h43 = element("h4");
    			t6 = space();
    			create_component(multiselect3.$$.fragment);
    			t7 = space();
    			div4 = element("div");
    			h44 = element("h4");
    			t8 = space();
    			create_component(multiselect4.$$.fragment);
    			attr_dev(h40, "class", "svelte-kelrrb");
    			add_location(h40, file$n, 193, 16, 8681);
    			attr_dev(div0, "class", "multi-select-container svelte-kelrrb");
    			set_style(div0, "z-index", "14");
    			add_location(div0, file$n, 192, 12, 8607);
    			attr_dev(h41, "class", "svelte-kelrrb");
    			add_location(h41, file$n, 202, 16, 9231);
    			attr_dev(div1, "class", "multi-select-container svelte-kelrrb");
    			set_style(div1, "z-index", "13");
    			add_location(div1, file$n, 201, 12, 9157);
    			attr_dev(h42, "class", "svelte-kelrrb");
    			add_location(h42, file$n, 211, 16, 9771);
    			attr_dev(div2, "class", "multi-select-container svelte-kelrrb");
    			set_style(div2, "z-index", "12");
    			add_location(div2, file$n, 210, 12, 9697);
    			attr_dev(h43, "class", "svelte-kelrrb");
    			add_location(h43, file$n, 220, 16, 10311);
    			attr_dev(div3, "class", "multi-select-container svelte-kelrrb");
    			set_style(div3, "z-index", "11");
    			add_location(div3, file$n, 219, 12, 10237);
    			attr_dev(h44, "class", "svelte-kelrrb");
    			add_location(h44, file$n, 229, 16, 10846);
    			attr_dev(div4, "class", "multi-select-container svelte-kelrrb");
    			set_style(div4, "z-index", "10");
    			add_location(div4, file$n, 228, 12, 10772);
    			attr_dev(div5, "class", "collapse__body svelte-kelrrb");
    			add_location(div5, file$n, 191, 8, 8546);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div0);
    			append_dev(div0, h40);
    			h40.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			mount_component(multiselect0, div0, null);
    			append_dev(div5, t1);
    			append_dev(div5, div1);
    			append_dev(div1, h41);
    			h41.innerHTML = raw1_value;
    			append_dev(div1, t2);
    			mount_component(multiselect1, div1, null);
    			append_dev(div5, t3);
    			append_dev(div5, div2);
    			append_dev(div2, h42);
    			h42.innerHTML = raw2_value;
    			append_dev(div2, t4);
    			mount_component(multiselect2, div2, null);
    			append_dev(div5, t5);
    			append_dev(div5, div3);
    			append_dev(div3, h43);
    			h43.innerHTML = raw3_value;
    			append_dev(div3, t6);
    			mount_component(multiselect3, div3, null);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			append_dev(div4, h44);
    			h44.innerHTML = raw4_value;
    			append_dev(div4, t8);
    			mount_component(multiselect4, div4, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 1) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[0].search.organisation.initiativeType;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 1) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[0].search.organisation.projectStage;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 1) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[0].search.organisation.projectClass;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    			const multiselect3_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty[0] & /*$ui*/ 1) {
    				updating_value_3 = true;
    				multiselect3_changes.value = /*$ui*/ ctx[0].search.organisation.projectSize;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			multiselect3.$set(multiselect3_changes);
    			const multiselect4_changes = {};

    			if (dirty[1] & /*$$scope*/ 65536) {
    				multiselect4_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_4 && dirty[0] & /*$ui*/ 1) {
    				updating_value_4 = true;
    				multiselect4_changes.value = /*$ui*/ ctx[0].search.organisation.projectScale;
    				add_flush_callback(() => updating_value_4 = false);
    			}

    			multiselect4.$set(multiselect4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);
    			transition_in(multiselect3.$$.fragment, local);
    			transition_in(multiselect4.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div5_transition) div5_transition = create_bidirectional_transition(div5, slide, {}, true);
    				div5_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			transition_out(multiselect3.$$.fragment, local);
    			transition_out(multiselect4.$$.fragment, local);
    			if (!div5_transition) div5_transition = create_bidirectional_transition(div5, slide, {}, false);
    			div5_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			destroy_component(multiselect3);
    			destroy_component(multiselect4);
    			if (detaching && div5_transition) div5_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(191:8) {#if paneVisbility.byCharacteristics}",
    		ctx
    	});

    	return block;
    }

    // (197:20) {#each initiativeType.list as name}
    function create_each_block_4$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 197, 20, 9008);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4$1.name,
    		type: "each",
    		source: "(197:20) {#each initiativeType.list as name}",
    		ctx
    	});

    	return block;
    }

    // (195:16) <MultiSelect id = {initiativeType.name} bind:value={$ui.search.organisation.initiativeType} placeholder={initiativeType.placeholder} >
    function create_default_slot_4$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_4 = initiativeType.list;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4$1(get_each_context_4$1(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 195, 20, 8890);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*initiativeType*/ 0) {
    				each_value_4 = initiativeType.list;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4$1(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(195:16) <MultiSelect id = {initiativeType.name} bind:value={$ui.search.organisation.initiativeType} placeholder={initiativeType.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (206:20) {#each projectStage.list as name}
    function create_each_block_3$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 206, 20, 9548);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3$1.name,
    		type: "each",
    		source: "(206:20) {#each projectStage.list as name}",
    		ctx
    	});

    	return block;
    }

    // (204:16) <MultiSelect id = {projectStage.name} bind:value={$ui.search.organisation.projectStage} placeholder={projectStage.placeholder} >
    function create_default_slot_3$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_3 = projectStage.list;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 204, 20, 9432);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectStage*/ 0) {
    				each_value_3 = projectStage.list;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(204:16) <MultiSelect id = {projectStage.name} bind:value={$ui.search.organisation.projectStage} placeholder={projectStage.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (215:20) {#each projectClass.list as name}
    function create_each_block_2$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 215, 20, 10088);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2$1.name,
    		type: "each",
    		source: "(215:20) {#each projectClass.list as name}",
    		ctx
    	});

    	return block;
    }

    // (213:16) <MultiSelect id = {projectClass.name} bind:value={$ui.search.organisation.projectClass} placeholder={projectClass.placeholder} >
    function create_default_slot_2$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_2 = projectClass.list;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 213, 20, 9972);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectClass*/ 0) {
    				each_value_2 = projectClass.list;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(213:16) <MultiSelect id = {projectClass.name} bind:value={$ui.search.organisation.projectClass} placeholder={projectClass.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (224:20) {#each projectSize.list as name}
    function create_each_block_1$1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 224, 20, 10623);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(224:20) {#each projectSize.list as name}",
    		ctx
    	});

    	return block;
    }

    // (222:16) <MultiSelect id = {projectSize.name} bind:value={$ui.search.organisation.projectSize} placeholder={projectSize.placeholder} >
    function create_default_slot_1$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value_1 = projectSize.list;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 222, 20, 10508);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectSize*/ 0) {
    				each_value_1 = projectSize.list;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(222:16) <MultiSelect id = {projectSize.name} bind:value={$ui.search.organisation.projectSize} placeholder={projectSize.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (233:20) {#each projectScale.list as name}
    function create_each_block$4(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[20] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[20];
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 233, 20, 11163);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(233:20) {#each projectScale.list as name}",
    		ctx
    	});

    	return block;
    }

    // (231:16) <MultiSelect id = {projectScale.name} bind:value={$ui.search.organisation.projectScale} placeholder={projectScale.placeholder} >
    function create_default_slot$1(ctx) {
    	let option;
    	let t;
    	let each_1_anchor;
    	let each_value = projectScale.list;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    			option.disabled = true;
    			option.selected = true;
    			option.__value = "";
    			option.value = option.__value;
    			attr_dev(option, "class", "svelte-kelrrb");
    			add_location(option, file$n, 231, 20, 11047);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			insert_dev(target, t, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectScale*/ 0) {
    				each_value = projectScale.list;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$4(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    			if (detaching) detach_dev(t);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(231:16) <MultiSelect id = {projectScale.name} bind:value={$ui.search.organisation.projectScale} placeholder={projectScale.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (245:4) {#if noSearchParams > 0}
    function create_if_block$9(ctx) {
    	let div;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			div.textContent = "Clear the search parameters";
    			attr_dev(div, "class", "clear-search-container svelte-kelrrb");
    			add_location(div, file$n, 245, 8, 11514);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleClearSearch*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(245:4) {#if noSearchParams > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let section;
    	let div1;
    	let div0;
    	let t1;
    	let div4;
    	let div3;
    	let h30;
    	let t3;
    	let div2;
    	let t5;
    	let t6;
    	let div7;
    	let div6;
    	let h31;
    	let t8;
    	let div5;
    	let t10;
    	let t11;
    	let div10;
    	let div9;
    	let h32;
    	let t13;
    	let div8;
    	let t15;
    	let t16;
    	let div13;
    	let div12;
    	let h33;
    	let t18;
    	let div11;
    	let t20;
    	let t21;
    	let div14;
    	let button;
    	let t23;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*paneVisbility*/ ctx[1].byStakeholders && create_if_block_4$3(ctx);
    	let if_block1 = /*paneVisbility*/ ctx[1].byOutcomes && create_if_block_3$7(ctx);
    	let if_block2 = /*paneVisbility*/ ctx[1].byLocation && create_if_block_2$7(ctx);
    	let if_block3 = /*paneVisbility*/ ctx[1].byCharacteristics && create_if_block_1$7(ctx);
    	let if_block4 = /*noSearchParams*/ ctx[2] > 0 && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "← Close search filter";
    			t1 = space();
    			div4 = element("div");
    			div3 = element("div");
    			h30 = element("h3");
    			h30.textContent = "Stakeholder name";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "↓";
    			t5 = space();
    			if (if_block0) if_block0.c();
    			t6 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h31 = element("h3");
    			h31.textContent = "Waterway outcomes";
    			t8 = space();
    			div5 = element("div");
    			div5.textContent = "↓";
    			t10 = space();
    			if (if_block1) if_block1.c();
    			t11 = space();
    			div10 = element("div");
    			div9 = element("div");
    			h32 = element("h3");
    			h32.textContent = "Location of work";
    			t13 = space();
    			div8 = element("div");
    			div8.textContent = "↓";
    			t15 = space();
    			if (if_block2) if_block2.c();
    			t16 = space();
    			div13 = element("div");
    			div12 = element("div");
    			h33 = element("h3");
    			h33.textContent = "Project characteristics";
    			t18 = space();
    			div11 = element("div");
    			div11.textContent = "↓";
    			t20 = space();
    			if (if_block3) if_block3.c();
    			t21 = space();
    			div14 = element("div");
    			button = element("button");
    			button.textContent = "Search for stakeholders";
    			t23 = space();
    			if (if_block4) if_block4.c();
    			attr_dev(div0, "class", "close-button svelte-kelrrb");
    			add_location(div0, file$n, 60, 8, 2284);
    			attr_dev(div1, "class", "close-container svelte-kelrrb");
    			add_location(div1, file$n, 59, 4, 2246);
    			attr_dev(h30, "class", "svelte-kelrrb");
    			add_location(h30, file$n, 70, 12, 2656);
    			attr_dev(div2, "class", "toggle-icon down svelte-kelrrb");
    			add_location(div2, file$n, 71, 12, 2694);
    			attr_dev(div3, "id", "byStakeholders");
    			attr_dev(div3, "class", "collapse__header svelte-kelrrb");
    			attr_dev(div3, "type", "button");
    			toggle_class(div3, "selected", /*paneVisbility*/ ctx[1].byStakeholders);
    			add_location(div3, file$n, 68, 8, 2494);
    			attr_dev(div4, "class", "container svelte-kelrrb");
    			add_location(div4, file$n, 67, 4, 2460);
    			attr_dev(h31, "class", "svelte-kelrrb");
    			add_location(h31, file$n, 92, 12, 3647);
    			attr_dev(div5, "class", "toggle-icon down svelte-kelrrb");
    			add_location(div5, file$n, 93, 12, 3686);
    			attr_dev(div6, "id", "byOutcomes");
    			attr_dev(div6, "class", "collapse__header svelte-kelrrb");
    			attr_dev(div6, "type", "button");
    			toggle_class(div6, "selected", /*paneVisbility*/ ctx[1].byOutcomes);
    			add_location(div6, file$n, 90, 8, 3493);
    			attr_dev(div7, "class", "container svelte-kelrrb");
    			add_location(div7, file$n, 89, 4, 3459);
    			attr_dev(h32, "class", "svelte-kelrrb");
    			add_location(h32, file$n, 145, 12, 6316);
    			attr_dev(div8, "class", "toggle-icon down svelte-kelrrb");
    			add_location(div8, file$n, 146, 12, 6354);
    			attr_dev(div9, "id", "byLocation");
    			attr_dev(div9, "class", "collapse__header svelte-kelrrb");
    			attr_dev(div9, "type", "button");
    			toggle_class(div9, "selected", /*paneVisbility*/ ctx[1].byLocation);
    			add_location(div9, file$n, 143, 8, 6162);
    			attr_dev(div10, "class", "container svelte-kelrrb");
    			add_location(div10, file$n, 142, 4, 6128);
    			attr_dev(h33, "class", "svelte-kelrrb");
    			add_location(h33, file$n, 187, 12, 8388);
    			attr_dev(div11, "class", "toggle-icon down svelte-kelrrb");
    			add_location(div11, file$n, 188, 12, 8433);
    			attr_dev(div12, "id", "byCharacteristics");
    			attr_dev(div12, "class", "collapse__header svelte-kelrrb");
    			attr_dev(div12, "type", "button");
    			toggle_class(div12, "selected", /*paneVisbility*/ ctx[1].byCharacteristics);
    			add_location(div12, file$n, 185, 8, 8220);
    			attr_dev(div13, "class", "container svelte-kelrrb");
    			add_location(div13, file$n, 184, 4, 8186);
    			add_location(button, file$n, 242, 8, 11386);
    			attr_dev(div14, "class", "button-container svelte-kelrrb");
    			add_location(div14, file$n, 241, 4, 11345);
    			attr_dev(section, "class", "svelte-kelrrb");
    			add_location(section, file$n, 57, 0, 2127);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, div0);
    			append_dev(section, t1);
    			append_dev(section, div4);
    			append_dev(div4, div3);
    			append_dev(div3, h30);
    			append_dev(div3, t3);
    			append_dev(div3, div2);
    			append_dev(div4, t5);
    			if (if_block0) if_block0.m(div4, null);
    			append_dev(section, t6);
    			append_dev(section, div7);
    			append_dev(div7, div6);
    			append_dev(div6, h31);
    			append_dev(div6, t8);
    			append_dev(div6, div5);
    			append_dev(div7, t10);
    			if (if_block1) if_block1.m(div7, null);
    			append_dev(section, t11);
    			append_dev(section, div10);
    			append_dev(div10, div9);
    			append_dev(div9, h32);
    			append_dev(div9, t13);
    			append_dev(div9, div8);
    			append_dev(div10, t15);
    			if (if_block2) if_block2.m(div10, null);
    			append_dev(section, t16);
    			append_dev(section, div13);
    			append_dev(div13, div12);
    			append_dev(div12, h33);
    			append_dev(div12, t18);
    			append_dev(div12, div11);
    			append_dev(div13, t20);
    			if (if_block3) if_block3.m(div13, null);
    			append_dev(section, t21);
    			append_dev(section, div14);
    			append_dev(div14, button);
    			append_dev(section, t23);
    			if (if_block4) if_block4.m(section, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*handleClose*/ ctx[5], false, false, false),
    					listen_dev(div3, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div6, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div9, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div12, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(button, "click", prevent_default(/*handleSubmit*/ ctx[4]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div3, "selected", /*paneVisbility*/ ctx[1].byStakeholders);
    			}

    			if (/*paneVisbility*/ ctx[1].byStakeholders) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_4$3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div4, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div6, "selected", /*paneVisbility*/ ctx[1].byOutcomes);
    			}

    			if (/*paneVisbility*/ ctx[1].byOutcomes) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_3$7(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div7, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div9, "selected", /*paneVisbility*/ ctx[1].byLocation);
    			}

    			if (/*paneVisbility*/ ctx[1].byLocation) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_2$7(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div10, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 2) {
    				toggle_class(div12, "selected", /*paneVisbility*/ ctx[1].byCharacteristics);
    			}

    			if (/*paneVisbility*/ ctx[1].byCharacteristics) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 2) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_1$7(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div13, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (/*noSearchParams*/ ctx[2] > 0) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block$9(ctx);
    					if_block4.c();
    					if_block4.m(section, null);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { duration: 800, x: -100 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { duration: 200, x: -100 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let noSearchParams;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('StakeholderSearch', slots, []);

    	const paneVisbility = {
    		byOutcomes: false,
    		byLocation: false,
    		byCharacteristics: false,
    		byStakeholders: false
    	};

    	function togglePane() {
    		Object.keys(paneVisbility).map(key => {
    			if (this.id !== key) {
    				$$invalidate(1, paneVisbility[key] = false, paneVisbility);
    			}
    		});

    		$$invalidate(1, paneVisbility[this.id] = !paneVisbility[this.id], paneVisbility);
    		console.log(`Toggling ${this.id} vis to `, paneVisbility[this.id]);
    	}

    	function handleSubmit() {
    		set_store_value(ui, $ui.byPage.connect.main = 'list', $ui);
    		set_store_value(ui, $ui.byPage.connect.stakeholderSearch.isMade = true, $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    		console.log($ui.search);
    	}

    	function handleClose() {
    		set_store_value(ui, $ui.byPage.connect.main = 'list', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}

    	function handleClearSearch() {
    		console.log('Clearing the search');
    		set_store_value(ui, $ui.search.organisation = {}, $ui);

    		for (const key of Object.keys(paneVisbility)) {
    			$$invalidate(1, paneVisbility[key] = false, paneVisbility);
    		}

    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}
    	const writable_props = [];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$9.warn(`<StakeholderSearch> was created with unknown prop '${key}'`);
    	});

    	function multiselect_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.partnerOrg, value)) {
    			$ui.search.organisation.partnerOrg = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.keyValues, value)) {
    			$ui.search.organisation.keyValues = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.conditions, value)) {
    			$ui.search.organisation.conditions = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.performanceObjectivesGroup, value)) {
    			$ui.search.organisation.performanceObjectivesGroup = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect3_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.performanceObjectivesTheme, value)) {
    			$ui.search.project.performanceObjectivesTheme = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.catchment, value)) {
    			$ui.search.organisation.catchment = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.subcatchment, value)) {
    			$ui.search.organisation.subcatchment = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.locations, value)) {
    			$ui.search.organisation.locations = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.initiativeType, value)) {
    			$ui.search.organisation.initiativeType = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.projectStage, value)) {
    			$ui.search.organisation.projectStage = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.projectClass, value)) {
    			$ui.search.organisation.projectClass = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect3_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.projectSize, value)) {
    			$ui.search.organisation.projectSize = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect4_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.organisation.projectScale, value)) {
    			$ui.search.organisation.projectScale = value;
    			ui.set($ui);
    		}
    	}

    	$$self.$capture_state = () => ({
    		MultiSelect,
    		slide,
    		fly,
    		ui,
    		database,
    		slugify,
    		capitaliseFirst,
    		keyValues,
    		conditions,
    		performanceObjectivesGroup,
    		performanceObjectivesTheme,
    		catchments,
    		subcatchments,
    		locations,
    		leadOrg,
    		leadOrgType,
    		partnerOrg,
    		initiativeType,
    		projectStage,
    		projectClass,
    		projectSize,
    		projectScale,
    		hwsSchema,
    		projectSchema,
    		locationMap,
    		locationTree,
    		paneVisbility,
    		togglePane,
    		handleSubmit,
    		handleClose,
    		handleClearSearch,
    		noSearchParams,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('noSearchParams' in $$props) $$invalidate(2, noSearchParams = $$props.noSearchParams);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$ui*/ 1) {
    			// Keep count of search param number
    			$$invalidate(2, noSearchParams = typeof Object.values($ui.search.organisation) === 'undefined'
    			? 0
    			: Object.values($ui.search.organisation).flat().length);
    		}
    	};

    	return [
    		$ui,
    		paneVisbility,
    		noSearchParams,
    		togglePane,
    		handleSubmit,
    		handleClose,
    		handleClearSearch,
    		multiselect_value_binding,
    		multiselect0_value_binding,
    		multiselect1_value_binding,
    		multiselect2_value_binding,
    		multiselect3_value_binding,
    		multiselect0_value_binding_1,
    		multiselect1_value_binding_1,
    		multiselect2_value_binding_1,
    		multiselect0_value_binding_2,
    		multiselect1_value_binding_2,
    		multiselect2_value_binding_2,
    		multiselect3_value_binding_1,
    		multiselect4_value_binding
    	];
    }

    class StakeholderSearch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "StakeholderSearch",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    /* src/pages/Connect.svelte generated by Svelte v3.46.4 */
    const file$m = "src/pages/Connect.svelte";

    // (34:55) 
    function create_if_block_3$6(ctx) {
    	let projectpage;
    	let current;
    	projectpage = new ProjectPage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectpage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectpage, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectpage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectpage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectpage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(34:55) ",
    		ctx
    	});

    	return block;
    }

    // (32:59) 
    function create_if_block_2$6(ctx) {
    	let stakeholderpage;
    	let current;
    	stakeholderpage = new StakeholderPage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(stakeholderpage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stakeholderpage, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stakeholderpage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stakeholderpage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stakeholderpage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(32:59) ",
    		ctx
    	});

    	return block;
    }

    // (20:4) {#if !$ui.byPage.connect.overlay}
    function create_if_block$8(ctx) {
    	let titleblock;
    	let t0;
    	let infopane;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	infopane = new InfoPane$1({ $$inline: true });
    	const if_block_creators = [create_if_block_1$6, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.connect.main === 'list') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			create_component(titleblock.$$.fragment);
    			t0 = space();
    			create_component(infopane.$$.fragment);
    			t1 = space();
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(titleblock, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(infopane, target, anchor);
    			insert_dev(target, t1, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(infopane.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(infopane.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(titleblock, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(infopane, detaching);
    			if (detaching) detach_dev(t1);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(20:4) {#if !$ui.byPage.connect.overlay}",
    		ctx
    	});

    	return block;
    }

    // (27:8) {:else}
    function create_else_block$3(ctx) {
    	let stakeholdersearch;
    	let current;
    	stakeholdersearch = new StakeholderSearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(stakeholdersearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stakeholdersearch, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stakeholdersearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stakeholdersearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stakeholdersearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(27:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (24:8) {#if $ui.byPage.connect.main === 'list'}
    function create_if_block_1$6(ctx) {
    	let stakeholderlist;
    	let current;
    	stakeholderlist = new StakeholderList({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(stakeholderlist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(stakeholderlist, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(stakeholderlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(stakeholderlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(stakeholderlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(24:8) {#if $ui.byPage.connect.main === 'list'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let section;
    	let current_block_type_index;
    	let if_block;
    	let section_intro;
    	let current;
    	const if_block_creators = [create_if_block$8, create_if_block_2$6, create_if_block_3$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.connect.overlay) return 0;
    		if (/*$ui*/ ctx[0].byPage.connect.overlay === 'stakeholder') return 1;
    		if (/*$ui*/ ctx[0].byPage.connect.overlay === 'project') return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block) if_block.c();
    			attr_dev(section, "class", "page connect");
    			add_location(section, file$m, 17, 0, 859);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fade, { duration: 1500 });
    					section_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Connect', slots, []);
    	const titleData = getPageInfo($ui.page)[0].TitleBlock;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Connect> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		TitleBlock: TitleBlock$2,
    		StakeholderList,
    		StakeholderPage,
    		ProjectPage,
    		InfoPane: InfoPane$1,
    		StakeholderSearch,
    		ui,
    		getPageInfo,
    		titleData,
    		$ui
    	});

    	return [$ui, titleData];
    }

    class Connect extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Connect",
    			options,
    			id: create_fragment$n.name
    		});
    	}
    }

    /* src/components/byPage/share/infoPane/InfoEmptySearch.svelte generated by Svelte v3.46.4 */
    const file$l = "src/components/byPage/share/infoPane/InfoEmptySearch.svelte";

    function create_fragment$m(ctx) {
    	let h2;
    	let t0;
    	let html_tag;
    	let raw0_value = componentContent.share.existing.instructionHeader + "";
    	let t1;
    	let html_tag_1;
    	let raw1_value = componentContent.share.existing.instructionDesc + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			h2 = element("h2");
    			t0 = text$1("— ");
    			html_tag = new HtmlTag();
    			t1 = space();
    			html_tag_1 = new HtmlTag();
    			html_anchor = empty();
    			html_tag.a = null;
    			add_location(h2, file$l, 6, 0, 173);
    			html_tag_1.a = html_anchor;
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h2, anchor);
    			append_dev(h2, t0);
    			html_tag.m(raw0_value, h2);
    			insert_dev(target, t1, anchor);
    			html_tag_1.m(raw1_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h2);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag_1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoEmptySearch', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoEmptySearch> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ componentContent });
    	return [];
    }

    class InfoEmptySearch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoEmptySearch",
    			options,
    			id: create_fragment$m.name
    		});
    	}
    }

    /* src/components/byPage/share/infoPane/InfoSearchResults.svelte generated by Svelte v3.46.4 */

    const { console: console_1$8 } = globals;
    const file$k = "src/components/byPage/share/infoPane/InfoSearchResults.svelte";

    function create_fragment$l(ctx) {
    	let div0;
    	let h2;
    	let raw0_value = componentContent.share.existing.searchResultsHeader + "";
    	let t0;
    	let html_tag;
    	let raw1_value = componentContent.share.existing.searchResultsDesc + "";
    	let t1;
    	let hr;
    	let t2;
    	let div4;
    	let div3;
    	let div1;
    	let button0;
    	let t4;
    	let div2;
    	let button1;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			h2 = element("h2");
    			t0 = space();
    			html_tag = new HtmlTag();
    			t1 = space();
    			hr = element("hr");
    			t2 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			button0 = element("button");
    			button0.textContent = "Clear search";
    			t4 = space();
    			div2 = element("div");
    			button1 = element("button");
    			button1.textContent = "Search again";
    			add_location(h2, file$k, 21, 4, 623);
    			html_tag.a = null;
    			add_location(div0, file$k, 20, 0, 613);
    			add_location(hr, file$k, 24, 0, 761);
    			add_location(button0, file$k, 29, 12, 959);
    			attr_dev(div1, "class", "button-container svelte-a54kls");
    			add_location(div1, file$k, 28, 8, 915);
    			add_location(button1, file$k, 32, 12, 1079);
    			attr_dev(div2, "class", "button-container svelte-a54kls");
    			add_location(div2, file$k, 31, 8, 1035);
    			attr_dev(div3, "class", "two-button-container svelte-a54kls");
    			add_location(div3, file$k, 27, 4, 870);
    			attr_dev(div4, "class", "search-options");
    			add_location(div4, file$k, 25, 0, 766);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, h2);
    			h2.innerHTML = raw0_value;
    			append_dev(div0, t0);
    			html_tag.m(raw1_value, div0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, button0);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, button1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*clearSearch*/ ctx[0], false, false, false),
    					listen_dev(button1, "click", /*openSearch*/ ctx[1], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(2, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoSearchResults', slots, []);

    	function clearSearch() {
    		set_store_value(ui, $ui.byPage.share.main = 'list', $ui);
    		set_store_value(ui, $ui.byPage.share.projectSearch.isMade = false, $ui);
    		console.log('Search cleared');
    	}

    	function openSearch() {
    		set_store_value(ui, $ui.byPage.share.main = 'search', $ui);
    		set_store_value(ui, $ui.byPage.share.projectSearch.isMade = false, $ui);
    		console.log('Opening search cleared');
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$8.warn(`<InfoSearchResults> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		componentContent,
    		ui,
    		clearSearch,
    		openSearch,
    		$ui
    	});

    	return [clearSearch, openSearch];
    }

    class InfoSearchResults extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoSearchResults",
    			options,
    			id: create_fragment$l.name
    		});
    	}
    }

    /* src/components/byPage/share/ShareNew.svelte generated by Svelte v3.46.4 */

    const { console: console_1$7 } = globals;
    const file$j = "src/components/byPage/share/ShareNew.svelte";

    // (33:8) {:else}
    function create_else_block$2(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Login to share your project →";
    			add_location(button, file$j, 33, 8, 1183);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*handleLoginRedirect*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(33:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (31:8) {#if $user.isRegistered}
    function create_if_block$7(ctx) {
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			button.textContent = "Contribute a project";
    			add_location(button, file$j, 31, 8, 1095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*openNewProject*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(31:8) {#if $user.isRegistered}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let section;
    	let dividerzagged20px0;
    	let t0;
    	let div0;
    	let h2;
    	let t1;
    	let html_tag;
    	let raw0_value = componentContent.share.new.aboutHeader + "";
    	let t2;
    	let html_tag_1;
    	let raw1_value = componentContent.share.new.aboutDesc + "";
    	let t3;
    	let div1;
    	let t4;
    	let div2;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });

    	function select_block_type(ctx, dirty) {
    		if (/*$user*/ ctx[0].isRegistered) return create_if_block$7;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);
    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			h2 = element("h2");
    			t1 = text$1("— ");
    			html_tag = new HtmlTag();
    			t2 = space();
    			html_tag_1 = new HtmlTag();
    			t3 = space();
    			div1 = element("div");
    			if_block.c();
    			t4 = space();
    			div2 = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			html_tag.a = null;
    			add_location(h2, file$j, 25, 8, 885);
    			html_tag_1.a = null;
    			attr_dev(div0, "class", "content-container");
    			add_location(div0, file$j, 24, 4, 843);
    			attr_dev(div1, "class", "button-container svelte-1770h8f");
    			add_location(div1, file$j, 29, 4, 1021);
    			attr_dev(div2, "class", "float-bottom svelte-1770h8f");
    			add_location(div2, file$j, 37, 4, 1296);
    			attr_dev(section, "class", "svelte-1770h8f");
    			add_location(section, file$j, 22, 0, 730);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px0, section, null);
    			append_dev(section, t0);
    			append_dev(section, div0);
    			append_dev(div0, h2);
    			append_dev(h2, t1);
    			html_tag.m(raw0_value, h2);
    			append_dev(div0, t2);
    			html_tag_1.m(raw1_value, div0);
    			append_dev(section, t3);
    			append_dev(section, div1);
    			if_block.m(div1, null);
    			append_dev(section, t4);
    			append_dev(section, div2);
    			mount_component(dividerzagged20px1, div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: -500, duration: 800 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: -500, duration: 300 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);
    			if_block.d();
    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $ui;
    	let $user;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(3, $ui = $$value));
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(0, $user = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ShareNew', slots, []);

    	function handleLoginRedirect() {
    		set_store_value(ui, $ui.page = 'join', $ui);
    	}

    	function openNewProject() {
    		console.log('Open the project entry');
    		set_store_value(ui, $ui.byPage.share.overlay = 'newProject', $ui);
    		console.log($ui);
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$7.warn(`<ShareNew> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		InfoEmptySearch,
    		InfoSearchResults,
    		DividerZagged20px,
    		user,
    		ui,
    		componentContent,
    		handleLoginRedirect,
    		openNewProject,
    		$ui,
    		$user
    	});

    	return [$user, handleLoginRedirect, openNewProject];
    }

    class ShareNew extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ShareNew",
    			options,
    			id: create_fragment$k.name
    		});
    	}
    }

    /* src/components/byPage/share/ShareExisting.svelte generated by Svelte v3.46.4 */

    const { console: console_1$6 } = globals;
    const file$i = "src/components/byPage/share/ShareExisting.svelte";

    function create_fragment$j(ctx) {
    	let section;
    	let dividerzagged20px0;
    	let t0;
    	let h2;
    	let t1;
    	let html_tag;
    	let raw0_value = componentContent.share.existing.aboutHeader + "";
    	let t2;
    	let html_tag_1;
    	let raw1_value = componentContent.share.existing.aboutDesc + "";
    	let t3;
    	let div0;
    	let button;
    	let t5;
    	let div1;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			h2 = element("h2");
    			t1 = text$1("— ");
    			html_tag = new HtmlTag();
    			t2 = space();
    			html_tag_1 = new HtmlTag();
    			t3 = space();
    			div0 = element("div");
    			button = element("button");
    			button.textContent = "Search for projects →";
    			t5 = space();
    			div1 = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			html_tag.a = null;
    			add_location(h2, file$i, 20, 4, 749);
    			html_tag_1.a = t3;
    			add_location(button, file$i, 24, 8, 918);
    			attr_dev(div0, "class", "button-container svelte-vxf8pr");
    			add_location(div0, file$i, 23, 4, 877);
    			attr_dev(div1, "class", "float-bottom svelte-vxf8pr");
    			add_location(div1, file$i, 26, 4, 999);
    			attr_dev(section, "class", "svelte-vxf8pr");
    			add_location(section, file$i, 18, 0, 639);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px0, section, null);
    			append_dev(section, t0);
    			append_dev(section, h2);
    			append_dev(h2, t1);
    			html_tag.m(raw0_value, h2);
    			append_dev(section, t2);
    			html_tag_1.m(raw1_value, section);
    			append_dev(section, t3);
    			append_dev(section, div0);
    			append_dev(div0, button);
    			append_dev(section, t5);
    			append_dev(section, div1);
    			mount_component(dividerzagged20px1, div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*showSearch*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: 500, duration: 800 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: 500, duration: 300 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);
    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(1, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ShareExisting', slots, []);

    	function showSearch() {
    		console.log('Show the search page');
    		set_store_value(ui, $ui.byPage.share.overlay = 'projectSearch', $ui);
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<ShareExisting> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		InfoEmptySearch,
    		InfoSearchResults,
    		DividerZagged20px,
    		ui,
    		componentContent,
    		showSearch,
    		$ui
    	});

    	return [showSearch];
    }

    class ShareExisting extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ShareExisting",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* src/components/byPage/share/ShareImage.svelte generated by Svelte v3.46.4 */
    const file$h = "src/components/byPage/share/ShareImage.svelte";

    function create_fragment$i(ctx) {
    	let section;
    	let img;
    	let img_src_value;
    	let section_intro;
    	let section_outro;
    	let current;

    	const block = {
    		c: function create() {
    			section = element("section");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = getRandomStockSplashImgPath())) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "tba");
    			attr_dev(img, "class", "svelte-4gm3qx");
    			add_location(img, file$h, 8, 4, 301);
    			attr_dev(section, "class", "svelte-4gm3qx");
    			add_location(section, file$h, 7, 0, 216);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, img);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { y: 500, duration: 800 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { y: 500, duration: 300 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ShareImage', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ShareImage> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fly, getRandomStockSplashImgPath });
    	return [];
    }

    class ShareImage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ShareImage",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* src/components/byPage/share/ExistingSearch.svelte generated by Svelte v3.46.4 */
    const file$g = "src/components/byPage/share/ExistingSearch.svelte";

    // (22:51) 
    function create_if_block_3$5(ctx) {
    	let infosearchresults;
    	let current;
    	infosearchresults = new InfoSearchResults({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infosearchresults.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infosearchresults, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infosearchresults.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infosearchresults.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infosearchresults, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(22:51) ",
    		ctx
    	});

    	return block;
    }

    // (20:8) {#if $ui.byPage.share.main === 'search'}
    function create_if_block_2$5(ctx) {
    	let infoemptysearch;
    	let current;
    	infoemptysearch = new InfoEmptySearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(infoemptysearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(infoemptysearch, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(infoemptysearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(infoemptysearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(infoemptysearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(20:8) {#if $ui.byPage.share.main === 'search'}",
    		ctx
    	});

    	return block;
    }

    // (33:51) 
    function create_if_block_1$5(ctx) {
    	let projectlist;
    	let current;
    	projectlist = new ProjectList({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectlist.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectlist, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectlist, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(33:51) ",
    		ctx
    	});

    	return block;
    }

    // (31:8) {#if $ui.byPage.share.main === 'search'}
    function create_if_block$6(ctx) {
    	let projectsearch;
    	let current;
    	projectsearch = new ProjectSearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectsearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectsearch, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectsearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectsearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectsearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(31:8) {#if $ui.byPage.share.main === 'search'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let section;
    	let div1;
    	let dividerzagged20px0;
    	let t0;
    	let current_block_type_index;
    	let if_block0;
    	let t1;
    	let div0;
    	let dividerzagged20px1;
    	let t2;
    	let div2;
    	let current_block_type_index_1;
    	let if_block1;
    	let section_intro;
    	let section_outro;
    	let current;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	const if_block_creators = [create_if_block_2$5, create_if_block_3$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.share.main === 'search') return 0;
    		if (/*$ui*/ ctx[0].byPage.share.main === 'list') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });
    	const if_block_creators_1 = [create_if_block$6, create_if_block_1$5];
    	const if_blocks_1 = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.share.main === 'search') return 0;
    		if (/*$ui*/ ctx[0].byPage.share.main === 'list') return 1;
    		return -1;
    	}

    	if (~(current_block_type_index_1 = select_block_type_1(ctx))) {
    		if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			div0 = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			t2 = space();
    			div2 = element("div");
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "float-bottom svelte-iwffhf");
    			add_location(div0, file$g, 24, 8, 1036);
    			attr_dev(div1, "class", "info-pane svelte-iwffhf");
    			add_location(div1, file$g, 17, 4, 794);
    			attr_dev(div2, "class", "search-pane");
    			add_location(div2, file$g, 29, 4, 1129);
    			attr_dev(section, "id", "search-for-feedback");
    			attr_dev(section, "class", "svelte-iwffhf");
    			add_location(section, file$g, 16, 0, 680);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			mount_component(dividerzagged20px0, div1, null);
    			append_dev(div1, t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			mount_component(dividerzagged20px1, div0, null);
    			append_dev(section, t2);
    			append_dev(section, div2);

    			if (~current_block_type_index_1) {
    				if_blocks_1[current_block_type_index_1].m(div2, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block0) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block0 = if_blocks[current_block_type_index];

    					if (!if_block0) {
    						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block0.c();
    					}

    					transition_in(if_block0, 1);
    					if_block0.m(div1, t1);
    				} else {
    					if_block0 = null;
    				}
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_1(ctx);

    			if (current_block_type_index_1 !== previous_block_index_1) {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    						if_blocks_1[previous_block_index_1] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index_1) {
    					if_block1 = if_blocks_1[current_block_type_index_1];

    					if (!if_block1) {
    						if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    						if_block1.c();
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(div2, null);
    				} else {
    					if_block1 = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(dividerzagged20px1.$$.fragment, local);
    			transition_in(if_block1);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { y: -200, duration: 800 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			transition_out(if_block1);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { y: -200, duration: 100 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			destroy_component(dividerzagged20px1);

    			if (~current_block_type_index_1) {
    				if_blocks_1[current_block_type_index_1].d();
    			}

    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ExistingSearch', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ExistingSearch> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		DividerZagged20px,
    		ProjectList,
    		ProjectSearch,
    		InfoEmptySearch,
    		InfoSearchResults,
    		fly,
    		user,
    		ui,
    		componentContent,
    		$ui
    	});

    	return [$ui];
    }

    class ExistingSearch extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ExistingSearch",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* src/components/shared/newProject/MultiLinkInput.svelte generated by Svelte v3.46.4 */
    const file$f = "src/components/shared/newProject/MultiLinkInput.svelte";

    function create_fragment$g(ctx) {
    	let li;
    	let div0;
    	let label0;
    	let t0;
    	let html_tag;
    	let raw0_value = /*index*/ ctx[1] + 1 + "";
    	let label0_for_value;
    	let t1;
    	let input0;
    	let input0_name_value;
    	let t2;
    	let div1;
    	let label1;
    	let t3;
    	let label1_for_value;
    	let t4;
    	let input1;
    	let input1_name_value;
    	let t5;
    	let div2;
    	let label2;
    	let t6;
    	let label2_for_value;
    	let t7;
    	let input2;
    	let input2_name_value;
    	let t8;
    	let div5;
    	let div3;
    	let t9;
    	let html_tag_1;
    	let raw1_value = /*index*/ ctx[1] + 1 + "";
    	let t10;
    	let div4;
    	let svg;
    	let path;
    	let li_id_value;
    	let li_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			li = element("li");
    			div0 = element("div");
    			label0 = element("label");
    			t0 = text$1("Name of resource #");
    			html_tag = new HtmlTag();
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			div1 = element("div");
    			label1 = element("label");
    			t3 = text$1("Website URL");
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div2 = element("div");
    			label2 = element("label");
    			t6 = text$1("Description");
    			t7 = space();
    			input2 = element("input");
    			t8 = space();
    			div5 = element("div");
    			div3 = element("div");
    			t9 = text$1("Remove resource #");
    			html_tag_1 = new HtmlTag();
    			t10 = space();
    			div4 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			html_tag.a = null;
    			attr_dev(label0, "for", label0_for_value = "link-name-" + (/*index*/ ctx[1] + 1));
    			attr_dev(label0, "class", "svelte-1f6vypo");
    			add_location(label0, file$f, 20, 8, 650);
    			attr_dev(input0, "name", input0_name_value = "link-name-" + (/*index*/ ctx[1] + 1));
    			add_location(input0, file$f, 21, 8, 734);
    			attr_dev(div0, "class", "input-container svelte-1f6vypo");
    			add_location(div0, file$f, 19, 4, 610);
    			attr_dev(label1, "for", label1_for_value = "link-url-" + (/*index*/ ctx[1] + 1));
    			attr_dev(label1, "class", "svelte-1f6vypo");
    			add_location(label1, file$f, 24, 8, 850);
    			attr_dev(input1, "name", input1_name_value = "link-url-" + (/*index*/ ctx[1] + 1));
    			add_location(input1, file$f, 25, 8, 911);
    			attr_dev(div1, "class", "input-container svelte-1f6vypo");
    			add_location(div1, file$f, 23, 4, 810);
    			attr_dev(label2, "for", label2_for_value = "link-desc-" + (/*index*/ ctx[1] + 1));
    			attr_dev(label2, "class", "svelte-1f6vypo");
    			add_location(label2, file$f, 28, 8, 1025);
    			attr_dev(input2, "name", input2_name_value = "link-desc-" + (/*index*/ ctx[1] + 1));
    			add_location(input2, file$f, 29, 8, 1087);
    			attr_dev(div2, "class", "input-container svelte-1f6vypo");
    			add_location(div2, file$f, 27, 4, 985);
    			html_tag_1.a = null;
    			add_location(div3, file$f, 32, 8, 1232);
    			attr_dev(path, "d", iconClearPath$2);
    			attr_dev(path, "class", "svelte-1f6vypo");
    			add_location(path, file$f, 35, 16, 1442);
    			attr_dev(svg, "class", "icon-clear svelte-1f6vypo");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "18");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$f, 34, 12, 1323);
    			attr_dev(div4, "class", "token-remove svelte-1f6vypo");
    			add_location(div4, file$f, 33, 8, 1284);
    			attr_dev(div5, "class", "remove-container svelte-1f6vypo");
    			add_location(div5, file$f, 31, 4, 1170);
    			attr_dev(li, "id", li_id_value = "link-container-" + (/*index*/ ctx[1] + 1));
    			attr_dev(li, "class", "svelte-1f6vypo");
    			add_location(li, file$f, 18, 0, 552);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div0);
    			append_dev(div0, label0);
    			append_dev(label0, t0);
    			html_tag.m(raw0_value, label0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*item*/ ctx[0].name);
    			append_dev(li, t2);
    			append_dev(li, div1);
    			append_dev(div1, label1);
    			append_dev(label1, t3);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			set_input_value(input1, /*item*/ ctx[0].url);
    			append_dev(li, t5);
    			append_dev(li, div2);
    			append_dev(div2, label2);
    			append_dev(label2, t6);
    			append_dev(div2, t7);
    			append_dev(div2, input2);
    			set_input_value(input2, /*item*/ ctx[0].description);
    			append_dev(li, t8);
    			append_dev(li, div5);
    			append_dev(div5, div3);
    			append_dev(div3, t9);
    			html_tag_1.m(raw1_value, div3);
    			append_dev(div5, t10);
    			append_dev(div5, div4);
    			append_dev(div4, svg);
    			append_dev(svg, path);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[3]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[5]),
    					listen_dev(div5, "click", /*deleteItem*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*index*/ 2) && raw0_value !== (raw0_value = /*index*/ ctx[1] + 1 + "")) html_tag.p(raw0_value);

    			if (!current || dirty & /*index*/ 2 && label0_for_value !== (label0_for_value = "link-name-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(label0, "for", label0_for_value);
    			}

    			if (!current || dirty & /*index*/ 2 && input0_name_value !== (input0_name_value = "link-name-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(input0, "name", input0_name_value);
    			}

    			if (dirty & /*item*/ 1 && input0.value !== /*item*/ ctx[0].name) {
    				set_input_value(input0, /*item*/ ctx[0].name);
    			}

    			if (!current || dirty & /*index*/ 2 && label1_for_value !== (label1_for_value = "link-url-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(label1, "for", label1_for_value);
    			}

    			if (!current || dirty & /*index*/ 2 && input1_name_value !== (input1_name_value = "link-url-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(input1, "name", input1_name_value);
    			}

    			if (dirty & /*item*/ 1 && input1.value !== /*item*/ ctx[0].url) {
    				set_input_value(input1, /*item*/ ctx[0].url);
    			}

    			if (!current || dirty & /*index*/ 2 && label2_for_value !== (label2_for_value = "link-desc-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(label2, "for", label2_for_value);
    			}

    			if (!current || dirty & /*index*/ 2 && input2_name_value !== (input2_name_value = "link-desc-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(input2, "name", input2_name_value);
    			}

    			if (dirty & /*item*/ 1 && input2.value !== /*item*/ ctx[0].description) {
    				set_input_value(input2, /*item*/ ctx[0].description);
    			}

    			if ((!current || dirty & /*index*/ 2) && raw1_value !== (raw1_value = /*index*/ ctx[1] + 1 + "")) html_tag_1.p(raw1_value);

    			if (!current || dirty & /*index*/ 2 && li_id_value !== (li_id_value = "link-container-" + (/*index*/ ctx[1] + 1))) {
    				attr_dev(li, "id", li_id_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!li_transition) li_transition = create_bidirectional_transition(li, slide, {}, true);
    				li_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!li_transition) li_transition = create_bidirectional_transition(li, slide, {}, false);
    			li_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (detaching && li_transition) li_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const iconClearPath$2 = 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z';

    function instance$g($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(6, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MultiLinkInput', slots, []);
    	let { item } = $$props;
    	let { index } = $$props;

    	// Add and remove items for array inputs
    	function deleteItem() {
    		set_store_value(ui, $ui.newProject.links = $ui.newProject.links.filter((d, i) => i !== index), $ui);
    	}
    	const writable_props = ['item', 'index'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MultiLinkInput> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		item.name = this.value;
    		$$invalidate(0, item);
    	}

    	function input1_input_handler() {
    		item.url = this.value;
    		$$invalidate(0, item);
    	}

    	function input2_input_handler() {
    		item.description = this.value;
    		$$invalidate(0, item);
    	}

    	$$self.$$set = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		ui,
    		item,
    		index,
    		iconClearPath: iconClearPath$2,
    		deleteItem,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('item' in $$props) $$invalidate(0, item = $$props.item);
    		if ('index' in $$props) $$invalidate(1, index = $$props.index);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		item,
    		index,
    		deleteItem,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler
    	];
    }

    class MultiLinkInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { item: 0, index: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiLinkInput",
    			options,
    			id: create_fragment$g.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*item*/ ctx[0] === undefined && !('item' in props)) {
    			console.warn("<MultiLinkInput> was created without expected prop 'item'");
    		}

    		if (/*index*/ ctx[1] === undefined && !('index' in props)) {
    			console.warn("<MultiLinkInput> was created without expected prop 'index'");
    		}
    	}

    	get item() {
    		throw new Error("<MultiLinkInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set item(value) {
    		throw new Error("<MultiLinkInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<MultiLinkInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<MultiLinkInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/MultiInput.svelte generated by Svelte v3.46.4 */
    const file$e = "src/components/shared/MultiInput.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[7] = list[i];
    	child_ctx[8] = list;
    	child_ctx[9] = i;
    	return child_ctx;
    }

    // (23:4) {#each store as item, index}
    function create_each_block$3(ctx) {
    	let li;
    	let label_1;
    	let html_tag;
    	let raw_value = /*index*/ ctx[9] + 1 + "";
    	let t0;
    	let label_1_for_value;
    	let t1;
    	let div1;
    	let input;
    	let input_name_value;
    	let t2;
    	let div0;
    	let svg;
    	let path;
    	let t3;
    	let li_id_value;
    	let li_transition;
    	let current;
    	let mounted;
    	let dispose;

    	function input_input_handler() {
    		/*input_input_handler*/ ctx[5].call(input, /*each_value*/ ctx[8], /*index*/ ctx[9]);
    	}

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*index*/ ctx[9]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			label_1 = element("label");
    			html_tag = new HtmlTag();
    			t0 = text$1(".");
    			t1 = space();
    			div1 = element("div");
    			input = element("input");
    			t2 = space();
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t3 = space();
    			html_tag.a = t0;
    			attr_dev(label_1, "for", label_1_for_value = "" + (/*type*/ ctx[2] + "-" + (/*index*/ ctx[9] + 1)));
    			attr_dev(label_1, "class", "svelte-i2ok5b");
    			add_location(label_1, file$e, 24, 8, 657);
    			attr_dev(input, "name", input_name_value = "" + (/*type*/ ctx[2] + "-" + (/*index*/ ctx[9] + 1)));
    			attr_dev(input, "class", "svelte-i2ok5b");
    			add_location(input, file$e, 26, 12, 765);
    			attr_dev(path, "d", iconClearPath$1);
    			attr_dev(path, "class", "svelte-i2ok5b");
    			add_location(path, file$e, 29, 20, 1038);
    			attr_dev(svg, "class", "icon-clear svelte-i2ok5b");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "18");
    			attr_dev(svg, "height", "18");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$e, 28, 16, 915);
    			attr_dev(div0, "class", "remove-row-button svelte-i2ok5b");
    			add_location(div0, file$e, 27, 12, 830);
    			attr_dev(div1, "class", "input-container svelte-i2ok5b");
    			add_location(div1, file$e, 25, 8, 721);
    			attr_dev(li, "id", li_id_value = "" + (/*type*/ ctx[2] + "-" + (/*index*/ ctx[9] + 1) + "-container"));
    			add_location(li, file$e, 23, 4, 593);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, label_1);
    			html_tag.m(raw_value, label_1);
    			append_dev(label_1, t0);
    			append_dev(li, t1);
    			append_dev(li, div1);
    			append_dev(div1, input);
    			set_input_value(input, /*item*/ ctx[7]);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(li, t3);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", input_input_handler),
    					listen_dev(div0, "click", click_handler, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty & /*type*/ 4 && label_1_for_value !== (label_1_for_value = "" + (/*type*/ ctx[2] + "-" + (/*index*/ ctx[9] + 1)))) {
    				attr_dev(label_1, "for", label_1_for_value);
    			}

    			if (!current || dirty & /*type*/ 4 && input_name_value !== (input_name_value = "" + (/*type*/ ctx[2] + "-" + (/*index*/ ctx[9] + 1)))) {
    				attr_dev(input, "name", input_name_value);
    			}

    			if (dirty & /*store*/ 1 && input.value !== /*item*/ ctx[7]) {
    				set_input_value(input, /*item*/ ctx[7]);
    			}

    			if (!current || dirty & /*type*/ 4 && li_id_value !== (li_id_value = "" + (/*type*/ ctx[2] + "-" + (/*index*/ ctx[9] + 1) + "-container"))) {
    				attr_dev(li, "id", li_id_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!li_transition) li_transition = create_bidirectional_transition(li, slide, {}, true);
    				li_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!li_transition) li_transition = create_bidirectional_transition(li, slide, {}, false);
    			li_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (detaching && li_transition) li_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(23:4) {#each store as item, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$f(ctx) {
    	let ul;
    	let t0;
    	let div1;
    	let div0;
    	let t1;
    	let html_tag;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*store*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			t1 = text$1("⊕ ");
    			html_tag = new HtmlTag();
    			add_location(ul, file$e, 21, 0, 551);
    			html_tag.a = null;
    			attr_dev(div0, "class", "svelte-i2ok5b");
    			add_location(div0, file$e, 37, 4, 1184);
    			attr_dev(div1, "class", "add-container svelte-i2ok5b");
    			add_location(div1, file$e, 36, 0, 1151);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, t1);
    			html_tag.m(/*label*/ ctx[1], div0);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*addItem*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*type, deleteItem, iconClearPath, store*/ 13) {
    				each_value = /*store*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (!current || dirty & /*label*/ 2) html_tag.p(/*label*/ ctx[1]);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const iconClearPath$1 = 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z';

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MultiInput', slots, []);
    	let { store } = $$props;
    	let { label } = $$props;
    	let { type } = $$props;

    	// Add and remove items for array inputs
    	function deleteItem(index) {
    		$$invalidate(0, store = store.filter((d, i) => i !== index));
    	}

    	function addItem() {
    		$$invalidate(0, store = [...store, '']);
    	}
    	const writable_props = ['store', 'label', 'type'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<MultiInput> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler(each_value, index) {
    		each_value[index] = this.value;
    		$$invalidate(0, store);
    	}

    	const click_handler = index => deleteItem(index);

    	$$self.$$set = $$props => {
    		if ('store' in $$props) $$invalidate(0, store = $$props.store);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('type' in $$props) $$invalidate(2, type = $$props.type);
    	};

    	$$self.$capture_state = () => ({
    		slide,
    		store,
    		label,
    		type,
    		iconClearPath: iconClearPath$1,
    		deleteItem,
    		addItem
    	});

    	$$self.$inject_state = $$props => {
    		if ('store' in $$props) $$invalidate(0, store = $$props.store);
    		if ('label' in $$props) $$invalidate(1, label = $$props.label);
    		if ('type' in $$props) $$invalidate(2, type = $$props.type);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [store, label, type, deleteItem, addItem, input_input_handler, click_handler];
    }

    class MultiInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { store: 0, label: 1, type: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MultiInput",
    			options,
    			id: create_fragment$f.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*store*/ ctx[0] === undefined && !('store' in props)) {
    			console.warn("<MultiInput> was created without expected prop 'store'");
    		}

    		if (/*label*/ ctx[1] === undefined && !('label' in props)) {
    			console.warn("<MultiInput> was created without expected prop 'label'");
    		}

    		if (/*type*/ ctx[2] === undefined && !('type' in props)) {
    			console.warn("<MultiInput> was created without expected prop 'type'");
    		}
    	}

    	get store() {
    		throw new Error("<MultiInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set store(value) {
    		throw new Error("<MultiInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<MultiInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<MultiInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<MultiInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<MultiInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/shared/newProject/NewProject.svelte generated by Svelte v3.46.4 */

    const { Object: Object_1, console: console_1$5 } = globals;

    const file$d = "src/components/shared/newProject/NewProject.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[29] = list[i];
    	child_ctx[31] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_10(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_11(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_12(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_13(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_14(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    function get_each_context_15(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[32] = list[i];
    	return child_ctx;
    }

    // (104:12) {#if paneVisbility.description}
    function create_if_block_6$1(ctx) {
    	let ul;
    	let li0;
    	let label0;
    	let t1;
    	let textarea0;
    	let t2;
    	let li1;
    	let label1;
    	let t4;
    	let textarea1;
    	let ul_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			li0 = element("li");
    			label0 = element("label");
    			label0.textContent = "Detailed description";
    			t1 = space();
    			textarea0 = element("textarea");
    			t2 = space();
    			li1 = element("li");
    			label1 = element("label");
    			label1.textContent = "Project history";
    			t4 = space();
    			textarea1 = element("textarea");
    			attr_dev(label0, "for", "shortDescription");
    			attr_dev(label0, "class", "svelte-1fl1fxj");
    			add_location(label0, file$d, 106, 20, 4168);
    			attr_dev(textarea0, "name", "shortDescription");
    			attr_dev(textarea0, "rows", "20");
    			add_location(textarea0, file$d, 107, 20, 4248);
    			add_location(li0, file$d, 105, 16, 4143);
    			attr_dev(label1, "for", "projectHistory");
    			attr_dev(label1, "class", "svelte-1fl1fxj");
    			add_location(label1, file$d, 110, 20, 4418);
    			attr_dev(textarea1, "name", "projectHistory");
    			attr_dev(textarea1, "rows", "20");
    			add_location(textarea1, file$d, 111, 20, 4491);
    			add_location(li1, file$d, 109, 16, 4393);
    			attr_dev(ul, "class", "collapse__body svelte-1fl1fxj");
    			add_location(ul, file$d, 104, 12, 4059);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);
    			append_dev(ul, li0);
    			append_dev(li0, label0);
    			append_dev(li0, t1);
    			append_dev(li0, textarea0);
    			set_input_value(textarea0, /*projectStore*/ ctx[1].about.longDescription);
    			append_dev(ul, t2);
    			append_dev(ul, li1);
    			append_dev(li1, label1);
    			append_dev(li1, t4);
    			append_dev(li1, textarea1);
    			set_input_value(textarea1, /*projectStore*/ ctx[1].about.history);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(textarea0, "input", /*textarea0_input_handler*/ ctx[10]),
    					listen_dev(textarea1, "input", /*textarea1_input_handler*/ ctx[11])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*projectStore*/ 2) {
    				set_input_value(textarea0, /*projectStore*/ ctx[1].about.longDescription);
    			}

    			if (dirty[0] & /*projectStore*/ 2) {
    				set_input_value(textarea1, /*projectStore*/ ctx[1].about.history);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!ul_transition) ul_transition = create_bidirectional_transition(ul, slide, { duration: 800 }, true);
    				ul_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!ul_transition) ul_transition = create_bidirectional_transition(ul, slide, { duration: 800 }, false);
    			ul_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			if (detaching && ul_transition) ul_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(104:12) {#if paneVisbility.description}",
    		ctx
    	});

    	return block;
    }

    // (126:12) {#if paneVisbility.hwsOutcomes}
    function create_if_block_5$2(ctx) {
    	let div8;
    	let div1;
    	let div0;
    	let raw0_value = keyValues.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div3;
    	let div2;
    	let raw1_value = conditions.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div5;
    	let div4;
    	let raw2_value = performanceObjectivesGroup.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let t5;
    	let div7;
    	let div6;
    	let raw3_value = performanceObjectivesTheme.label + "";
    	let t6;
    	let multiselect3;
    	let updating_value_3;
    	let div8_transition;
    	let current;

    	function multiselect0_value_binding(value) {
    		/*multiselect0_value_binding*/ ctx[12](value);
    	}

    	let multiselect0_props = {
    		id: keyValues.name,
    		placeholder: keyValues.placeholder,
    		$$slots: { default: [create_default_slot_14] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].hws.values !== void 0) {
    		multiselect0_props.value = /*projectStore*/ ctx[1].hws.values;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding));

    	function multiselect1_value_binding(value) {
    		/*multiselect1_value_binding*/ ctx[13](value);
    	}

    	let multiselect1_props = {
    		id: conditions.name,
    		placeholder: conditions.placeholder,
    		$$slots: { default: [create_default_slot_13] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].hws.conditions !== void 0) {
    		multiselect1_props.value = /*projectStore*/ ctx[1].hws.conditions;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding));

    	function multiselect2_value_binding(value) {
    		/*multiselect2_value_binding*/ ctx[14](value);
    	}

    	let multiselect2_props = {
    		id: performanceObjectivesGroup.name,
    		placeholder: performanceObjectivesGroup.placeholder,
    		$$slots: { default: [create_default_slot_12] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].hws.poGroup !== void 0) {
    		multiselect2_props.value = /*projectStore*/ ctx[1].hws.poGroup;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding));

    	function multiselect3_value_binding(value) {
    		/*multiselect3_value_binding*/ ctx[15](value);
    	}

    	let multiselect3_props = {
    		id: performanceObjectivesTheme.name,
    		placeholder: performanceObjectivesTheme.placeholder,
    		$$slots: { default: [create_default_slot_11] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].hws.poTheme !== void 0) {
    		multiselect3_props.value = /*projectStore*/ ctx[1].hws.poTheme;
    	}

    	multiselect3 = new MultiSelect({
    			props: multiselect3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect3, 'value', multiselect3_value_binding));

    	const block = {
    		c: function create() {
    			div8 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			t6 = space();
    			create_component(multiselect3.$$.fragment);
    			attr_dev(div0, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div0, file$d, 128, 20, 5240);
    			attr_dev(div1, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div1, "z-index", "21");
    			add_location(div1, file$d, 127, 16, 5162);
    			attr_dev(div2, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div2, file$d, 137, 20, 5738);
    			attr_dev(div3, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div3, "z-index", "20");
    			add_location(div3, file$d, 136, 16, 5659);
    			attr_dev(div4, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div4, file$d, 146, 20, 6242);
    			attr_dev(div5, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div5, "z-index", "19");
    			add_location(div5, file$d, 145, 16, 6164);
    			attr_dev(div6, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div6, file$d, 155, 20, 6808);
    			attr_dev(div7, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div7, "z-index", "18");
    			add_location(div7, file$d, 154, 16, 6730);
    			attr_dev(div8, "class", "collapse__body svelte-1fl1fxj");
    			add_location(div8, file$d, 126, 12, 5097);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div8, anchor);
    			append_dev(div8, div1);
    			append_dev(div1, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(div1, t0);
    			mount_component(multiselect0, div1, null);
    			append_dev(div8, t1);
    			append_dev(div8, div3);
    			append_dev(div3, div2);
    			div2.innerHTML = raw1_value;
    			append_dev(div3, t2);
    			mount_component(multiselect1, div3, null);
    			append_dev(div8, t3);
    			append_dev(div8, div5);
    			append_dev(div5, div4);
    			div4.innerHTML = raw2_value;
    			append_dev(div5, t4);
    			mount_component(multiselect2, div5, null);
    			append_dev(div8, t5);
    			append_dev(div8, div7);
    			append_dev(div7, div6);
    			div6.innerHTML = raw3_value;
    			append_dev(div7, t6);
    			mount_component(multiselect3, div7, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*projectStore*/ 2) {
    				updating_value = true;
    				multiselect0_changes.value = /*projectStore*/ ctx[1].hws.values;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*projectStore*/ 2) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*projectStore*/ ctx[1].hws.conditions;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*projectStore*/ 2) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*projectStore*/ ctx[1].hws.poGroup;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    			const multiselect3_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty[0] & /*projectStore*/ 2) {
    				updating_value_3 = true;
    				multiselect3_changes.value = /*projectStore*/ ctx[1].hws.poTheme;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			multiselect3.$set(multiselect3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);
    			transition_in(multiselect3.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div8_transition) div8_transition = create_bidirectional_transition(div8, slide, {}, true);
    				div8_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			transition_out(multiselect3.$$.fragment, local);
    			if (!div8_transition) div8_transition = create_bidirectional_transition(div8, slide, {}, false);
    			div8_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div8);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			destroy_component(multiselect3);
    			if (detaching && div8_transition) div8_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(126:12) {#if paneVisbility.hwsOutcomes}",
    		ctx
    	});

    	return block;
    }

    // (131:24) {#each keyValues.list as name}
    function create_each_block_15(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 131, 24, 5509);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_15.name,
    		type: "each",
    		source: "(131:24) {#each keyValues.list as name}",
    		ctx
    	});

    	return block;
    }

    // (130:20) <MultiSelect id={keyValues.name}  bind:value={projectStore.hws.values} placeholder={keyValues.placeholder} >
    function create_default_slot_14(ctx) {
    	let each_1_anchor;
    	let each_value_15 = keyValues.list;
    	validate_each_argument(each_value_15);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_15.length; i += 1) {
    		each_blocks[i] = create_each_block_15(get_each_context_15(ctx, each_value_15, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*keyValues*/ 0) {
    				each_value_15 = keyValues.list;
    				validate_each_argument(each_value_15);
    				let i;

    				for (i = 0; i < each_value_15.length; i += 1) {
    					const child_ctx = get_each_context_15(ctx, each_value_15, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_15(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_15.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14.name,
    		type: "slot",
    		source: "(130:20) <MultiSelect id={keyValues.name}  bind:value={projectStore.hws.values} placeholder={keyValues.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (140:24) {#each conditions.list as name}
    function create_each_block_14(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 140, 24, 6014);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_14.name,
    		type: "each",
    		source: "(140:24) {#each conditions.list as name}",
    		ctx
    	});

    	return block;
    }

    // (139:20) <MultiSelect id={conditions.name} bind:value={projectStore.hws.conditions} placeholder={conditions.placeholder} >
    function create_default_slot_13(ctx) {
    	let each_1_anchor;
    	let each_value_14 = conditions.list;
    	validate_each_argument(each_value_14);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_14.length; i += 1) {
    		each_blocks[i] = create_each_block_14(get_each_context_14(ctx, each_value_14, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*conditions*/ 0) {
    				each_value_14 = conditions.list;
    				validate_each_argument(each_value_14);
    				let i;

    				for (i = 0; i < each_value_14.length; i += 1) {
    					const child_ctx = get_each_context_14(ctx, each_value_14, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_14(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_14.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13.name,
    		type: "slot",
    		source: "(139:20) <MultiSelect id={conditions.name} bind:value={projectStore.hws.conditions} placeholder={conditions.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (149:24) {#each performanceObjectivesGroup.list as name}
    function create_each_block_13(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 149, 24, 6580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_13.name,
    		type: "each",
    		source: "(149:24) {#each performanceObjectivesGroup.list as name}",
    		ctx
    	});

    	return block;
    }

    // (148:20) <MultiSelect id={performanceObjectivesGroup.name} bind:value={projectStore.hws.poGroup}  placeholder={performanceObjectivesGroup.placeholder} >
    function create_default_slot_12(ctx) {
    	let each_1_anchor;
    	let each_value_13 = performanceObjectivesGroup.list;
    	validate_each_argument(each_value_13);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_13.length; i += 1) {
    		each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_13, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*performanceObjectivesGroup*/ 0) {
    				each_value_13 = performanceObjectivesGroup.list;
    				validate_each_argument(each_value_13);
    				let i;

    				for (i = 0; i < each_value_13.length; i += 1) {
    					const child_ctx = get_each_context_13(ctx, each_value_13, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_13(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_13.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12.name,
    		type: "slot",
    		source: "(148:20) <MultiSelect id={performanceObjectivesGroup.name} bind:value={projectStore.hws.poGroup}  placeholder={performanceObjectivesGroup.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (158:24) {#each performanceObjectivesTheme.list as name}
    function create_each_block_12(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 158, 24, 7146);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_12.name,
    		type: "each",
    		source: "(158:24) {#each performanceObjectivesTheme.list as name}",
    		ctx
    	});

    	return block;
    }

    // (157:20) <MultiSelect id={performanceObjectivesTheme.name} bind:value={projectStore.hws.poTheme}  placeholder={performanceObjectivesTheme.placeholder} >
    function create_default_slot_11(ctx) {
    	let each_1_anchor;
    	let each_value_12 = performanceObjectivesTheme.list;
    	validate_each_argument(each_value_12);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_12.length; i += 1) {
    		each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_12, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*performanceObjectivesTheme*/ 0) {
    				each_value_12 = performanceObjectivesTheme.list;
    				validate_each_argument(each_value_12);
    				let i;

    				for (i = 0; i < each_value_12.length; i += 1) {
    					const child_ctx = get_each_context_12(ctx, each_value_12, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_12(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_12.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11.name,
    		type: "slot",
    		source: "(157:20) <MultiSelect id={performanceObjectivesTheme.name} bind:value={projectStore.hws.poTheme}  placeholder={performanceObjectivesTheme.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (174:12) {#if paneVisbility.location}
    function create_if_block_4$2(ctx) {
    	let div6;
    	let div1;
    	let div0;
    	let raw0_value = catchments.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div3;
    	let div2;
    	let raw1_value = subcatchments.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div5;
    	let div4;
    	let raw2_value = locations.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let div6_transition;
    	let current;

    	function multiselect0_value_binding_1(value) {
    		/*multiselect0_value_binding_1*/ ctx[16](value);
    	}

    	let multiselect0_props = {
    		id: catchments.name,
    		placeholder: catchments.placeholder,
    		$$slots: { default: [create_default_slot_10] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].location.catchments !== void 0) {
    		multiselect0_props.value = /*projectStore*/ ctx[1].location.catchments;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_1));

    	function multiselect1_value_binding_1(value) {
    		/*multiselect1_value_binding_1*/ ctx[17](value);
    	}

    	let multiselect1_props = {
    		id: subcatchments.name,
    		placeholder: subcatchments.placeholder,
    		$$slots: { default: [create_default_slot_9] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].location.subCatchments !== void 0) {
    		multiselect1_props.value = /*projectStore*/ ctx[1].location.subCatchments;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_1));

    	function multiselect2_value_binding_1(value) {
    		/*multiselect2_value_binding_1*/ ctx[18](value);
    	}

    	let multiselect2_props = {
    		id: locations.name,
    		placeholder: locations.placeholder,
    		$$slots: { default: [create_default_slot_8] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].location.locations !== void 0) {
    		multiselect2_props.value = /*projectStore*/ ctx[1].location.locations;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_1));

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			attr_dev(div0, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div0, file$d, 176, 20, 7890);
    			attr_dev(div1, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div1, "z-index", "17");
    			add_location(div1, file$d, 175, 16, 7812);
    			attr_dev(div2, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div2, file$d, 185, 20, 8414);
    			attr_dev(div3, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div3, "z-index", "16");
    			add_location(div3, file$d, 184, 16, 8336);
    			attr_dev(div4, "class", "label centre_v svelte-1fl1fxj");
    			add_location(div4, file$d, 194, 20, 8953);
    			attr_dev(div5, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div5, "z-index", "15");
    			add_location(div5, file$d, 193, 16, 8875);
    			attr_dev(div6, "class", "collapse__body svelte-1fl1fxj");
    			add_location(div6, file$d, 174, 12, 7747);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div1);
    			append_dev(div1, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(div1, t0);
    			mount_component(multiselect0, div1, null);
    			append_dev(div6, t1);
    			append_dev(div6, div3);
    			append_dev(div3, div2);
    			div2.innerHTML = raw1_value;
    			append_dev(div3, t2);
    			mount_component(multiselect1, div3, null);
    			append_dev(div6, t3);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			div4.innerHTML = raw2_value;
    			append_dev(div5, t4);
    			mount_component(multiselect2, div5, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*projectStore*/ 2) {
    				updating_value = true;
    				multiselect0_changes.value = /*projectStore*/ ctx[1].location.catchments;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*projectStore*/ 2) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*projectStore*/ ctx[1].location.subCatchments;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*projectStore*/ 2) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*projectStore*/ ctx[1].location.locations;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div6_transition) div6_transition = create_bidirectional_transition(div6, slide, {}, true);
    				div6_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			if (!div6_transition) div6_transition = create_bidirectional_transition(div6, slide, {}, false);
    			div6_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			if (detaching && div6_transition) div6_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(174:12) {#if paneVisbility.location}",
    		ctx
    	});

    	return block;
    }

    // (179:24) {#each catchments.list as name}
    function create_each_block_11(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 179, 24, 8170);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_11.name,
    		type: "each",
    		source: "(179:24) {#each catchments.list as name}",
    		ctx
    	});

    	return block;
    }

    // (178:20) <MultiSelect id={catchments.name} bind:value={projectStore.location.catchments} placeholder={catchments.placeholder} >
    function create_default_slot_10(ctx) {
    	let each_1_anchor;
    	let each_value_11 = catchments.list;
    	validate_each_argument(each_value_11);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_11.length; i += 1) {
    		each_blocks[i] = create_each_block_11(get_each_context_11(ctx, each_value_11, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*catchments*/ 0) {
    				each_value_11 = catchments.list;
    				validate_each_argument(each_value_11);
    				let i;

    				for (i = 0; i < each_value_11.length; i += 1) {
    					const child_ctx = get_each_context_11(ctx, each_value_11, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_11(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_11.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10.name,
    		type: "slot",
    		source: "(178:20) <MultiSelect id={catchments.name} bind:value={projectStore.location.catchments} placeholder={catchments.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (188:24) {#each subcatchments.list as name}
    function create_each_block_10(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 188, 24, 8709);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_10.name,
    		type: "each",
    		source: "(188:24) {#each subcatchments.list as name}",
    		ctx
    	});

    	return block;
    }

    // (187:20) <MultiSelect id={subcatchments.name} bind:value={projectStore.location.subCatchments} placeholder={subcatchments.placeholder} >
    function create_default_slot_9(ctx) {
    	let each_1_anchor;
    	let each_value_10 = subcatchments.list;
    	validate_each_argument(each_value_10);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_10.length; i += 1) {
    		each_blocks[i] = create_each_block_10(get_each_context_10(ctx, each_value_10, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*subcatchments*/ 0) {
    				each_value_10 = subcatchments.list;
    				validate_each_argument(each_value_10);
    				let i;

    				for (i = 0; i < each_value_10.length; i += 1) {
    					const child_ctx = get_each_context_10(ctx, each_value_10, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_10(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_10.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(187:20) <MultiSelect id={subcatchments.name} bind:value={projectStore.location.subCatchments} placeholder={subcatchments.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (197:24) {#each locations.list as name}
    function create_each_block_9(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 197, 24, 9228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_9.name,
    		type: "each",
    		source: "(197:24) {#each locations.list as name}",
    		ctx
    	});

    	return block;
    }

    // (196:20) <MultiSelect id={locations.name}  bind:value={projectStore.location.locations} placeholder={locations.placeholder}>
    function create_default_slot_8(ctx) {
    	let each_1_anchor;
    	let each_value_9 = locations.list;
    	validate_each_argument(each_value_9);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_9.length; i += 1) {
    		each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*locations*/ 0) {
    				each_value_9 = locations.list;
    				validate_each_argument(each_value_9);
    				let i;

    				for (i = 0; i < each_value_9.length; i += 1) {
    					const child_ctx = get_each_context_9(ctx, each_value_9, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_9.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(196:20) <MultiSelect id={locations.name}  bind:value={projectStore.location.locations} placeholder={locations.placeholder}>",
    		ctx
    	});

    	return block;
    }

    // (213:12) {#if paneVisbility.characteristics}
    function create_if_block_3$4(ctx) {
    	let div10;
    	let div1;
    	let div0;
    	let raw0_value = initiativeType.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div3;
    	let div2;
    	let raw1_value = projectStage.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div5;
    	let div4;
    	let raw2_value = projectClass.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let t5;
    	let div7;
    	let div6;
    	let raw3_value = projectSize.label + "";
    	let t6;
    	let multiselect3;
    	let updating_value_3;
    	let t7;
    	let div9;
    	let div8;
    	let raw4_value = projectScale.label + "";
    	let t8;
    	let multiselect4;
    	let updating_value_4;
    	let div10_transition;
    	let current;

    	function multiselect0_value_binding_2(value) {
    		/*multiselect0_value_binding_2*/ ctx[19](value);
    	}

    	let multiselect0_props = {
    		id: initiativeType.name,
    		placeholder: initiativeType.placeholder,
    		$$slots: { default: [create_default_slot_7] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].meta.type !== void 0) {
    		multiselect0_props.value = /*projectStore*/ ctx[1].meta.type;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_2));

    	function multiselect1_value_binding_2(value) {
    		/*multiselect1_value_binding_2*/ ctx[20](value);
    	}

    	let multiselect1_props = {
    		id: projectStage.name,
    		placeholder: projectStage.placeholder,
    		$$slots: { default: [create_default_slot_6] },
    		$$scope: { ctx }
    	};

    	if (/*projectStore*/ ctx[1].status.stage !== void 0) {
    		multiselect1_props.value = /*projectStore*/ ctx[1].status.stage;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_2));

    	function multiselect2_value_binding_2(value) {
    		/*multiselect2_value_binding_2*/ ctx[21](value);
    	}

    	let multiselect2_props = {
    		id: projectClass.name,
    		placeholder: projectClass.placeholder,
    		$$slots: { default: [create_default_slot_5] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[2].search.project.projectClass !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[2].search.project.projectClass;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_2));

    	function multiselect3_value_binding_1(value) {
    		/*multiselect3_value_binding_1*/ ctx[22](value);
    	}

    	let multiselect3_props = {
    		id: projectSize.name,
    		placeholder: projectSize.placeholder,
    		$$slots: { default: [create_default_slot_4] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[2].search.project.projectSize !== void 0) {
    		multiselect3_props.value = /*$ui*/ ctx[2].search.project.projectSize;
    	}

    	multiselect3 = new MultiSelect({
    			props: multiselect3_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect3, 'value', multiselect3_value_binding_1));

    	function multiselect4_value_binding(value) {
    		/*multiselect4_value_binding*/ ctx[23](value);
    	}

    	let multiselect4_props = {
    		id: projectScale.name,
    		placeholder: projectScale.placeholder,
    		$$slots: { default: [create_default_slot_3] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[2].search.project.projectScale !== void 0) {
    		multiselect4_props.value = /*$ui*/ ctx[2].search.project.projectScale;
    	}

    	multiselect4 = new MultiSelect({
    			props: multiselect4_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect4, 'value', multiselect4_value_binding));

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			t5 = space();
    			div7 = element("div");
    			div6 = element("div");
    			t6 = space();
    			create_component(multiselect3.$$.fragment);
    			t7 = space();
    			div9 = element("div");
    			div8 = element("div");
    			t8 = space();
    			create_component(multiselect4.$$.fragment);
    			attr_dev(div0, "class", "label svelte-1fl1fxj");
    			add_location(div0, file$d, 215, 20, 10022);
    			attr_dev(div1, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div1, "z-index", "14");
    			add_location(div1, file$d, 214, 16, 9944);
    			attr_dev(div2, "class", "label svelte-1fl1fxj");
    			add_location(div2, file$d, 223, 20, 10544);
    			attr_dev(div3, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div3, "z-index", "13");
    			add_location(div3, file$d, 222, 16, 10466);
    			attr_dev(div4, "class", "label svelte-1fl1fxj");
    			add_location(div4, file$d, 231, 20, 11061);
    			attr_dev(div5, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div5, "z-index", "12");
    			add_location(div5, file$d, 230, 16, 10983);
    			attr_dev(div6, "class", "label svelte-1fl1fxj");
    			add_location(div6, file$d, 239, 20, 11584);
    			attr_dev(div7, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div7, "z-index", "11");
    			add_location(div7, file$d, 238, 16, 11506);
    			attr_dev(div8, "class", "label svelte-1fl1fxj");
    			add_location(div8, file$d, 247, 20, 12102);
    			attr_dev(div9, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div9, "z-index", "10");
    			add_location(div9, file$d, 246, 16, 12024);
    			attr_dev(div10, "class", "collapse__body svelte-1fl1fxj");
    			add_location(div10, file$d, 213, 12, 9879);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div1);
    			append_dev(div1, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(div1, t0);
    			mount_component(multiselect0, div1, null);
    			append_dev(div10, t1);
    			append_dev(div10, div3);
    			append_dev(div3, div2);
    			div2.innerHTML = raw1_value;
    			append_dev(div3, t2);
    			mount_component(multiselect1, div3, null);
    			append_dev(div10, t3);
    			append_dev(div10, div5);
    			append_dev(div5, div4);
    			div4.innerHTML = raw2_value;
    			append_dev(div5, t4);
    			mount_component(multiselect2, div5, null);
    			append_dev(div10, t5);
    			append_dev(div10, div7);
    			append_dev(div7, div6);
    			div6.innerHTML = raw3_value;
    			append_dev(div7, t6);
    			mount_component(multiselect3, div7, null);
    			append_dev(div10, t7);
    			append_dev(div10, div9);
    			append_dev(div9, div8);
    			div8.innerHTML = raw4_value;
    			append_dev(div9, t8);
    			mount_component(multiselect4, div9, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*projectStore*/ 2) {
    				updating_value = true;
    				multiselect0_changes.value = /*projectStore*/ ctx[1].meta.type;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*projectStore*/ 2) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*projectStore*/ ctx[1].status.stage;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 4) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[2].search.project.projectClass;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    			const multiselect3_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect3_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_3 && dirty[0] & /*$ui*/ 4) {
    				updating_value_3 = true;
    				multiselect3_changes.value = /*$ui*/ ctx[2].search.project.projectSize;
    				add_flush_callback(() => updating_value_3 = false);
    			}

    			multiselect3.$set(multiselect3_changes);
    			const multiselect4_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect4_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_4 && dirty[0] & /*$ui*/ 4) {
    				updating_value_4 = true;
    				multiselect4_changes.value = /*$ui*/ ctx[2].search.project.projectScale;
    				add_flush_callback(() => updating_value_4 = false);
    			}

    			multiselect4.$set(multiselect4_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);
    			transition_in(multiselect3.$$.fragment, local);
    			transition_in(multiselect4.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div10_transition) div10_transition = create_bidirectional_transition(div10, slide, {}, true);
    				div10_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			transition_out(multiselect3.$$.fragment, local);
    			transition_out(multiselect4.$$.fragment, local);
    			if (!div10_transition) div10_transition = create_bidirectional_transition(div10, slide, {}, false);
    			div10_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			destroy_component(multiselect3);
    			destroy_component(multiselect4);
    			if (detaching && div10_transition) div10_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(213:12) {#if paneVisbility.characteristics}",
    		ctx
    	});

    	return block;
    }

    // (218:24) {#each initiativeType.list as name}
    function create_each_block_8(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 218, 24, 10301);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8.name,
    		type: "each",
    		source: "(218:24) {#each initiativeType.list as name}",
    		ctx
    	});

    	return block;
    }

    // (217:20) <MultiSelect id = {initiativeType.name} bind:value={projectStore.meta.type} placeholder={initiativeType.placeholder} >
    function create_default_slot_7(ctx) {
    	let each_1_anchor;
    	let each_value_8 = initiativeType.list;
    	validate_each_argument(each_value_8);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*initiativeType*/ 0) {
    				each_value_8 = initiativeType.list;
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8(ctx, each_value_8, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_8.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(217:20) <MultiSelect id = {initiativeType.name} bind:value={projectStore.meta.type} placeholder={initiativeType.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (226:24) {#each projectStage.list as name}
    function create_each_block_7(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 226, 24, 10818);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7.name,
    		type: "each",
    		source: "(226:24) {#each projectStage.list as name}",
    		ctx
    	});

    	return block;
    }

    // (225:20) <MultiSelect id = {projectStage.name} bind:value={projectStore.status.stage} placeholder={projectStage.placeholder} >
    function create_default_slot_6(ctx) {
    	let each_1_anchor;
    	let each_value_7 = projectStage.list;
    	validate_each_argument(each_value_7);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		each_blocks[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectStage*/ 0) {
    				each_value_7 = projectStage.list;
    				validate_each_argument(each_value_7);
    				let i;

    				for (i = 0; i < each_value_7.length; i += 1) {
    					const child_ctx = get_each_context_7(ctx, each_value_7, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_7(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_7.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(225:20) <MultiSelect id = {projectStage.name} bind:value={projectStore.status.stage} placeholder={projectStage.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (234:24) {#each projectClass.list as name}
    function create_each_block_6(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 234, 24, 11341);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(234:24) {#each projectClass.list as name}",
    		ctx
    	});

    	return block;
    }

    // (233:20) <MultiSelect id = {projectClass.name} bind:value={$ui.search.project.projectClass} placeholder={projectClass.placeholder} >
    function create_default_slot_5(ctx) {
    	let each_1_anchor;
    	let each_value_6 = projectClass.list;
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectClass*/ 0) {
    				each_value_6 = projectClass.list;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_6(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_6.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(233:20) <MultiSelect id = {projectClass.name} bind:value={$ui.search.project.projectClass} placeholder={projectClass.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (242:24) {#each projectSize.list as name}
    function create_each_block_5(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 242, 24, 11859);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(242:24) {#each projectSize.list as name}",
    		ctx
    	});

    	return block;
    }

    // (241:20) <MultiSelect id = {projectSize.name} bind:value={$ui.search.project.projectSize} placeholder={projectSize.placeholder} >
    function create_default_slot_4(ctx) {
    	let each_1_anchor;
    	let each_value_5 = projectSize.list;
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectSize*/ 0) {
    				each_value_5 = projectSize.list;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(241:20) <MultiSelect id = {projectSize.name} bind:value={$ui.search.project.projectSize} placeholder={projectSize.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (250:24) {#each projectScale.list as name}
    function create_each_block_4(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 250, 24, 12382);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(250:24) {#each projectScale.list as name}",
    		ctx
    	});

    	return block;
    }

    // (249:20) <MultiSelect id = {projectScale.name} bind:value={$ui.search.project.projectScale} placeholder={projectScale.placeholder} >
    function create_default_slot_3(ctx) {
    	let each_1_anchor;
    	let each_value_4 = projectScale.list;
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*projectScale*/ 0) {
    				each_value_4 = projectScale.list;
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(249:20) <MultiSelect id = {projectScale.name} bind:value={$ui.search.project.projectScale} placeholder={projectScale.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (266:12) {#if paneVisbility.stakeholders}
    function create_if_block_2$4(ctx) {
    	let div6;
    	let div1;
    	let div0;
    	let raw0_value = leadOrg.label + "";
    	let t0;
    	let multiselect0;
    	let updating_value;
    	let t1;
    	let div3;
    	let div2;
    	let raw1_value = leadOrgType.label + "";
    	let t2;
    	let multiselect1;
    	let updating_value_1;
    	let t3;
    	let div5;
    	let div4;
    	let raw2_value = partnerOrg.label + "";
    	let t4;
    	let multiselect2;
    	let updating_value_2;
    	let div6_transition;
    	let current;

    	function multiselect0_value_binding_3(value) {
    		/*multiselect0_value_binding_3*/ ctx[24](value);
    	}

    	let multiselect0_props = {
    		id: leadOrg.name,
    		placeholder: leadOrg.placeholder,
    		$$slots: { default: [create_default_slot_2] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[2].search.project.leadOrg !== void 0) {
    		multiselect0_props.value = /*$ui*/ ctx[2].search.project.leadOrg;
    	}

    	multiselect0 = new MultiSelect({
    			props: multiselect0_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect0, 'value', multiselect0_value_binding_3));

    	function multiselect1_value_binding_3(value) {
    		/*multiselect1_value_binding_3*/ ctx[25](value);
    	}

    	let multiselect1_props = {
    		id: leadOrgType.name,
    		placeholder: leadOrgType.placeholder,
    		$$slots: { default: [create_default_slot_1] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[2].search.project.leadOrgType !== void 0) {
    		multiselect1_props.value = /*$ui*/ ctx[2].search.project.leadOrgType;
    	}

    	multiselect1 = new MultiSelect({
    			props: multiselect1_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect1, 'value', multiselect1_value_binding_3));

    	function multiselect2_value_binding_3(value) {
    		/*multiselect2_value_binding_3*/ ctx[26](value);
    	}

    	let multiselect2_props = {
    		id: partnerOrg.name,
    		placeholder: partnerOrg.placeholder,
    		$$slots: { default: [create_default_slot] },
    		$$scope: { ctx }
    	};

    	if (/*$ui*/ ctx[2].search.project.partnerOrg !== void 0) {
    		multiselect2_props.value = /*$ui*/ ctx[2].search.project.partnerOrg;
    	}

    	multiselect2 = new MultiSelect({
    			props: multiselect2_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(multiselect2, 'value', multiselect2_value_binding_3));

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			create_component(multiselect0.$$.fragment);
    			t1 = space();
    			div3 = element("div");
    			div2 = element("div");
    			t2 = space();
    			create_component(multiselect1.$$.fragment);
    			t3 = space();
    			div5 = element("div");
    			div4 = element("div");
    			t4 = space();
    			create_component(multiselect2.$$.fragment);
    			attr_dev(div0, "class", "label svelte-1fl1fxj");
    			add_location(div0, file$d, 268, 20, 13152);
    			attr_dev(div1, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div1, "z-index", "9");
    			add_location(div1, file$d, 267, 16, 13075);
    			attr_dev(div2, "class", "label svelte-1fl1fxj");
    			add_location(div2, file$d, 276, 20, 13649);
    			attr_dev(div3, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div3, "z-index", "8");
    			add_location(div3, file$d, 275, 16, 13572);
    			attr_dev(div4, "class", "label svelte-1fl1fxj");
    			add_location(div4, file$d, 284, 20, 14166);
    			attr_dev(div5, "class", "multi-select-container svelte-1fl1fxj");
    			set_style(div5, "z-index", "7");
    			add_location(div5, file$d, 283, 16, 14089);
    			attr_dev(div6, "class", "collapse__body svelte-1fl1fxj");
    			add_location(div6, file$d, 266, 12, 13011);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div1);
    			append_dev(div1, div0);
    			div0.innerHTML = raw0_value;
    			append_dev(div1, t0);
    			mount_component(multiselect0, div1, null);
    			append_dev(div6, t1);
    			append_dev(div6, div3);
    			append_dev(div3, div2);
    			div2.innerHTML = raw1_value;
    			append_dev(div3, t2);
    			mount_component(multiselect1, div3, null);
    			append_dev(div6, t3);
    			append_dev(div6, div5);
    			append_dev(div5, div4);
    			div4.innerHTML = raw2_value;
    			append_dev(div5, t4);
    			mount_component(multiselect2, div5, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiselect0_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect0_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*$ui*/ 4) {
    				updating_value = true;
    				multiselect0_changes.value = /*$ui*/ ctx[2].search.project.leadOrg;
    				add_flush_callback(() => updating_value = false);
    			}

    			multiselect0.$set(multiselect0_changes);
    			const multiselect1_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect1_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_1 && dirty[0] & /*$ui*/ 4) {
    				updating_value_1 = true;
    				multiselect1_changes.value = /*$ui*/ ctx[2].search.project.leadOrgType;
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			multiselect1.$set(multiselect1_changes);
    			const multiselect2_changes = {};

    			if (dirty[2] & /*$$scope*/ 2) {
    				multiselect2_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value_2 && dirty[0] & /*$ui*/ 4) {
    				updating_value_2 = true;
    				multiselect2_changes.value = /*$ui*/ ctx[2].search.project.partnerOrg;
    				add_flush_callback(() => updating_value_2 = false);
    			}

    			multiselect2.$set(multiselect2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiselect0.$$.fragment, local);
    			transition_in(multiselect1.$$.fragment, local);
    			transition_in(multiselect2.$$.fragment, local);

    			add_render_callback(() => {
    				if (!div6_transition) div6_transition = create_bidirectional_transition(div6, slide, {}, true);
    				div6_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiselect0.$$.fragment, local);
    			transition_out(multiselect1.$$.fragment, local);
    			transition_out(multiselect2.$$.fragment, local);
    			if (!div6_transition) div6_transition = create_bidirectional_transition(div6, slide, {}, false);
    			div6_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			destroy_component(multiselect0);
    			destroy_component(multiselect1);
    			destroy_component(multiselect2);
    			if (detaching && div6_transition) div6_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(266:12) {#if paneVisbility.stakeholders}",
    		ctx
    	});

    	return block;
    }

    // (271:24) {#each leadOrg.list as name}
    function create_each_block_3(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 271, 24, 13407);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(271:24) {#each leadOrg.list as name}",
    		ctx
    	});

    	return block;
    }

    // (270:20) <MultiSelect id = {leadOrg.name} bind:value={$ui.search.project.leadOrg} placeholder={leadOrg.placeholder} >
    function create_default_slot_2(ctx) {
    	let each_1_anchor;
    	let each_value_3 = leadOrg.list;
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*leadOrg*/ 0) {
    				each_value_3 = leadOrg.list;
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(270:20) <MultiSelect id = {leadOrg.name} bind:value={$ui.search.project.leadOrg} placeholder={leadOrg.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (279:24) {#each leadOrgType.list as name}
    function create_each_block_2(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 279, 24, 13924);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(279:24) {#each leadOrgType.list as name}",
    		ctx
    	});

    	return block;
    }

    // (278:20) <MultiSelect id = {leadOrgType.name} bind:value={$ui.search.project.leadOrgType} placeholder={leadOrgType.placeholder} >
    function create_default_slot_1(ctx) {
    	let each_1_anchor;
    	let each_value_2 = leadOrgType.list;
    	validate_each_argument(each_value_2);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*leadOrgType*/ 0) {
    				each_value_2 = leadOrgType.list;
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_2.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(278:20) <MultiSelect id = {leadOrgType.name} bind:value={$ui.search.project.leadOrgType} placeholder={leadOrgType.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (287:24) {#each partnerOrg.list as name}
    function create_each_block_1(ctx) {
    	let option;
    	let raw_value = /*name*/ ctx[32] + "";

    	const block = {
    		c: function create() {
    			option = element("option");
    			option.__value = /*name*/ ctx[32];
    			option.value = option.__value;
    			add_location(option, file$d, 287, 24, 14436);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			option.innerHTML = raw_value;
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(287:24) {#each partnerOrg.list as name}",
    		ctx
    	});

    	return block;
    }

    // (286:20) <MultiSelect id = {partnerOrg.name} bind:value={$ui.search.project.partnerOrg} placeholder={partnerOrg.placeholder} >
    function create_default_slot(ctx) {
    	let each_1_anchor;
    	let each_value_1 = partnerOrg.list;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*partnerOrg*/ 0) {
    				each_value_1 = partnerOrg.list;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(286:20) <MultiSelect id = {partnerOrg.name} bind:value={$ui.search.project.partnerOrg} placeholder={partnerOrg.placeholder} >",
    		ctx
    	});

    	return block;
    }

    // (304:12) {#if paneVisbility.learnings}
    function create_if_block_1$4(ctx) {
    	let div0;
    	let t1;
    	let multiinput0;
    	let t2;
    	let div1;
    	let t4;
    	let multiinput1;
    	let t5;
    	let div2;
    	let t7;
    	let multiinput2;
    	let current;

    	multiinput0 = new MultiInput({
    			props: {
    				store: /*projectStore*/ ctx[1].learnings.general,
    				type: "general",
    				label: "Add another learning"
    			},
    			$$inline: true
    		});

    	multiinput1 = new MultiInput({
    			props: {
    				store: /*projectStore*/ ctx[1].learnings.worked,
    				type: "worked",
    				label: "Add another learning"
    			},
    			$$inline: true
    		});

    	multiinput2 = new MultiInput({
    			props: {
    				store: /*projectStore*/ ctx[1].learnings.failed,
    				type: "failed",
    				label: "Add another learning"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "General";
    			t1 = space();
    			create_component(multiinput0.$$.fragment);
    			t2 = space();
    			div1 = element("div");
    			div1.textContent = "What worked";
    			t4 = space();
    			create_component(multiinput1.$$.fragment);
    			t5 = space();
    			div2 = element("div");
    			div2.textContent = "What didn't worked";
    			t7 = space();
    			create_component(multiinput2.$$.fragment);
    			attr_dev(div0, "class", "label svelte-1fl1fxj");
    			add_location(div0, file$d, 304, 16, 15062);
    			attr_dev(div1, "class", "label svelte-1fl1fxj");
    			add_location(div1, file$d, 306, 16, 15228);
    			attr_dev(div2, "class", "label svelte-1fl1fxj");
    			add_location(div2, file$d, 308, 16, 15397);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(multiinput0, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(multiinput1, target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t7, anchor);
    			mount_component(multiinput2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multiinput0_changes = {};
    			if (dirty[0] & /*projectStore*/ 2) multiinput0_changes.store = /*projectStore*/ ctx[1].learnings.general;
    			multiinput0.$set(multiinput0_changes);
    			const multiinput1_changes = {};
    			if (dirty[0] & /*projectStore*/ 2) multiinput1_changes.store = /*projectStore*/ ctx[1].learnings.worked;
    			multiinput1.$set(multiinput1_changes);
    			const multiinput2_changes = {};
    			if (dirty[0] & /*projectStore*/ 2) multiinput2_changes.store = /*projectStore*/ ctx[1].learnings.failed;
    			multiinput2.$set(multiinput2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multiinput0.$$.fragment, local);
    			transition_in(multiinput1.$$.fragment, local);
    			transition_in(multiinput2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multiinput0.$$.fragment, local);
    			transition_out(multiinput1.$$.fragment, local);
    			transition_out(multiinput2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			destroy_component(multiinput0, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t4);
    			destroy_component(multiinput1, detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t7);
    			destroy_component(multiinput2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(304:12) {#if paneVisbility.learnings}",
    		ctx
    	});

    	return block;
    }

    // (322:12) {#if paneVisbility.links}
    function create_if_block$5(ctx) {
    	let ul;
    	let t0;
    	let div1;
    	let div0;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*projectStore*/ ctx[1].links;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "⊕ add another resource";
    			add_location(ul, file$d, 322, 16, 16016);
    			add_location(div0, file$d, 328, 20, 16251);
    			attr_dev(div1, "class", "add-container svelte-1fl1fxj");
    			add_location(div1, file$d, 327, 16, 16202);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div0, "click", /*addLinkResource*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*projectStore*/ 2) {
    				each_value = /*projectStore*/ ctx[1].links;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(322:12) {#if paneVisbility.links}",
    		ctx
    	});

    	return block;
    }

    // (324:20) {#each projectStore.links as item, index}
    function create_each_block$2(ctx) {
    	let multilinkinput;
    	let current;

    	multilinkinput = new MultiLinkInput({
    			props: {
    				item: /*item*/ ctx[29],
    				index: /*index*/ ctx[31]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(multilinkinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(multilinkinput, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const multilinkinput_changes = {};
    			if (dirty[0] & /*projectStore*/ 2) multilinkinput_changes.item = /*item*/ ctx[29];
    			multilinkinput.$set(multilinkinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(multilinkinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(multilinkinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(multilinkinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(324:20) {#each projectStore.links as item, index}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let section;
    	let div1;
    	let dividerzagged20px0;
    	let t0;
    	let h2;
    	let t1;
    	let html_tag;
    	let raw0_value = componentContent.share.new.instructionHeader + "";
    	let t2;
    	let html_tag_1;
    	let raw1_value = componentContent.share.new.instructionDesc + "";
    	let t3;
    	let div0;
    	let dividerzagged20px1;
    	let t4;
    	let form;
    	let div2;
    	let h40;
    	let t6;
    	let div6;
    	let ul;
    	let li0;
    	let label0;
    	let t8;
    	let input;
    	let t9;
    	let li1;
    	let label1;
    	let t11;
    	let textarea;
    	let t12;
    	let div5;
    	let div3;
    	let t14;
    	let div4;
    	let t16;
    	let t17;
    	let div9;
    	let div8;
    	let h41;
    	let t19;
    	let div7;
    	let t21;
    	let t22;
    	let div12;
    	let div11;
    	let h42;
    	let t24;
    	let div10;
    	let t26;
    	let t27;
    	let div15;
    	let div14;
    	let h43;
    	let t29;
    	let div13;
    	let t31;
    	let t32;
    	let div18;
    	let div17;
    	let h44;
    	let t34;
    	let div16;
    	let t36;
    	let t37;
    	let div21;
    	let div20;
    	let h45;
    	let t39;
    	let div19;
    	let t41;
    	let t42;
    	let div24;
    	let div23;
    	let h46;
    	let t44;
    	let div22;
    	let t46;
    	let t47;
    	let div25;
    	let button0;
    	let t49;
    	let button1;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });
    	let if_block0 = /*paneVisbility*/ ctx[0].description && create_if_block_6$1(ctx);
    	let if_block1 = /*paneVisbility*/ ctx[0].hwsOutcomes && create_if_block_5$2(ctx);
    	let if_block2 = /*paneVisbility*/ ctx[0].location && create_if_block_4$2(ctx);
    	let if_block3 = /*paneVisbility*/ ctx[0].characteristics && create_if_block_3$4(ctx);
    	let if_block4 = /*paneVisbility*/ ctx[0].stakeholders && create_if_block_2$4(ctx);
    	let if_block5 = /*paneVisbility*/ ctx[0].learnings && create_if_block_1$4(ctx);
    	let if_block6 = /*paneVisbility*/ ctx[0].links && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			h2 = element("h2");
    			t1 = text$1("— ");
    			html_tag = new HtmlTag();
    			t2 = space();
    			html_tag_1 = new HtmlTag();
    			t3 = space();
    			div0 = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			t4 = space();
    			form = element("form");
    			div2 = element("div");
    			h40 = element("h4");
    			h40.textContent = "— About your project";
    			t6 = space();
    			div6 = element("div");
    			ul = element("ul");
    			li0 = element("li");
    			label0 = element("label");
    			label0.textContent = "Project name";
    			t8 = space();
    			input = element("input");
    			t9 = space();
    			li1 = element("li");
    			label1 = element("label");
    			label1.textContent = "Brief description";
    			t11 = space();
    			textarea = element("textarea");
    			t12 = space();
    			div5 = element("div");
    			div3 = element("div");
    			div3.textContent = "Tell us more about your project (optional)";
    			t14 = space();
    			div4 = element("div");
    			div4.textContent = "↓";
    			t16 = space();
    			if (if_block0) if_block0.c();
    			t17 = space();
    			div9 = element("div");
    			div8 = element("div");
    			h41 = element("h4");
    			h41.textContent = "— Project waterway outcomes";
    			t19 = space();
    			div7 = element("div");
    			div7.textContent = "↓";
    			t21 = space();
    			if (if_block1) if_block1.c();
    			t22 = space();
    			div12 = element("div");
    			div11 = element("div");
    			h42 = element("h4");
    			h42.textContent = "— Project location";
    			t24 = space();
    			div10 = element("div");
    			div10.textContent = "↓";
    			t26 = space();
    			if (if_block2) if_block2.c();
    			t27 = space();
    			div15 = element("div");
    			div14 = element("div");
    			h43 = element("h4");
    			h43.textContent = "— Project characteristics";
    			t29 = space();
    			div13 = element("div");
    			div13.textContent = "↓";
    			t31 = space();
    			if (if_block3) if_block3.c();
    			t32 = space();
    			div18 = element("div");
    			div17 = element("div");
    			h44 = element("h4");
    			h44.textContent = "— Project stakeholders";
    			t34 = space();
    			div16 = element("div");
    			div16.textContent = "↓";
    			t36 = space();
    			if (if_block4) if_block4.c();
    			t37 = space();
    			div21 = element("div");
    			div20 = element("div");
    			h45 = element("h4");
    			h45.textContent = "— Project learnings";
    			t39 = space();
    			div19 = element("div");
    			div19.textContent = "↓";
    			t41 = space();
    			if (if_block5) if_block5.c();
    			t42 = space();
    			div24 = element("div");
    			div23 = element("div");
    			h46 = element("h4");
    			h46.textContent = "— Links to other project resources";
    			t44 = space();
    			div22 = element("div");
    			div22.textContent = "↓";
    			t46 = space();
    			if (if_block6) if_block6.c();
    			t47 = space();
    			div25 = element("div");
    			button0 = element("button");
    			button0.textContent = "Save as draft";
    			t49 = space();
    			button1 = element("button");
    			button1.textContent = "Post your project";
    			html_tag.a = null;
    			attr_dev(h2, "class", "svelte-1fl1fxj");
    			add_location(h2, file$d, 72, 8, 2670);
    			html_tag_1.a = t3;
    			attr_dev(div0, "class", "float-bottom svelte-1fl1fxj");
    			add_location(div0, file$d, 74, 8, 2807);
    			attr_dev(div1, "class", "info-pane svelte-1fl1fxj");
    			add_location(div1, file$d, 70, 4, 2607);
    			attr_dev(h40, "class", "svelte-1fl1fxj");
    			add_location(h40, file$d, 83, 12, 3015);
    			attr_dev(div2, "class", "collapse__header svelte-1fl1fxj");
    			add_location(div2, file$d, 82, 8, 2971);
    			attr_dev(label0, "class", "centre_v svelte-1fl1fxj");
    			attr_dev(label0, "for", "projectName");
    			add_location(label0, file$d, 88, 20, 3158);
    			attr_dev(input, "name", "projectName");
    			add_location(input, file$d, 89, 20, 3243);
    			add_location(li0, file$d, 87, 16, 3133);
    			attr_dev(label1, "for", "shortDescription");
    			attr_dev(label1, "class", "svelte-1fl1fxj");
    			add_location(label1, file$d, 92, 20, 3367);
    			attr_dev(textarea, "name", "shortDescription");
    			attr_dev(textarea, "rows", "5");
    			add_location(textarea, file$d, 93, 20, 3444);
    			add_location(li1, file$d, 91, 16, 3342);
    			add_location(ul, file$d, 86, 12, 3112);
    			attr_dev(div3, "class", "toggle-label-minor svelte-1fl1fxj");
    			add_location(div3, file$d, 100, 16, 3842);
    			attr_dev(div4, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div4, file$d, 101, 16, 3940);
    			attr_dev(div5, "id", "description");
    			attr_dev(div5, "class", "collapse__header float-right svelte-1fl1fxj");
    			attr_dev(div5, "type", "button");
    			toggle_class(div5, "selected", /*paneVisbility*/ ctx[0].description);
    			add_location(div5, file$d, 98, 12, 3668);
    			attr_dev(div6, "class", "container");
    			add_location(div6, file$d, 85, 8, 3074);
    			attr_dev(h41, "class", "svelte-1fl1fxj");
    			add_location(h41, file$d, 121, 16, 4918);
    			attr_dev(div7, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div7, file$d, 122, 16, 4977);
    			attr_dev(div8, "id", "hwsOutcomes");
    			attr_dev(div8, "class", "collapse__header top-border svelte-1fl1fxj");
    			attr_dev(div8, "type", "button");
    			toggle_class(div8, "selected", /*paneVisbility*/ ctx[0].hwsOutcomes);
    			add_location(div8, file$d, 119, 12, 4743);
    			attr_dev(div9, "class", "container");
    			add_location(div9, file$d, 118, 8, 4705);
    			attr_dev(h42, "class", "svelte-1fl1fxj");
    			add_location(h42, file$d, 170, 16, 7581);
    			attr_dev(div10, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div10, file$d, 171, 16, 7631);
    			attr_dev(div11, "id", "location");
    			attr_dev(div11, "class", "collapse__header top-border svelte-1fl1fxj");
    			attr_dev(div11, "type", "button");
    			toggle_class(div11, "selected", /*paneVisbility*/ ctx[0].location);
    			add_location(div11, file$d, 168, 12, 7412);
    			attr_dev(div12, "class", "container");
    			add_location(div12, file$d, 167, 8, 7374);
    			attr_dev(h43, "class", "svelte-1fl1fxj");
    			add_location(h43, file$d, 209, 16, 9699);
    			attr_dev(div13, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div13, file$d, 210, 16, 9756);
    			attr_dev(div14, "id", "characteristics");
    			attr_dev(div14, "class", "collapse__header top-border svelte-1fl1fxj");
    			attr_dev(div14, "type", "button");
    			toggle_class(div14, "selected", /*paneVisbility*/ ctx[0].characteristics);
    			add_location(div14, file$d, 207, 12, 9516);
    			attr_dev(div15, "class", "container");
    			add_location(div15, file$d, 206, 8, 9478);
    			attr_dev(h44, "class", "svelte-1fl1fxj");
    			add_location(h44, file$d, 262, 16, 12837);
    			attr_dev(div16, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div16, file$d, 263, 16, 12891);
    			attr_dev(div17, "id", "stakeholders");
    			attr_dev(div17, "class", "collapse__header top-border svelte-1fl1fxj");
    			attr_dev(div17, "type", "button");
    			toggle_class(div17, "selected", /*paneVisbility*/ ctx[0].stakeholders);
    			add_location(div17, file$d, 260, 12, 12660);
    			attr_dev(div18, "class", "container");
    			add_location(div18, file$d, 259, 8, 12622);
    			attr_dev(h45, "class", "svelte-1fl1fxj");
    			add_location(h45, file$d, 299, 16, 14889);
    			attr_dev(div19, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div19, file$d, 300, 16, 14940);
    			attr_dev(div20, "id", "learnings");
    			attr_dev(div20, "class", "collapse__header top-border svelte-1fl1fxj");
    			attr_dev(div20, "type", "button");
    			toggle_class(div20, "selected", /*paneVisbility*/ ctx[0].learnings);
    			add_location(div20, file$d, 297, 12, 14718);
    			attr_dev(div21, "class", "container");
    			add_location(div21, file$d, 296, 8, 14680);
    			attr_dev(h46, "class", "svelte-1fl1fxj");
    			add_location(h46, file$d, 317, 16, 15832);
    			attr_dev(div22, "class", "toggle-icon down svelte-1fl1fxj");
    			add_location(div22, file$d, 318, 16, 15898);
    			attr_dev(div23, "id", "links");
    			attr_dev(div23, "class", "collapse__header top-border svelte-1fl1fxj");
    			attr_dev(div23, "type", "button");
    			toggle_class(div23, "selected", /*paneVisbility*/ ctx[0].links);
    			add_location(div23, file$d, 315, 12, 15669);
    			attr_dev(div24, "class", "container");
    			add_location(div24, file$d, 314, 8, 15631);
    			attr_dev(button0, "class", "draft");
    			add_location(button0, file$d, 335, 12, 16467);
    			add_location(button1, file$d, 336, 12, 16563);
    			attr_dev(div25, "class", "button-container svelte-1fl1fxj");
    			add_location(div25, file$d, 334, 8, 16422);
    			attr_dev(form, "class", "newProject");
    			add_location(form, file$d, 80, 4, 2901);
    			attr_dev(section, "id", "new-project");
    			attr_dev(section, "class", "svelte-1fl1fxj");
    			add_location(section, file$d, 69, 0, 2501);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			mount_component(dividerzagged20px0, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, h2);
    			append_dev(h2, t1);
    			html_tag.m(raw0_value, h2);
    			append_dev(div1, t2);
    			html_tag_1.m(raw1_value, div1);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			mount_component(dividerzagged20px1, div0, null);
    			append_dev(section, t4);
    			append_dev(section, form);
    			append_dev(form, div2);
    			append_dev(div2, h40);
    			append_dev(form, t6);
    			append_dev(form, div6);
    			append_dev(div6, ul);
    			append_dev(ul, li0);
    			append_dev(li0, label0);
    			append_dev(li0, t8);
    			append_dev(li0, input);
    			set_input_value(input, /*projectStore*/ ctx[1].name);
    			append_dev(ul, t9);
    			append_dev(ul, li1);
    			append_dev(li1, label1);
    			append_dev(li1, t11);
    			append_dev(li1, textarea);
    			set_input_value(textarea, /*projectStore*/ ctx[1].about.shortDescription);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div5, t14);
    			append_dev(div5, div4);
    			append_dev(div6, t16);
    			if (if_block0) if_block0.m(div6, null);
    			append_dev(form, t17);
    			append_dev(form, div9);
    			append_dev(div9, div8);
    			append_dev(div8, h41);
    			append_dev(div8, t19);
    			append_dev(div8, div7);
    			append_dev(div9, t21);
    			if (if_block1) if_block1.m(div9, null);
    			append_dev(form, t22);
    			append_dev(form, div12);
    			append_dev(div12, div11);
    			append_dev(div11, h42);
    			append_dev(div11, t24);
    			append_dev(div11, div10);
    			append_dev(div12, t26);
    			if (if_block2) if_block2.m(div12, null);
    			append_dev(form, t27);
    			append_dev(form, div15);
    			append_dev(div15, div14);
    			append_dev(div14, h43);
    			append_dev(div14, t29);
    			append_dev(div14, div13);
    			append_dev(div15, t31);
    			if (if_block3) if_block3.m(div15, null);
    			append_dev(form, t32);
    			append_dev(form, div18);
    			append_dev(div18, div17);
    			append_dev(div17, h44);
    			append_dev(div17, t34);
    			append_dev(div17, div16);
    			append_dev(div18, t36);
    			if (if_block4) if_block4.m(div18, null);
    			append_dev(form, t37);
    			append_dev(form, div21);
    			append_dev(div21, div20);
    			append_dev(div20, h45);
    			append_dev(div20, t39);
    			append_dev(div20, div19);
    			append_dev(div21, t41);
    			if (if_block5) if_block5.m(div21, null);
    			append_dev(form, t42);
    			append_dev(form, div24);
    			append_dev(div24, div23);
    			append_dev(div23, h46);
    			append_dev(div23, t44);
    			append_dev(div23, div22);
    			append_dev(div24, t46);
    			if (if_block6) if_block6.m(div24, null);
    			append_dev(form, t47);
    			append_dev(form, div25);
    			append_dev(div25, button0);
    			append_dev(div25, t49);
    			append_dev(div25, button1);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[8]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[9]),
    					listen_dev(div5, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div8, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div11, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div14, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div17, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div20, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(div23, "click", /*togglePane*/ ctx[3], false, false, false),
    					listen_dev(button0, "click", prevent_default(/*handleSave*/ ctx[4]), false, true, false),
    					listen_dev(button1, "click", prevent_default(/*handleSubmit*/ ctx[5]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*projectStore*/ 2 && input.value !== /*projectStore*/ ctx[1].name) {
    				set_input_value(input, /*projectStore*/ ctx[1].name);
    			}

    			if (dirty[0] & /*projectStore*/ 2) {
    				set_input_value(textarea, /*projectStore*/ ctx[1].about.shortDescription);
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div5, "selected", /*paneVisbility*/ ctx[0].description);
    			}

    			if (/*paneVisbility*/ ctx[0].description) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_6$1(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div6, null);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div8, "selected", /*paneVisbility*/ ctx[0].hwsOutcomes);
    			}

    			if (/*paneVisbility*/ ctx[0].hwsOutcomes) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_5$2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div9, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div11, "selected", /*paneVisbility*/ ctx[0].location);
    			}

    			if (/*paneVisbility*/ ctx[0].location) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_4$2(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div12, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div14, "selected", /*paneVisbility*/ ctx[0].characteristics);
    			}

    			if (/*paneVisbility*/ ctx[0].characteristics) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_3$4(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div15, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div17, "selected", /*paneVisbility*/ ctx[0].stakeholders);
    			}

    			if (/*paneVisbility*/ ctx[0].stakeholders) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block4, 1);
    					}
    				} else {
    					if_block4 = create_if_block_2$4(ctx);
    					if_block4.c();
    					transition_in(if_block4, 1);
    					if_block4.m(div18, null);
    				}
    			} else if (if_block4) {
    				group_outros();

    				transition_out(if_block4, 1, 1, () => {
    					if_block4 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div20, "selected", /*paneVisbility*/ ctx[0].learnings);
    			}

    			if (/*paneVisbility*/ ctx[0].learnings) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block_1$4(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(div21, null);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}

    			if (dirty[0] & /*paneVisbility*/ 1) {
    				toggle_class(div23, "selected", /*paneVisbility*/ ctx[0].links);
    			}

    			if (/*paneVisbility*/ ctx[0].links) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);

    					if (dirty[0] & /*paneVisbility*/ 1) {
    						transition_in(if_block6, 1);
    					}
    				} else {
    					if_block6 = create_if_block$5(ctx);
    					if_block6.c();
    					transition_in(if_block6, 1);
    					if_block6.m(div24, null);
    				}
    			} else if (if_block6) {
    				group_outros();

    				transition_out(if_block6, 1, 1, () => {
    					if_block6 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(dividerzagged20px1.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block4);
    			transition_in(if_block5);
    			transition_in(if_block6);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { y: -200, duration: 800 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block4);
    			transition_out(if_block5);
    			transition_out(if_block6);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { y: -200, duration: 100 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);
    			destroy_component(dividerzagged20px1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const iconClearPath = 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z';

    function instance$e($$self, $$props, $$invalidate) {
    	let projectStore;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(2, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NewProject', slots, []);
    	let { store } = $$props;

    	////// COLLAPSIBLE SEARCH PANES ////
    	const paneVisbility = {
    		description: false,
    		location: true,
    		characteristics: true,
    		hwsOutcomes: true,
    		stakeholders: true,
    		status: true,
    		learnings: true,
    		links: true
    	};

    	function togglePane() {
    		Object.keys(paneVisbility).map(key => {
    			if (this.id !== key) {
    				$$invalidate(0, paneVisbility[key] = false, paneVisbility);
    			}
    		});

    		$$invalidate(0, paneVisbility[this.id] = !paneVisbility[this.id], paneVisbility);
    		console.log(`Toggling ${this.id} vis to `, paneVisbility[this.id]);
    	}

    	// Save and submit form
    	function handleSave() {
    		console.log('Saving a project...');
    		console.log(projectStore);
    		console.log($ui);
    	}

    	function handleSubmit() {
    		console.log('Submitting a project...');
    		console.log(projectStore);
    	}

    	// Add and remove items for array inputs; and link/resources
    	function deleteItem(type, index, learning) {
    		console.log('Delete an item:', learning, index);
    		$$invalidate(1, projectStore.learnings[type] = projectStore.learnings[type].filter((d, i) => i !== index), projectStore);
    	}

    	function addLearning(type) {
    		$$invalidate(1, projectStore.learnings[type] = [...projectStore.learnings[type], ''], projectStore);
    	}

    	function addLinkResource() {
    		console.log('Adding a new blank one...');
    		$$invalidate(1, projectStore.links = [...projectStore.links, { name: '', url: '', description: '' }], projectStore);
    	}
    	const writable_props = ['store'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<NewProject> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		projectStore.name = this.value;
    		($$invalidate(1, projectStore), $$invalidate(7, store));
    	}

    	function textarea_input_handler() {
    		projectStore.about.shortDescription = this.value;
    		($$invalidate(1, projectStore), $$invalidate(7, store));
    	}

    	function textarea0_input_handler() {
    		projectStore.about.longDescription = this.value;
    		($$invalidate(1, projectStore), $$invalidate(7, store));
    	}

    	function textarea1_input_handler() {
    		projectStore.about.history = this.value;
    		($$invalidate(1, projectStore), $$invalidate(7, store));
    	}

    	function multiselect0_value_binding(value) {
    		if ($$self.$$.not_equal(projectStore.hws.values, value)) {
    			projectStore.hws.values = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect1_value_binding(value) {
    		if ($$self.$$.not_equal(projectStore.hws.conditions, value)) {
    			projectStore.hws.conditions = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect2_value_binding(value) {
    		if ($$self.$$.not_equal(projectStore.hws.poGroup, value)) {
    			projectStore.hws.poGroup = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect3_value_binding(value) {
    		if ($$self.$$.not_equal(projectStore.hws.poTheme, value)) {
    			projectStore.hws.poTheme = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect0_value_binding_1(value) {
    		if ($$self.$$.not_equal(projectStore.location.catchments, value)) {
    			projectStore.location.catchments = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect1_value_binding_1(value) {
    		if ($$self.$$.not_equal(projectStore.location.subCatchments, value)) {
    			projectStore.location.subCatchments = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect2_value_binding_1(value) {
    		if ($$self.$$.not_equal(projectStore.location.locations, value)) {
    			projectStore.location.locations = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect0_value_binding_2(value) {
    		if ($$self.$$.not_equal(projectStore.meta.type, value)) {
    			projectStore.meta.type = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect1_value_binding_2(value) {
    		if ($$self.$$.not_equal(projectStore.status.stage, value)) {
    			projectStore.status.stage = value;
    			($$invalidate(1, projectStore), $$invalidate(7, store));
    		}
    	}

    	function multiselect2_value_binding_2(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectClass, value)) {
    			$ui.search.project.projectClass = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect3_value_binding_1(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectSize, value)) {
    			$ui.search.project.projectSize = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect4_value_binding(value) {
    		if ($$self.$$.not_equal($ui.search.project.projectScale, value)) {
    			$ui.search.project.projectScale = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect0_value_binding_3(value) {
    		if ($$self.$$.not_equal($ui.search.project.leadOrg, value)) {
    			$ui.search.project.leadOrg = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect1_value_binding_3(value) {
    		if ($$self.$$.not_equal($ui.search.project.leadOrgType, value)) {
    			$ui.search.project.leadOrgType = value;
    			ui.set($ui);
    		}
    	}

    	function multiselect2_value_binding_3(value) {
    		if ($$self.$$.not_equal($ui.search.project.partnerOrg, value)) {
    			$ui.search.project.partnerOrg = value;
    			ui.set($ui);
    		}
    	}

    	$$self.$$set = $$props => {
    		if ('store' in $$props) $$invalidate(7, store = $$props.store);
    	};

    	$$self.$capture_state = () => ({
    		MultiLinkInput,
    		MultiSelect,
    		MultiInput,
    		DividerZagged20px,
    		fly,
    		slide,
    		user,
    		ui,
    		componentContent,
    		keyValues,
    		conditions,
    		performanceObjectivesGroup,
    		performanceObjectivesTheme,
    		catchments,
    		subcatchments,
    		locations,
    		leadOrg,
    		leadOrgType,
    		partnerOrg,
    		initiativeType,
    		projectStage,
    		projectClass,
    		projectSize,
    		projectScale,
    		store,
    		iconClearPath,
    		paneVisbility,
    		togglePane,
    		handleSave,
    		handleSubmit,
    		deleteItem,
    		addLearning,
    		addLinkResource,
    		projectStore,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('store' in $$props) $$invalidate(7, store = $$props.store);
    		if ('projectStore' in $$props) $$invalidate(1, projectStore = $$props.projectStore);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*store*/ 128) {
    			$$invalidate(1, projectStore = store);
    		}
    	};

    	return [
    		paneVisbility,
    		projectStore,
    		$ui,
    		togglePane,
    		handleSave,
    		handleSubmit,
    		addLinkResource,
    		store,
    		input_input_handler,
    		textarea_input_handler,
    		textarea0_input_handler,
    		textarea1_input_handler,
    		multiselect0_value_binding,
    		multiselect1_value_binding,
    		multiselect2_value_binding,
    		multiselect3_value_binding,
    		multiselect0_value_binding_1,
    		multiselect1_value_binding_1,
    		multiselect2_value_binding_1,
    		multiselect0_value_binding_2,
    		multiselect1_value_binding_2,
    		multiselect2_value_binding_2,
    		multiselect3_value_binding_1,
    		multiselect4_value_binding,
    		multiselect0_value_binding_3,
    		multiselect1_value_binding_3,
    		multiselect2_value_binding_3
    	];
    }

    class NewProject extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { store: 7 }, null, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewProject",
    			options,
    			id: create_fragment$e.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*store*/ ctx[7] === undefined && !('store' in props)) {
    			console_1$5.warn("<NewProject> was created without expected prop 'store'");
    		}
    	}

    	get store() {
    		throw new Error("<NewProject>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set store(value) {
    		throw new Error("<NewProject>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/Share.svelte generated by Svelte v3.46.4 */
    const file$c = "src/pages/Share.svelte";

    // (53:53) 
    function create_if_block_3$3(ctx) {
    	let projectpage;
    	let current;
    	projectpage = new ProjectPage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectpage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectpage, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectpage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectpage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectpage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(53:53) ",
    		ctx
    	});

    	return block;
    }

    // (50:59) 
    function create_if_block_2$3(ctx) {
    	let titleblock;
    	let t;
    	let existingsearch;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	existingsearch = new ExistingSearch({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(titleblock.$$.fragment);
    			t = space();
    			create_component(existingsearch.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(titleblock, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(existingsearch, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(existingsearch.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(existingsearch.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(titleblock, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(existingsearch, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(50:59) ",
    		ctx
    	});

    	return block;
    }

    // (47:56) 
    function create_if_block_1$3(ctx) {
    	let titleblock;
    	let t;
    	let newproject;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	newproject = new NewProject({
    			props: { store: /*$ui*/ ctx[0].newProject },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(titleblock.$$.fragment);
    			t = space();
    			create_component(newproject.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(titleblock, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(newproject, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const newproject_changes = {};
    			if (dirty & /*$ui*/ 1) newproject_changes.store = /*$ui*/ ctx[0].newProject;
    			newproject.$set(newproject_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(newproject.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(newproject.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(titleblock, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(newproject, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(47:56) ",
    		ctx
    	});

    	return block;
    }

    // (40:4) {#if !$ui.byPage.share.overlay}
    function create_if_block$4(ctx) {
    	let titleblock;
    	let t0;
    	let sharenew;
    	let t1;
    	let shareimage;
    	let t2;
    	let shareexisting;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	sharenew = new ShareNew({ $$inline: true });
    	shareimage = new ShareImage({ $$inline: true });
    	shareexisting = new ShareExisting({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(titleblock.$$.fragment);
    			t0 = space();
    			create_component(sharenew.$$.fragment);
    			t1 = space();
    			create_component(shareimage.$$.fragment);
    			t2 = space();
    			create_component(shareexisting.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(titleblock, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(sharenew, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(shareimage, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(shareexisting, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(sharenew.$$.fragment, local);
    			transition_in(shareimage.$$.fragment, local);
    			transition_in(shareexisting.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(sharenew.$$.fragment, local);
    			transition_out(shareimage.$$.fragment, local);
    			transition_out(shareexisting.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(titleblock, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(sharenew, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(shareimage, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(shareexisting, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(40:4) {#if !$ui.byPage.share.overlay}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let section;
    	let current_block_type_index;
    	let if_block;
    	let section_intro;
    	let current;
    	const if_block_creators = [create_if_block$4, create_if_block_1$3, create_if_block_2$3, create_if_block_3$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.share.overlay) return 0;
    		if (/*$ui*/ ctx[0].byPage.share.overlay === 'newProject') return 1;
    		if (/*$ui*/ ctx[0].byPage.share.overlay === 'projectSearch') return 2;
    		if (/*$ui*/ ctx[0].byPage.share.overlay === 'project') return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			if (if_block) if_block.c();
    			attr_dev(section, "id", "share-page");
    			attr_dev(section, "class", "page svelte-1tkeewr");
    			add_location(section, file$c, 38, 0, 1356);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fade, { duration: 1500 });
    					section_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Share', slots, []);
    	const titleData = getPageInfo($ui.page)[0].TitleBlock;

    	set_store_value(
    		ui,
    		$ui.newProject = {
    			name: null,
    			about: {},
    			contact: {},
    			hws: {},
    			learnings: {
    				general: ['', '', ''],
    				worked: ['', '', ''],
    				failed: ['', '', '']
    			},
    			links: [{ name: '', url: '', description: '' }],
    			location: {},
    			meta: {},
    			stakeholders: {},
    			status: {}
    		},
    		$ui
    	);

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Share> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		TitleBlock: TitleBlock$2,
    		ShareNew,
    		ShareExisting,
    		ShareImage,
    		ExistingSearch,
    		NewProject,
    		ProjectPage,
    		ui,
    		getPageInfo,
    		titleData,
    		$ui
    	});

    	return [$ui, titleData];
    }

    class Share extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Share",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* src/components/byPage/join/InfoPane.svelte generated by Svelte v3.46.4 */
    const file$b = "src/components/byPage/join/InfoPane.svelte";

    function create_fragment$c(ctx) {
    	let section;
    	let dividerzagged20px0;
    	let t0;
    	let h2;
    	let t1;
    	let html_tag;
    	let raw0_value = componentContent.join.info.header + "";
    	let t2;
    	let html_tag_1;
    	let raw1_value = componentContent.join.info.desc + "";
    	let t3;
    	let div;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			h2 = element("h2");
    			t1 = text$1("— ");
    			html_tag = new HtmlTag();
    			t2 = space();
    			html_tag_1 = new HtmlTag();
    			t3 = space();
    			div = element("div");
    			create_component(dividerzagged20px1.$$.fragment);
    			html_tag.a = null;
    			add_location(h2, file$b, 12, 4, 469);
    			html_tag_1.a = t3;
    			attr_dev(div, "class", "float-bottom svelte-1k7kan1");
    			add_location(div, file$b, 15, 4, 577);
    			attr_dev(section, "class", "svelte-1k7kan1");
    			add_location(section, file$b, 10, 0, 356);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(dividerzagged20px0, section, null);
    			append_dev(section, t0);
    			append_dev(section, h2);
    			append_dev(h2, t1);
    			html_tag.m(raw0_value, h2);
    			append_dev(section, t2);
    			html_tag_1.m(raw1_value, section);
    			append_dev(section, t3);
    			append_dev(section, div);
    			mount_component(dividerzagged20px1, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: -500, duration: 1500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: -500, duration: 150 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);
    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InfoPane', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InfoPane> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		DividerZagged20px,
    		ui,
    		componentContent
    	});

    	return [];
    }

    class InfoPane extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InfoPane",
    			options,
    			id: create_fragment$c.name
    		});
    	}
    }

    /* src/components/byPage/join/ImagePane.svelte generated by Svelte v3.46.4 */
    const file$a = "src/components/byPage/join/ImagePane.svelte";

    function create_fragment$b(ctx) {
    	let section;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			section = element("section");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = getRandomAbstractImgPath())) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "tba");
    			attr_dev(img, "class", "svelte-1hll6da");
    			add_location(img, file$a, 7, 4, 178);
    			attr_dev(section, "class", "svelte-1hll6da");
    			add_location(section, file$a, 6, 0, 164);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, img);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ImagePane', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ImagePane> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ getRandomAbstractImgPath });
    	return [];
    }

    class ImagePane extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ImagePane",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src/components/byPage/join/NewUser.svelte generated by Svelte v3.46.4 */

    const { console: console_1$4 } = globals;
    const file$9 = "src/components/byPage/join/NewUser.svelte";

    function create_fragment$a(ctx) {
    	let section;
    	let div0;
    	let dividerzagged20px0;
    	let t0;
    	let h2;
    	let t2;
    	let form;
    	let ul;
    	let li0;
    	let label0;
    	let t4;
    	let input0;
    	let t5;
    	let li1;
    	let label1;
    	let t7;
    	let input1;
    	let t8;
    	let li2;
    	let label2;
    	let t10;
    	let input2;
    	let t11;
    	let li3;
    	let label3;
    	let t13;
    	let input3;
    	let t14;
    	let li4;
    	let label4;
    	let t16;
    	let input4;
    	let t17;
    	let button;
    	let t19;
    	let div3;
    	let div2;
    	let h4;
    	let t21;
    	let div1;
    	let t23;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			h2 = element("h2");
    			h2.textContent = "— Create your account";
    			t2 = space();
    			form = element("form");
    			ul = element("ul");
    			li0 = element("li");
    			label0 = element("label");
    			label0.textContent = "First name";
    			t4 = space();
    			input0 = element("input");
    			t5 = space();
    			li1 = element("li");
    			label1 = element("label");
    			label1.textContent = "Last name";
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			li2 = element("li");
    			label2 = element("label");
    			label2.textContent = "Organsation";
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			li3 = element("li");
    			label3 = element("label");
    			label3.textContent = "Email (username)";
    			t13 = space();
    			input3 = element("input");
    			t14 = space();
    			li4 = element("li");
    			label4 = element("label");
    			label4.textContent = "Password";
    			t16 = space();
    			input4 = element("input");
    			t17 = space();
    			button = element("button");
    			button.textContent = "Create account";
    			t19 = space();
    			div3 = element("div");
    			div2 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Aleady have an account?";
    			t21 = space();
    			div1 = element("div");
    			div1.textContent = "→ Click here to login";
    			t23 = space();
    			create_component(dividerzagged20px1.$$.fragment);
    			add_location(h2, file$9, 30, 8, 982);
    			attr_dev(label0, "for", "firstName");
    			add_location(label0, file$9, 34, 20, 1147);
    			attr_dev(input0, "class", "name");
    			attr_dev(input0, "name", "firstName");
    			attr_dev(input0, "placeholder", "Enter your first name");
    			add_location(input0, file$9, 35, 20, 1209);
    			add_location(li0, file$9, 33, 16, 1122);
    			attr_dev(label1, "for", "lastName");
    			add_location(label1, file$9, 38, 20, 1373);
    			attr_dev(input1, "class", "name");
    			attr_dev(input1, "name", "firstName");
    			attr_dev(input1, "placeholder", "Enter your first name");
    			add_location(input1, file$9, 39, 20, 1433);
    			add_location(li1, file$9, 37, 16, 1348);
    			attr_dev(label2, "for", "organisation");
    			add_location(label2, file$9, 42, 20, 1595);
    			attr_dev(input2, "class", "name");
    			attr_dev(input2, "name", "firstName");
    			attr_dev(input2, "placeholder", "Choose your organisation");
    			add_location(input2, file$9, 43, 20, 1662);
    			add_location(li2, file$9, 41, 16, 1570);
    			attr_dev(label3, "for", "emailUsername");
    			add_location(label3, file$9, 46, 20, 1832);
    			attr_dev(input3, "class", "email");
    			attr_dev(input3, "name", "emailUsername");
    			attr_dev(input3, "placeholder", "Enter your email address (username)");
    			add_location(input3, file$9, 47, 20, 1904);
    			add_location(li3, file$9, 45, 16, 1807);
    			attr_dev(label4, "for", "password");
    			add_location(label4, file$9, 50, 20, 2085);
    			attr_dev(input4, "class", "name");
    			attr_dev(input4, "name", "password");
    			attr_dev(input4, "placeholder", "Choose your password");
    			add_location(input4, file$9, 51, 20, 2144);
    			add_location(li4, file$9, 49, 16, 2060);
    			add_location(ul, file$9, 32, 12, 1101);
    			add_location(button, file$9, 54, 12, 2293);
    			attr_dev(form, "class", "login");
    			add_location(form, file$9, 31, 8, 1027);
    			add_location(div0, file$9, 28, 4, 939);
    			add_location(h4, file$9, 59, 12, 2447);
    			attr_dev(div1, "class", "instruction-text");
    			add_location(div1, file$9, 60, 12, 2492);
    			attr_dev(div2, "class", "switch-form-container");
    			add_location(div2, file$9, 58, 8, 2396);
    			add_location(div3, file$9, 57, 4, 2382);
    			attr_dev(section, "class", "svelte-1r5ikcz");
    			add_location(section, file$9, 26, 0, 828);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			mount_component(dividerzagged20px0, div0, null);
    			append_dev(div0, t0);
    			append_dev(div0, h2);
    			append_dev(div0, t2);
    			append_dev(div0, form);
    			append_dev(form, ul);
    			append_dev(ul, li0);
    			append_dev(li0, label0);
    			append_dev(li0, t4);
    			append_dev(li0, input0);
    			set_input_value(input0, /*firstName*/ ctx[2]);
    			append_dev(ul, t5);
    			append_dev(ul, li1);
    			append_dev(li1, label1);
    			append_dev(li1, t7);
    			append_dev(li1, input1);
    			set_input_value(input1, /*lastName*/ ctx[3]);
    			append_dev(ul, t8);
    			append_dev(ul, li2);
    			append_dev(li2, label2);
    			append_dev(li2, t10);
    			append_dev(li2, input2);
    			set_input_value(input2, /*organisation*/ ctx[4]);
    			append_dev(ul, t11);
    			append_dev(ul, li3);
    			append_dev(li3, label3);
    			append_dev(li3, t13);
    			append_dev(li3, input3);
    			set_input_value(input3, /*username*/ ctx[0]);
    			append_dev(ul, t14);
    			append_dev(ul, li4);
    			append_dev(li4, label4);
    			append_dev(li4, t16);
    			append_dev(li4, input4);
    			set_input_value(input4, /*password*/ ctx[1]);
    			append_dev(form, t17);
    			append_dev(form, button);
    			append_dev(section, t19);
    			append_dev(section, div3);
    			append_dev(div3, div2);
    			append_dev(div2, h4);
    			append_dev(div2, t21);
    			append_dev(div2, div1);
    			append_dev(div3, t23);
    			mount_component(dividerzagged20px1, div3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[7]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[8]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[9]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[10]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[11]),
    					listen_dev(button, "click", /*handleSubmit*/ ctx[5], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[5]), false, true, false),
    					listen_dev(div1, "click", /*switchForm*/ ctx[6], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*firstName*/ 4 && input0.value !== /*firstName*/ ctx[2]) {
    				set_input_value(input0, /*firstName*/ ctx[2]);
    			}

    			if (dirty & /*lastName*/ 8 && input1.value !== /*lastName*/ ctx[3]) {
    				set_input_value(input1, /*lastName*/ ctx[3]);
    			}

    			if (dirty & /*organisation*/ 16 && input2.value !== /*organisation*/ ctx[4]) {
    				set_input_value(input2, /*organisation*/ ctx[4]);
    			}

    			if (dirty & /*username*/ 1 && input3.value !== /*username*/ ctx[0]) {
    				set_input_value(input3, /*username*/ ctx[0]);
    			}

    			if (dirty & /*password*/ 2 && input4.value !== /*password*/ ctx[1]) {
    				set_input_value(input4, /*password*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: 500, duration: 800, delay: 0 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: 500, duration: 200, delay: 0 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);
    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let $ui;
    	let $user;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(12, $ui = $$value));
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(13, $user = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NewUser', slots, []);
    	let username, password, firstName, lastName, organisation, submitted;

    	function handleSubmit() {
    		console.log(username, password, lastName, organisation, submitted);

    		// Set the UI state
    		set_store_value(user, $user.isRegistered = true, $user);

    		set_store_value(ui, $ui.page = 'home', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}

    	function switchForm() {
    		set_store_value(ui, $ui.byPage.join.form = 'login', $ui);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<NewUser> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		firstName = this.value;
    		$$invalidate(2, firstName);
    	}

    	function input1_input_handler() {
    		lastName = this.value;
    		$$invalidate(3, lastName);
    	}

    	function input2_input_handler() {
    		organisation = this.value;
    		$$invalidate(4, organisation);
    	}

    	function input3_input_handler() {
    		username = this.value;
    		$$invalidate(0, username);
    	}

    	function input4_input_handler() {
    		password = this.value;
    		$$invalidate(1, password);
    	}

    	$$self.$capture_state = () => ({
    		fly,
    		fade,
    		DividerZagged20px,
    		app: app$1,
    		user,
    		ui,
    		username,
    		password,
    		firstName,
    		lastName,
    		organisation,
    		submitted,
    		handleSubmit,
    		switchForm,
    		$ui,
    		$user
    	});

    	$$self.$inject_state = $$props => {
    		if ('username' in $$props) $$invalidate(0, username = $$props.username);
    		if ('password' in $$props) $$invalidate(1, password = $$props.password);
    		if ('firstName' in $$props) $$invalidate(2, firstName = $$props.firstName);
    		if ('lastName' in $$props) $$invalidate(3, lastName = $$props.lastName);
    		if ('organisation' in $$props) $$invalidate(4, organisation = $$props.organisation);
    		if ('submitted' in $$props) submitted = $$props.submitted;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		username,
    		password,
    		firstName,
    		lastName,
    		organisation,
    		handleSubmit,
    		switchForm,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler
    	];
    }

    class NewUser extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NewUser",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/components/byPage/join/Login.svelte generated by Svelte v3.46.4 */

    const { console: console_1$3 } = globals;
    const file$8 = "src/components/byPage/join/Login.svelte";

    function create_fragment$9(ctx) {
    	let section;
    	let div0;
    	let dividerzagged20px0;
    	let t0;
    	let h2;
    	let t2;
    	let form;
    	let ul;
    	let li0;
    	let label0;
    	let t4;
    	let input0;
    	let t5;
    	let li1;
    	let label1;
    	let t7;
    	let input1;
    	let t8;
    	let button;
    	let t10;
    	let div3;
    	let div2;
    	let h4;
    	let t12;
    	let div1;
    	let t14;
    	let dividerzagged20px1;
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	dividerzagged20px0 = new DividerZagged20px({ $$inline: true });
    	dividerzagged20px1 = new DividerZagged20px({ $$inline: true });

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			create_component(dividerzagged20px0.$$.fragment);
    			t0 = space();
    			h2 = element("h2");
    			h2.textContent = "— Login to your account";
    			t2 = space();
    			form = element("form");
    			ul = element("ul");
    			li0 = element("li");
    			label0 = element("label");
    			label0.textContent = "Email (username)";
    			t4 = space();
    			input0 = element("input");
    			t5 = space();
    			li1 = element("li");
    			label1 = element("label");
    			label1.textContent = "Password";
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			button = element("button");
    			button.textContent = "Login to your account";
    			t10 = space();
    			div3 = element("div");
    			div2 = element("div");
    			h4 = element("h4");
    			h4.textContent = "Don't have an account?";
    			t12 = space();
    			div1 = element("div");
    			div1.textContent = "→ Click here to create one";
    			t14 = space();
    			create_component(dividerzagged20px1.$$.fragment);
    			add_location(h2, file$8, 27, 8, 810);
    			attr_dev(label0, "for", "emailUsername");
    			add_location(label0, file$8, 31, 20, 979);
    			attr_dev(input0, "class", "email");
    			attr_dev(input0, "name", "emailUsername");
    			attr_dev(input0, "placeholder", "Enter your email address (username)");
    			add_location(input0, file$8, 32, 20, 1051);
    			add_location(li0, file$8, 30, 16, 954);
    			attr_dev(label1, "for", "password");
    			add_location(label1, file$8, 35, 20, 1232);
    			attr_dev(input1, "class", "name");
    			attr_dev(input1, "name", "password");
    			attr_dev(input1, "placeholder", "Enter your password");
    			add_location(input1, file$8, 36, 20, 1291);
    			add_location(li1, file$8, 34, 16, 1207);
    			add_location(ul, file$8, 29, 12, 933);
    			add_location(button, file$8, 39, 12, 1439);
    			attr_dev(form, "class", "login");
    			add_location(form, file$8, 28, 8, 857);
    			add_location(div0, file$8, 25, 4, 767);
    			add_location(h4, file$8, 45, 12, 1622);
    			attr_dev(div1, "class", "instruction-text");
    			add_location(div1, file$8, 46, 12, 1666);
    			attr_dev(div2, "class", "switch-form-container");
    			add_location(div2, file$8, 44, 8, 1571);
    			add_location(div3, file$8, 42, 4, 1535);
    			attr_dev(section, "class", "svelte-1nvjcny");
    			add_location(section, file$8, 23, 0, 672);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			mount_component(dividerzagged20px0, div0, null);
    			append_dev(div0, t0);
    			append_dev(div0, h2);
    			append_dev(div0, t2);
    			append_dev(div0, form);
    			append_dev(form, ul);
    			append_dev(ul, li0);
    			append_dev(li0, label0);
    			append_dev(li0, t4);
    			append_dev(li0, input0);
    			set_input_value(input0, /*username*/ ctx[0]);
    			append_dev(ul, t5);
    			append_dev(ul, li1);
    			append_dev(li1, label1);
    			append_dev(li1, t7);
    			append_dev(li1, input1);
    			set_input_value(input1, /*password*/ ctx[1]);
    			append_dev(form, t8);
    			append_dev(form, button);
    			append_dev(section, t10);
    			append_dev(section, div3);
    			append_dev(div3, div2);
    			append_dev(div2, h4);
    			append_dev(div2, t12);
    			append_dev(div2, div1);
    			append_dev(div3, t14);
    			mount_component(dividerzagged20px1, div3, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[4]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[5]),
    					listen_dev(button, "click", /*handleSubmit*/ ctx[2], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[2]), false, true, false),
    					listen_dev(div1, "click", /*switchForm*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*username*/ 1 && input0.value !== /*username*/ ctx[0]) {
    				set_input_value(input0, /*username*/ ctx[0]);
    			}

    			if (dirty & /*password*/ 2 && input1.value !== /*password*/ ctx[1]) {
    				set_input_value(input1, /*password*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dividerzagged20px0.$$.fragment, local);
    			transition_in(dividerzagged20px1.$$.fragment, local);

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fly, { x: -500, duration: 800 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dividerzagged20px0.$$.fragment, local);
    			transition_out(dividerzagged20px1.$$.fragment, local);
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fly, { x: -500, duration: 200 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(dividerzagged20px0);
    			destroy_component(dividerzagged20px1);
    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let $ui;
    	let $user;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(6, $ui = $$value));
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(7, $user = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	let username, password, submitted;

    	function handleSubmit() {
    		console.log(username, password);

    		// Set the UI state
    		set_store_value(user, $user.isRegistered = true, $user);

    		set_store_value(ui, $ui.page = 'home', $ui);
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	}

    	function switchForm() {
    		set_store_value(ui, $ui.byPage.join.form = 'newUser', $ui);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		username = this.value;
    		$$invalidate(0, username);
    	}

    	function input1_input_handler() {
    		password = this.value;
    		$$invalidate(1, password);
    	}

    	$$self.$capture_state = () => ({
    		fly,
    		fade,
    		DividerZagged20px,
    		app: app$1,
    		user,
    		ui,
    		username,
    		password,
    		submitted,
    		handleSubmit,
    		switchForm,
    		$ui,
    		$user
    	});

    	$$self.$inject_state = $$props => {
    		if ('username' in $$props) $$invalidate(0, username = $$props.username);
    		if ('password' in $$props) $$invalidate(1, password = $$props.password);
    		if ('submitted' in $$props) submitted = $$props.submitted;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		username,
    		password,
    		handleSubmit,
    		switchForm,
    		input0_input_handler,
    		input1_input_handler
    	];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$9.name
    		});
    	}
    }

    /* src/pages/Join.svelte generated by Svelte v3.46.4 */
    const file$7 = "src/pages/Join.svelte";

    // (22:4) {:else}
    function create_else_block$1(ctx) {
    	let login;
    	let current;
    	login = new Login({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(login.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(login, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(login.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(login.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(login, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(22:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (20:4) {#if $ui.byPage.join.form ==='newUser'}
    function create_if_block$3(ctx) {
    	let newuser;
    	let current;
    	newuser = new NewUser({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(newuser.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(newuser, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(newuser.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(newuser.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(newuser, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(20:4) {#if $ui.byPage.join.form ==='newUser'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let section;
    	let titleblock;
    	let t0;
    	let infopane;
    	let t1;
    	let current_block_type_index;
    	let if_block;
    	let section_intro;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	infopane = new InfoPane({ $$inline: true });
    	const if_block_creators = [create_if_block$3, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].byPage.join.form === 'newUser') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(titleblock.$$.fragment);
    			t0 = space();
    			create_component(infopane.$$.fragment);
    			t1 = space();
    			if_block.c();
    			attr_dev(section, "id", "join-page");
    			attr_dev(section, "class", "page");
    			add_location(section, file$7, 16, 0, 671);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(titleblock, section, null);
    			append_dev(section, t0);
    			mount_component(infopane, section, null);
    			append_dev(section, t1);
    			if_blocks[current_block_type_index].m(section, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				}

    				transition_in(if_block, 1);
    				if_block.m(section, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(infopane.$$.fragment, local);
    			transition_in(if_block);

    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fade, { duration: 1500 });
    					section_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(infopane.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(titleblock);
    			destroy_component(infopane);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Join', slots, []);
    	const titleData = getPageInfo($ui.page)[0].TitleBlock;
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Join> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		TitleBlock: TitleBlock$2,
    		InfoPane,
    		ImagePane,
    		NewUser,
    		Login,
    		ui,
    		getPageInfo,
    		titleData,
    		$ui
    	});

    	return [$ui, titleData];
    }

    class Join extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Join",
    			options,
    			id: create_fragment$8.name
    		});
    	}
    }

    /* src/components/byPage/manage/projectList/ProjectListTable.svelte generated by Svelte v3.46.4 */

    const { console: console_1$2 } = globals;
    const file$6 = "src/components/byPage/manage/projectList/ProjectListTable.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    // (41:4) {#each projectData as project, index (project._id.toString())}
    function create_each_block$1(key_1, ctx) {
    	let div7;
    	let div2;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let raw_value = /*project*/ ctx[10].name + "";
    	let t1;
    	let div6;
    	let div3;
    	let t3;
    	let div4;
    	let t5;
    	let div5;
    	let div6_projectid_value;
    	let div7_name_value;
    	let div7_transition;
    	let current;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*index*/ ctx[12]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[7](/*index*/ ctx[12]);
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[8](/*index*/ ctx[12]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div7 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div6 = element("div");
    			div3 = element("div");
    			div3.textContent = "Edit";
    			t3 = space();
    			div4 = element("div");
    			div4.textContent = "View";
    			t5 = space();
    			div5 = element("div");
    			div5.textContent = "Delete";
    			if (!src_url_equal(img.src, img_src_value = /*project*/ ctx[10].imgURL)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "thumbanail");
    			attr_dev(img, "class", "svelte-otqfn1");
    			add_location(img, file$6, 44, 16, 1564);
    			attr_dev(div0, "class", "thumbnail-container svelte-otqfn1");
    			add_location(div0, file$6, 43, 12, 1512);
    			attr_dev(div1, "class", "label svelte-otqfn1");
    			add_location(div1, file$6, 46, 12, 1642);
    			attr_dev(div2, "class", "row-content svelte-otqfn1");
    			add_location(div2, file$6, 42, 8, 1474);
    			attr_dev(div3, "class", "svelte-otqfn1");
    			add_location(div3, file$6, 49, 12, 1790);
    			attr_dev(div4, "class", "svelte-otqfn1");
    			add_location(div4, file$6, 50, 12, 1853);
    			attr_dev(div5, "class", "svelte-otqfn1");
    			add_location(div5, file$6, 51, 12, 1916);
    			attr_dev(div6, "class", "row-buttons svelte-otqfn1");
    			attr_dev(div6, "projectid", div6_projectid_value = /*project*/ ctx[10]._id.toString());
    			add_location(div6, file$6, 48, 8, 1713);
    			attr_dev(div7, "class", "row svelte-otqfn1");
    			attr_dev(div7, "name", div7_name_value = /*project*/ ctx[10]._id.toString());
    			add_location(div7, file$6, 41, 4, 1397);
    			this.first = div7;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div2);
    			append_dev(div2, div0);
    			append_dev(div0, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			div1.innerHTML = raw_value;
    			append_dev(div7, t1);
    			append_dev(div7, div6);
    			append_dev(div6, div3);
    			append_dev(div6, t3);
    			append_dev(div6, div4);
    			append_dev(div6, t5);
    			append_dev(div6, div5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div3, "click", click_handler, false, false, false),
    					listen_dev(div4, "click", click_handler_1, false, false, false),
    					listen_dev(div5, "click", click_handler_2, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (!current || dirty & /*projectData*/ 1 && !src_url_equal(img.src, img_src_value = /*project*/ ctx[10].imgURL)) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if ((!current || dirty & /*projectData*/ 1) && raw_value !== (raw_value = /*project*/ ctx[10].name + "")) div1.innerHTML = raw_value;
    			if (!current || dirty & /*projectData*/ 1 && div6_projectid_value !== (div6_projectid_value = /*project*/ ctx[10]._id.toString())) {
    				attr_dev(div6, "projectid", div6_projectid_value);
    			}

    			if (!current || dirty & /*projectData*/ 1 && div7_name_value !== (div7_name_value = /*project*/ ctx[10]._id.toString())) {
    				attr_dev(div7, "name", div7_name_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div7_transition) div7_transition = create_bidirectional_transition(div7, slide, {}, true);
    				div7_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div7_transition) div7_transition = create_bidirectional_transition(div7, slide, {}, false);
    			div7_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div7);
    			if (detaching && div7_transition) div7_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(41:4) {#each projectData as project, index (project._id.toString())}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let section;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let t0;
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*projectData*/ ctx[0];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*project*/ ctx[10]._id.toString();
    	validate_each_keys(ctx, each_value, get_each_context$1, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$1(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div = element("div");
    			div.textContent = "Add a new project";
    			attr_dev(div, "class", "add-container svelte-otqfn1");
    			add_location(div, file$6, 56, 4, 2014);
    			attr_dev(section, "class", "svelte-otqfn1");
    			add_location(section, file$6, 39, 0, 1316);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(section, null);
    			}

    			append_dev(section, t0);
    			append_dev(section, div);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*handleNewProject*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*projectData, handleDelete, handleOpen, handleEdit*/ 23) {
    				each_value = /*projectData*/ ctx[0];
    				validate_each_argument(each_value);
    				group_outros();
    				validate_each_keys(ctx, each_value, get_each_context$1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, section, outro_and_destroy_block, create_each_block$1, t0, get_each_context$1);
    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let projectData;
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(9, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ProjectListTable', slots, []);
    	let { projects } = $$props;

    	function handleEdit(index) {
    		console.log('Open a new project');
    		set_store_value(ui, $ui.state.focus.projectData = projects[index], $ui);
    		set_store_value(ui, $ui.byPage.manage.overlay = 'editProject', $ui);
    		console.log(projects[index]);
    		set_store_value(ui, $ui.editProject.data = projects[index], $ui);
    		console.log($ui);
    	}

    	function handleOpen(index) {
    		console.log('Open a project for viewing');
    		set_store_value(ui, $ui.state.focus.projectData = projects[index], $ui);
    		set_store_value(ui, $ui.byPage.manage.overlay = 'project', $ui);
    		console.log($ui.state.focus.projectData);
    	}

    	function handleNewProject(index) {
    		console.log('Adding a new project');
    		set_store_value(ui, $ui.byPage.manage.overlay = 'newProject', $ui);
    	}

    	function handleDelete(index) {
    		console.log('Delete a project');
    		$$invalidate(0, projectData = projectData.filter((d, i) => i !== index));
    	}
    	const writable_props = ['projects'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<ProjectListTable> was created with unknown prop '${key}'`);
    	});

    	const click_handler = index => handleEdit(index);
    	const click_handler_1 = index => handleOpen(index);
    	const click_handler_2 = index => handleDelete(index);

    	$$self.$$set = $$props => {
    		if ('projects' in $$props) $$invalidate(5, projects = $$props.projects);
    	};

    	$$self.$capture_state = () => ({
    		fly,
    		slide,
    		DividerZagged20px,
    		ui,
    		componentContent,
    		database,
    		projects,
    		handleEdit,
    		handleOpen,
    		handleNewProject,
    		handleDelete,
    		projectData,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('projects' in $$props) $$invalidate(5, projects = $$props.projects);
    		if ('projectData' in $$props) $$invalidate(0, projectData = $$props.projectData);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*projects*/ 32) {
    			$$invalidate(0, projectData = projects);
    		}
    	};

    	return [
    		projectData,
    		handleEdit,
    		handleOpen,
    		handleNewProject,
    		handleDelete,
    		projects,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class ProjectListTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { projects: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ProjectListTable",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*projects*/ ctx[5] === undefined && !('projects' in props)) {
    			console_1$2.warn("<ProjectListTable> was created without expected prop 'projects'");
    		}
    	}

    	get projects() {
    		throw new Error("<ProjectListTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set projects(value) {
    		throw new Error("<ProjectListTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/byPage/manage/UserProjects.svelte generated by Svelte v3.46.4 */
    const file$5 = "src/components/byPage/manage/UserProjects.svelte";

    function create_fragment$6(ctx) {
    	let section;
    	let div0;
    	let h2;
    	let t1;
    	let div1;
    	let projectlisttable;
    	let current;

    	projectlisttable = new ProjectListTable({
    			props: { projects: /*userProjects*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h2 = element("h2");
    			h2.textContent = "—— My projects";
    			t1 = space();
    			div1 = element("div");
    			create_component(projectlisttable.$$.fragment);
    			attr_dev(h2, "class", "svelte-vgwwzs");
    			add_location(h2, file$5, 16, 8, 573);
    			add_location(div0, file$5, 15, 4, 559);
    			attr_dev(div1, "class", "content svelte-vgwwzs");
    			add_location(div1, file$5, 18, 4, 624);
    			attr_dev(section, "class", "svelte-vgwwzs");
    			add_location(section, file$5, 14, 0, 545);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h2);
    			append_dev(section, t1);
    			append_dev(section, div1);
    			mount_component(projectlisttable, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const projectlisttable_changes = {};
    			if (dirty & /*userProjects*/ 1) projectlisttable_changes.projects = /*userProjects*/ ctx[0];
    			projectlisttable.$set(projectlisttable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectlisttable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectlisttable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(projectlisttable);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let userProjects;
    	let $user;
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(1, $user = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('UserProjects', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UserProjects> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fly,
    		ProjectListTable,
    		DividerZagged20px,
    		ui,
    		user,
    		componentContent,
    		database,
    		userProjects,
    		$user
    	});

    	$$self.$inject_state = $$props => {
    		if ('userProjects' in $$props) $$invalidate(0, userProjects = $$props.userProjects);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*$user*/ 2) {
    			$$invalidate(0, userProjects = $user.data.userProjects);
    		}
    	};

    	return [userProjects, $user];
    }

    class UserProjects extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "UserProjects",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* src/pages/Manage.svelte generated by Svelte v3.46.4 */
    const file$4 = "src/pages/Manage.svelte";

    // (38:58) 
    function create_if_block_3$2(ctx) {
    	let newproject;
    	let current;

    	newproject = new NewProject({
    			props: { store: /*$ui*/ ctx[0].editProject.data },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(newproject.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(newproject, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const newproject_changes = {};
    			if (dirty & /*$ui*/ 1) newproject_changes.store = /*$ui*/ ctx[0].editProject.data;
    			newproject.$set(newproject_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(newproject.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(newproject.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(newproject, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(38:58) ",
    		ctx
    	});

    	return block;
    }

    // (36:57) 
    function create_if_block_2$2(ctx) {
    	let newproject;
    	let current;

    	newproject = new NewProject({
    			props: { store: /*$ui*/ ctx[0].newProject },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(newproject.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(newproject, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const newproject_changes = {};
    			if (dirty & /*$ui*/ 1) newproject_changes.store = /*$ui*/ ctx[0].newProject;
    			newproject.$set(newproject_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(newproject.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(newproject.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(newproject, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(36:57) ",
    		ctx
    	});

    	return block;
    }

    // (34:54) 
    function create_if_block_1$2(ctx) {
    	let projectpage;
    	let current;
    	projectpage = new ProjectPage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(projectpage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(projectpage, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(projectpage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(projectpage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(projectpage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(34:54) ",
    		ctx
    	});

    	return block;
    }

    // (32:4) {#if !$ui.byPage.manage.overlay}
    function create_if_block$2(ctx) {
    	let userprojects;
    	let current;
    	userprojects = new UserProjects({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(userprojects.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(userprojects, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(userprojects.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(userprojects.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(userprojects, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(32:4) {#if !$ui.byPage.manage.overlay}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let section;
    	let titleblock;
    	let t;
    	let current_block_type_index;
    	let if_block;
    	let section_intro;
    	let current;

    	titleblock = new TitleBlock$2({
    			props: { titleData: /*titleData*/ ctx[1] },
    			$$inline: true
    		});

    	const if_block_creators = [create_if_block$2, create_if_block_1$2, create_if_block_2$2, create_if_block_3$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.manage.overlay) return 0;
    		if (/*$ui*/ ctx[0].byPage.manage.overlay === 'project') return 1;
    		if (/*$ui*/ ctx[0].byPage.manage.overlay === 'newProject') return 2;
    		if (/*$ui*/ ctx[0].byPage.manage.overlay === 'editProject') return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(titleblock.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(section, "id", "manage-page");
    			attr_dev(section, "class", "svelte-1liaq5h");
    			add_location(section, file$4, 29, 0, 1137);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(titleblock, section, null);
    			append_dev(section, t);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(section, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(section, null);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(titleblock.$$.fragment, local);
    			transition_in(if_block);

    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fade, { duration: 1500 });
    					section_intro.start();
    				});
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(titleblock.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(titleblock);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getRandomInt(min, max) {
    	min = Math.ceil(min);
    	max = Math.floor(max);
    	return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let $user;
    	let $database;
    	let $ui;
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(2, $user = $$value));
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(3, $database = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Manage', slots, []);
    	const titleData = getPageInfo($ui.page)[0].TitleBlock;
    	const shuffleArray = array => array.sort(() => Math.random() - 0.5);
    	const projectDatabase = $database.projects;
    	const randProjNumber = getRandomInt(3, 10);
    	set_store_value(user, $user.data.userProjects = shuffleArray(projectDatabase.slice(0, randProjNumber)), $user);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Manage> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		fade,
    		TitleBlock: TitleBlock$2,
    		UserProjects,
    		NewProject,
    		ProjectPage,
    		ui,
    		user,
    		database,
    		getPageInfo,
    		titleData,
    		getRandomInt,
    		shuffleArray,
    		projectDatabase,
    		randProjNumber,
    		$user,
    		$database,
    		$ui
    	});

    	return [$ui, titleData];
    }

    class Manage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Manage",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/components/shared/ModalMenu.svelte generated by Svelte v3.46.4 */

    const { console: console_1$1 } = globals;
    const file$3 = "src/components/shared/ModalMenu.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[2] = list[i];
    	return child_ctx;
    }

    // (27:12) {#each $ui.items.pages as page (slugify(page.name)) }
    function create_each_block(key_1, ctx) {
    	let li;
    	let div0;

    	let t0_value = (/*page*/ ctx[2].name.toLowerCase() === /*$ui*/ ctx[0].page
    	? ":"
    	: '') + "";

    	let t0;
    	let t1;
    	let html_tag;
    	let raw0_value = /*page*/ ctx[2].name + "";
    	let t2;
    	let div1;
    	let raw1_value = /*page*/ ctx[2].shortDesc + "";
    	let t3;
    	let li_name_value;
    	let mounted;
    	let dispose;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			li = element("li");
    			div0 = element("div");
    			t0 = text$1(t0_value);
    			t1 = space();
    			html_tag = new HtmlTag();
    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			html_tag.a = null;
    			attr_dev(div0, "class", "menu-title svelte-y2nlql");
    			add_location(div0, file$3, 28, 16, 1042);
    			attr_dev(div1, "class", "menu-shortDesc svelte-y2nlql");
    			add_location(div1, file$3, 29, 16, 1159);
    			attr_dev(li, "name", li_name_value = /*page*/ ctx[2].name);
    			attr_dev(li, "class", "svelte-y2nlql");
    			add_location(li, file$3, 27, 12, 980);
    			this.first = li;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, div0);
    			append_dev(div0, t0);
    			append_dev(div0, t1);
    			html_tag.m(raw0_value, div0);
    			append_dev(li, t2);
    			append_dev(li, div1);
    			div1.innerHTML = raw1_value;
    			append_dev(li, t3);

    			if (!mounted) {
    				dispose = listen_dev(li, "click", /*switchPage*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*$ui*/ 1 && t0_value !== (t0_value = (/*page*/ ctx[2].name.toLowerCase() === /*$ui*/ ctx[0].page
    			? ":"
    			: '') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$ui*/ 1 && raw0_value !== (raw0_value = /*page*/ ctx[2].name + "")) html_tag.p(raw0_value);
    			if (dirty & /*$ui*/ 1 && raw1_value !== (raw1_value = /*page*/ ctx[2].shortDesc + "")) div1.innerHTML = raw1_value;
    			if (dirty & /*$ui*/ 1 && li_name_value !== (li_name_value = /*page*/ ctx[2].name)) {
    				attr_dev(li, "name", li_name_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(27:12) {#each $ui.items.pages as page (slugify(page.name)) }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let section;
    	let div2;
    	let h1;
    	let t1;
    	let div1;
    	let div0;
    	let t3;
    	let div3;
    	let ul;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let section_intro;
    	let section_outro;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*$ui*/ ctx[0].items.pages;
    	validate_each_argument(each_value);
    	const get_key = ctx => slugify(/*page*/ ctx[2].name);
    	validate_each_keys(ctx, each_value, get_each_context, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div2 = element("div");
    			h1 = element("h1");
    			h1.textContent = "Navigate";
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			div0.textContent = "← Home";
    			t3 = space();
    			div3 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h1, "class", "svelte-y2nlql");
    			add_location(h1, file$3, 18, 8, 600);
    			attr_dev(div0, "class", "menu-title svelte-y2nlql");
    			add_location(div0, file$3, 20, 12, 680);
    			attr_dev(div1, "name", "home");
    			attr_dev(div1, "class", "svelte-y2nlql");
    			add_location(div1, file$3, 19, 8, 626);
    			attr_dev(div2, "class", "title-container svelte-y2nlql");
    			add_location(div2, file$3, 17, 5, 560);
    			attr_dev(ul, "class", "svelte-y2nlql");
    			add_location(ul, file$3, 25, 8, 897);
    			attr_dev(div3, "class", "page-nav-container svelte-y2nlql");
    			add_location(div3, file$3, 24, 5, 854);
    			attr_dev(section, "class", "svelte-y2nlql");
    			add_location(section, file$3, 16, 0, 487);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div2);
    			append_dev(div2, h1);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(section, t3);
    			append_dev(section, div3);
    			append_dev(div3, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*switchPage*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$ui, switchPage*/ 3) {
    				each_value = /*$ui*/ ctx[0].items.pages;
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, ul, destroy_block, create_each_block, null, get_each_context);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fade, { duration: 500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fade, { duration: 250 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			if (detaching && section_outro) section_outro.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalMenu', slots, []);

    	function switchPage() {
    		set_store_value(ui, $ui.page = this.getAttribute('name').toLowerCase(), $ui);
    		set_store_value(ui, $ui.showMenuModal = false, $ui);
    		set_store_value(ui, $ui.showNav = $ui.page !== 'home' ? true : false, $ui);
    		console.log('Now showing ', $ui.page);
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<ModalMenu> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fade, ui, slugify, switchPage, $ui });
    	return [$ui, switchPage];
    }

    class ModalMenu extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalMenu",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/components/shared/ModalHelp.svelte generated by Svelte v3.46.4 */
    const file$2 = "src/components/shared/ModalHelp.svelte";

    function create_fragment$3(ctx) {
    	let section;
    	let div0;
    	let h2;
    	let raw0_value = componentContent.info[/*$ui*/ ctx[0].page].header + "";
    	let t;
    	let div1;
    	let raw1_value = componentContent.info[/*$ui*/ ctx[0].page].content + "";
    	let section_intro;
    	let section_outro;
    	let current;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h2 = element("h2");
    			t = space();
    			div1 = element("div");
    			add_location(h2, file$2, 11, 8, 395);
    			attr_dev(div0, "class", "title-container svelte-utt243");
    			add_location(div0, file$2, 10, 5, 355);
    			attr_dev(div1, "class", "content-container svelte-utt243");
    			add_location(div1, file$2, 13, 5, 471);
    			attr_dev(section, "id", "help-modal");
    			attr_dev(section, "class", "svelte-utt243");
    			add_location(section, file$2, 9, 0, 264);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h2);
    			h2.innerHTML = raw0_value;
    			append_dev(section, t);
    			append_dev(section, div1);
    			div1.innerHTML = raw1_value;
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$ui*/ 1) && raw0_value !== (raw0_value = componentContent.info[/*$ui*/ ctx[0].page].header + "")) h2.innerHTML = raw0_value;			if ((!current || dirty & /*$ui*/ 1) && raw1_value !== (raw1_value = componentContent.info[/*$ui*/ ctx[0].page].content + "")) div1.innerHTML = raw1_value;		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (section_outro) section_outro.end(1);
    				section_intro = create_in_transition(section, fade, { duration: 500 });
    				section_intro.start();
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (section_intro) section_intro.invalidate();
    			section_outro = create_out_transition(section, fade, { duration: 250 });
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching && section_outro) section_outro.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalHelp', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalHelp> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ fade, ui, componentContent, $ui });
    	return [$ui];
    }

    class ModalHelp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalHelp",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src/components/shared/Nav.svelte generated by Svelte v3.46.4 */

    const { console: console_1 } = globals;
    const file$1 = "src/components/shared/Nav.svelte";

    // (70:4) {#if $ui.showNav}
    function create_if_block_2$1(ctx) {
    	let div;

    	function select_block_type(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].byPage.discover.overlay && !/*$ui*/ ctx[0].byPage.connect.overlay && !/*$ui*/ ctx[0].byPage.share.overlay && !/*$ui*/ ctx[0].byPage.manage.overlay) return create_if_block_3$1;
    		return create_else_block_2;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if_block.c();
    			attr_dev(div, "class", "menuButton-container svelte-1idjqij");
    			add_location(div, file$1, 70, 4, 2317);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if_block.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(70:4) {#if $ui.showNav}",
    		ctx
    	});

    	return block;
    }

    // (93:8) {:else}
    function create_else_block_2(ctx) {
    	let svg;
    	let circle;
    	let text_1;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			text_1 = svg_element("text");
    			t = text$1("Close");
    			attr_dev(circle, "cx", "25");
    			attr_dev(circle, "cy", "25");
    			attr_dev(circle, "r", "22.5");
    			attr_dev(circle, "class", "svelte-1idjqij");
    			add_location(circle, file$1, 94, 12, 3620);
    			attr_dev(text_1, "x", "25");
    			attr_dev(text_1, "y", "30");
    			attr_dev(text_1, "class", "svelte-1idjqij");
    			add_location(text_1, file$1, 95, 12, 3684);
    			attr_dev(svg, "id", "menu-icon");
    			attr_dev(svg, "class", "nav-icon svelte-1idjqij");
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "viewBox", "0 0 50 50");
    			add_location(svg, file$1, 93, 8, 3504);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, circle);
    			append_dev(svg, text_1);
    			append_dev(text_1, t);

    			if (!mounted) {
    				dispose = listen_dev(svg, "click", /*closeModalPage*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(93:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (73:8) {#if !$ui.byPage.discover.overlay && !$ui.byPage.connect.overlay && !$ui.byPage.share.overlay  && !$ui.byPage.manage.overlay }
    function create_if_block_3$1(ctx) {
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].showHelpModal) return create_if_block_4$1;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(73:8) {#if !$ui.byPage.discover.overlay && !$ui.byPage.connect.overlay && !$ui.byPage.share.overlay  && !$ui.byPage.manage.overlay }",
    		ctx
    	});

    	return block;
    }

    // (85:12) {:else}
    function create_else_block_1(ctx) {
    	let svg;
    	let circle;
    	let text_1;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			text_1 = svg_element("text");
    			t = text$1("Close");
    			attr_dev(circle, "cx", "25");
    			attr_dev(circle, "cy", "25");
    			attr_dev(circle, "r", "22.5");
    			attr_dev(circle, "class", "svelte-1idjqij");
    			add_location(circle, file$1, 86, 20, 3282);
    			attr_dev(text_1, "x", "25");
    			attr_dev(text_1, "y", "30");
    			attr_dev(text_1, "class", "svelte-1idjqij");
    			add_location(text_1, file$1, 87, 20, 3354);
    			attr_dev(svg, "id", "menu-icon");
    			attr_dev(svg, "class", "nav-icon invert svelte-1idjqij");
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "viewBox", "0 0 50 50");
    			add_location(svg, file$1, 85, 16, 3151);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, circle);
    			append_dev(svg, text_1);
    			append_dev(text_1, t);

    			if (!mounted) {
    				dispose = listen_dev(svg, "click", /*closeHelpModal*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(85:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (75:12) {#if !$ui.showHelpModal}
    function create_if_block_4$1(ctx) {
    	let svg;
    	let circle;
    	let mounted;
    	let dispose;

    	function select_block_type_2(ctx, dirty) {
    		if (!/*$ui*/ ctx[0].showMenuModal) return create_if_block_5$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			if_block.c();
    			attr_dev(circle, "cx", "25");
    			attr_dev(circle, "cy", "25");
    			attr_dev(circle, "r", "22.5");
    			attr_dev(circle, "class", "svelte-1idjqij");
    			add_location(circle, file$1, 76, 20, 2792);
    			attr_dev(svg, "id", "menu-icon");
    			attr_dev(svg, "class", "nav-icon svelte-1idjqij");
    			attr_dev(svg, "width", "100%");
    			attr_dev(svg, "viewBox", "0 0 50 50");
    			toggle_class(svg, "invert", /*$ui*/ ctx[0].showMenuModal);
    			add_location(svg, file$1, 75, 16, 2639);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, circle);
    			if_block.m(svg, null);

    			if (!mounted) {
    				dispose = listen_dev(svg, "click", /*toggleMenu*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type !== (current_block_type = select_block_type_2(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(svg, null);
    				}
    			}

    			if (dirty & /*$ui*/ 1) {
    				toggle_class(svg, "invert", /*$ui*/ ctx[0].showMenuModal);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(75:12) {#if !$ui.showHelpModal}",
    		ctx
    	});

    	return block;
    }

    // (80:20) {:else}
    function create_else_block(ctx) {
    	let text_1;
    	let t;

    	const block = {
    		c: function create() {
    			text_1 = svg_element("text");
    			t = text$1("Close");
    			attr_dev(text_1, "x", "25");
    			attr_dev(text_1, "y", "30");
    			attr_dev(text_1, "class", "svelte-1idjqij");
    			add_location(text_1, file$1, 80, 20, 2989);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(80:20) {:else}",
    		ctx
    	});

    	return block;
    }

    // (78:20) {#if !$ui.showMenuModal}
    function create_if_block_5$1(ctx) {
    	let text_1;
    	let t;

    	const block = {
    		c: function create() {
    			text_1 = svg_element("text");
    			t = text$1("Menu");
    			attr_dev(text_1, "x", "25");
    			attr_dev(text_1, "y", "30");
    			attr_dev(text_1, "class", "svelte-1idjqij");
    			add_location(text_1, file$1, 78, 20, 2909);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, text_1, anchor);
    			append_dev(text_1, t);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(text_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(78:20) {#if !$ui.showMenuModal}",
    		ctx
    	});

    	return block;
    }

    // (105:0) {#if $ui.showMenuModal}
    function create_if_block_1$1(ctx) {
    	let modalmenu;
    	let current;
    	modalmenu = new ModalMenu({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(modalmenu.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalmenu, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalmenu.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalmenu.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalmenu, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(105:0) {#if $ui.showMenuModal}",
    		ctx
    	});

    	return block;
    }

    // (109:0) {#if $ui.showHelpModal}
    function create_if_block$1(ctx) {
    	let modalhelp;
    	let current;
    	modalhelp = new ModalHelp({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(modalhelp.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalhelp, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalhelp.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalhelp.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalhelp, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(109:0) {#if $ui.showHelpModal}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let nav;
    	let div1;
    	let div0;
    	let svg;
    	let circle;
    	let text_1;
    	let t0;
    	let t1;
    	let nav_transition;
    	let t2;
    	let t3;
    	let if_block2_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*$ui*/ ctx[0].showNav && create_if_block_2$1(ctx);
    	let if_block1 = /*$ui*/ ctx[0].showMenuModal && create_if_block_1$1(ctx);
    	let if_block2 = /*$ui*/ ctx[0].showHelpModal && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			text_1 = svg_element("text");
    			t0 = text$1("i");
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    			attr_dev(circle, "cx", "25");
    			attr_dev(circle, "cy", "25");
    			attr_dev(circle, "r", "22.5");
    			attr_dev(circle, "class", "svelte-1idjqij");
    			add_location(circle, file$1, 62, 16, 2117);
    			attr_dev(text_1, "x", "25");
    			attr_dev(text_1, "y", "40");
    			attr_dev(text_1, "class", "svelte-1idjqij");
    			add_location(text_1, file$1, 63, 16, 2176);
    			attr_dev(svg, "id", "help-icon");
    			attr_dev(svg, "class", "help-icon nav-icon svelte-1idjqij");
    			attr_dev(svg, "width", "45%");
    			attr_dev(svg, "viewBox", "0 0 50 50");
    			add_location(svg, file$1, 61, 12, 2014);
    			attr_dev(div0, "id", "helpButton");
    			attr_dev(div0, "class", "svelte-1idjqij");
    			add_location(div0, file$1, 60, 8, 1899);
    			attr_dev(div1, "class", "helpButton-container svelte-1idjqij");
    			add_location(div1, file$1, 59, 4, 1853);
    			attr_dev(nav, "class", "svelte-1idjqij");
    			add_location(nav, file$1, 57, 0, 1789);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, div1);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, circle);
    			append_dev(svg, text_1);
    			append_dev(text_1, t0);
    			append_dev(nav, t1);
    			if (if_block0) if_block0.m(nav, null);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "mouseover", showHelpOption, false, false, false),
    					listen_dev(div0, "focus", showHelpOption, false, false, false),
    					listen_dev(div0, "click", /*openHelpModal*/ ctx[3], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$ui*/ ctx[0].showNav) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$1(ctx);
    					if_block0.c();
    					if_block0.m(nav, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*$ui*/ ctx[0].showMenuModal) {
    				if (if_block1) {
    					if (dirty & /*$ui*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_1$1(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(t3.parentNode, t3);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*$ui*/ ctx[0].showHelpModal) {
    				if (if_block2) {
    					if (dirty & /*$ui*/ 1) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block$1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!nav_transition) nav_transition = create_bidirectional_transition(nav, fade, {}, true);
    				nav_transition.run(1);
    			});

    			transition_in(if_block1);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			if (!nav_transition) nav_transition = create_bidirectional_transition(nav, fade, {}, false);
    			nav_transition.run(0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (if_block0) if_block0.d();
    			if (detaching && nav_transition) nav_transition.end();
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function showHelpOption() {
    	this.classList.add('inactive');
    }

    function hideHelpOption() {
    	this.classList.remove('inactive');
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let $ui;
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Nav', slots, []);

    	function toggleMenu() {
    		set_store_value(ui, $ui.showMenuModal = !$ui.showMenuModal, $ui);
    	}

    	/* Overlay page modal */
    	function closeModalPage() {
    		set_store_value(ui, $ui.byPage.discover.overlay = false, $ui);
    		set_store_value(ui, $ui.byPage.connect.overlay = false, $ui);
    		set_store_value(ui, $ui.byPage.share.overlay = false, $ui);
    		set_store_value(ui, $ui.byPage.manage.overlay = false, $ui);

    		// Hack to remove components that dont' destroy when changing page state the store
    		if (document.getElementById('new-project')) document.getElementById('new-project').remove();

    		if (document.getElementById('project-overlay')) document.getElementById('project-overlay').remove();
    		if (document.getElementById('stakeholder-overlay')) document.getElementById('stakeholder-overlay').remove();
    	}

    	// Help modal page
    	function openHelpModal() {
    		set_store_value(ui, $ui.showHelpModal = true, $ui);
    		set_store_value(ui, $ui.showNav = true, $ui);
    		document.getElementById('helpButton').style.opacity = "0";
    		console.log('Opening help modal...');
    		console.log($ui);
    	}

    	function closeHelpModal() {
    		set_store_value(ui, $ui.showHelpModal = false, $ui);
    		if ($ui.page === 'home') set_store_value(ui, $ui.showNav = true, $ui);
    		document.getElementById('helpButton').style.opacity = null;
    		console.log('Closing help modal...');
    	}
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Nav> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		ModalMenu,
    		ModalHelp,
    		fade,
    		ui,
    		toggleMenu,
    		closeModalPage,
    		showHelpOption,
    		hideHelpOption,
    		openHelpModal,
    		closeHelpModal,
    		$ui
    	});

    	return [$ui, toggleMenu, closeModalPage, openHelpModal, closeHelpModal];
    }

    class Nav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Nav",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/data/Realm.svelte generated by Svelte v3.46.4 */

    // (1:0) <!-- LOGIN (ANON) COMPONENT AND CONNECTION SETUP---> <script>     import {          app,             initRealm,          loginAnonymous,             connectToMongoAtlas,          connectToCollections,         setupLocalStore,         updateMultiSelect,          addDefaultImages     }
    function create_catch_block$1(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block$1.name,
    		type: "catch",
    		source: "(1:0) <!-- LOGIN (ANON) COMPONENT AND CONNECTION SETUP---> <script>     import {          app,             initRealm,          loginAnonymous,             connectToMongoAtlas,          connectToCollections,         setupLocalStore,         updateMultiSelect,          addDefaultImages     }",
    		ctx
    	});

    	return block;
    }

    // (29:32)   {/await}
    function create_then_block$1(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block$1.name,
    		type: "then",
    		source: "(29:32)   {/await}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <!-- LOGIN (ANON) COMPONENT AND CONNECTION SETUP---> <script>     import {          app,             initRealm,          loginAnonymous,             connectToMongoAtlas,          connectToCollections,         setupLocalStore,         updateMultiSelect,          addDefaultImages     }
    function create_pending_block$1(ctx) {
    	const block = { c: noop, m: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block$1.name,
    		type: "pending",
    		source: "(1:0) <!-- LOGIN (ANON) COMPONENT AND CONNECTION SETUP---> <script>     import {          app,             initRealm,          loginAnonymous,             connectToMongoAtlas,          connectToCollections,         setupLocalStore,         updateMultiSelect,          addDefaultImages     }",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let await_block_anchor;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block$1,
    		then: create_then_block$1,
    		catch: create_catch_block$1,
    		value: 2
    	};

    	handle_promise(/*promise*/ ctx[0](app$1), info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $database;
    	validate_store(database, 'database');
    	component_subscribe($$self, database, $$value => $$invalidate(1, $database = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Realm', slots, []);

    	const promise = async function (app) {
    		await initRealm(app);
    		await loginAnonymous(app);
    		await connectToMongoAtlas(app);
    		await connectToCollections(app);
    		await setupLocalStore(app, $database);
    		await addDefaultImages($database);
    		await updateMultiSelect($database);
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Realm> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		app: app$1,
    		initRealm,
    		loginAnonymous,
    		connectToMongoAtlas,
    		connectToCollections,
    		setupLocalStore,
    		updateMultiSelect,
    		addDefaultImages,
    		database,
    		promise,
    		$database
    	});

    	return [promise];
    }

    class Realm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Realm",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.46.4 */
    const file = "src/App.svelte";

    // (1:0) <!--- MAIN APP COMPONENT--> <script>  import { fade }
    function create_catch_block(ctx) {
    	const block = {
    		c: noop,
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(1:0) <!--- MAIN APP COMPONENT--> <script>  import { fade }",
    		ctx
    	});

    	return block;
    }

    // (24:34)   <Nav/>  <main><!-- Main "Page: section controlled with logic selector -->   {#if      $ui.page === 'home'}
    function create_then_block(ctx) {
    	let nav;
    	let t0;
    	let main;
    	let current_block_type_index;
    	let if_block0;
    	let t1;
    	let realm;
    	let t2;
    	let if_block1_anchor;
    	let current;
    	nav = new Nav({ $$inline: true });

    	const if_block_creators = [
    		create_if_block_1,
    		create_if_block_2,
    		create_if_block_3,
    		create_if_block_4,
    		create_if_block_5,
    		create_if_block_6
    	];

    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*$ui*/ ctx[0].page === 'home') return 0;
    		if (/*$ui*/ ctx[0].page === 'discover') return 1;
    		if (/*$ui*/ ctx[0].page === 'connect') return 2;
    		if (/*$ui*/ ctx[0].page === 'share') return 3;
    		if (/*$ui*/ ctx[0].page === 'join') return 4;
    		if (/*$ui*/ ctx[0].page === 'manage') return 5;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	realm = new Realm({ $$inline: true });
    	let if_block1 = /*$ui*/ ctx[0].page !== 'home' && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			create_component(nav.$$.fragment);
    			t0 = space();
    			main = element("main");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			create_component(realm.$$.fragment);
    			t2 = space();
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();
    			add_location(main, file, 25, 1, 875);
    		},
    		m: function mount(target, anchor) {
    			mount_component(nav, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, main, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(main, null);
    			}

    			insert_dev(target, t1, anchor);
    			mount_component(realm, target, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, if_block1_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index !== previous_block_index) {
    				if (if_block0) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block0 = if_blocks[current_block_type_index];

    					if (!if_block0) {
    						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block0.c();
    					}

    					transition_in(if_block0, 1);
    					if_block0.m(main, null);
    				} else {
    					if_block0 = null;
    				}
    			}

    			if (/*$ui*/ ctx[0].page !== 'home') {
    				if (if_block1) {
    					if (dirty & /*$ui*/ 1) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(nav.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(realm.$$.fragment, local);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(nav.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(realm.$$.fragment, local);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(nav, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(main);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (detaching) detach_dev(t1);
    			destroy_component(realm, detaching);
    			if (detaching) detach_dev(t2);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(if_block1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(24:34)   <Nav/>  <main><!-- Main \\\"Page: section controlled with logic selector -->   {#if      $ui.page === 'home'}",
    		ctx
    	});

    	return block;
    }

    // (32:34) 
    function create_if_block_6(ctx) {
    	let manage;
    	let current;
    	manage = new Manage({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(manage.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(manage, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(manage.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(manage.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(manage, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(32:34) ",
    		ctx
    	});

    	return block;
    }

    // (31:32) 
    function create_if_block_5(ctx) {
    	let join;
    	let current;
    	join = new Join({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(join.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(join, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(join.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(join.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(join, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(31:32) ",
    		ctx
    	});

    	return block;
    }

    // (30:33) 
    function create_if_block_4(ctx) {
    	let share;
    	let current;
    	share = new Share({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(share.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(share, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(share.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(share.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(share, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(30:33) ",
    		ctx
    	});

    	return block;
    }

    // (29:35) 
    function create_if_block_3(ctx) {
    	let connect;
    	let current;
    	connect = new Connect({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(connect.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(connect, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(connect.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(connect.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(connect, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(29:35) ",
    		ctx
    	});

    	return block;
    }

    // (28:36) 
    function create_if_block_2(ctx) {
    	let discover;
    	let current;
    	discover = new Discover({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(discover.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(discover, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(discover.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(discover.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(discover, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(28:36) ",
    		ctx
    	});

    	return block;
    }

    // (27:2) {#if      $ui.page === 'home'}
    function create_if_block_1(ctx) {
    	let home;
    	let current;
    	home = new Home({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(home.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(27:2) {#if      $ui.page === 'home'}",
    		ctx
    	});

    	return block;
    }

    // (36:1) {#if $ui.page !== 'home'}
    function create_if_block(ctx) {
    	let footer;
    	let current;
    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(footer.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(footer, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(footer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(36:1) {#if $ui.page !== 'home'}",
    		ctx
    	});

    	return block;
    }

    // (1:0) <!--- MAIN APP COMPONENT--> <script>  import { fade }
    function create_pending_block(ctx) {
    	const block = {
    		c: noop,
    		m: noop,
    		p: noop,
    		i: noop,
    		o: noop,
    		d: noop
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(1:0) <!--- MAIN APP COMPONENT--> <script>  import { fade }",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let await_block_anchor;
    	let current;

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: false,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 4,
    		blocks: [,,,]
    	};

    	handle_promise(/*promiseContent*/ ctx[1], info);

    	const block = {
    		c: function create() {
    			await_block_anchor = empty();
    			info.block.c();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, await_block_anchor, anchor);
    			info.block.m(target, info.anchor = anchor);
    			info.mount = () => await_block_anchor.parentNode;
    			info.anchor = await_block_anchor;
    			current = true;
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			update_await_block_branch(info, ctx, dirty);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(info.block);
    			current = true;
    		},
    		o: function outro(local) {
    			for (let i = 0; i < 3; i += 1) {
    				const block = info.blocks[i];
    				transition_out(block);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(await_block_anchor);
    			info.block.d(detaching);
    			info.token = null;
    			info = null;
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $user;
    	let $ui;
    	validate_store(user, 'user');
    	component_subscribe($$self, user, $$value => $$invalidate(3, $user = $$value));
    	validate_store(ui, 'ui');
    	component_subscribe($$self, ui, $$value => $$invalidate(0, $ui = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let { queryParams } = $$props;

    	set_store_value(
    		user,
    		$user.isRegistered = queryParams.get('userRegistered') === 'true'
    		? true
    		: false,
    		$user
    	);

    	const promiseContent = getContent();
    	const writable_props = ['queryParams'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('queryParams' in $$props) $$invalidate(2, queryParams = $$props.queryParams);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		Home,
    		Discover,
    		Connect,
    		Share,
    		Join,
    		Manage,
    		Nav,
    		Footer,
    		Realm,
    		user,
    		ui,
    		getContent,
    		getMenuOptions,
    		queryParams,
    		promiseContent,
    		$user,
    		$ui
    	});

    	$$self.$inject_state = $$props => {
    		if ('queryParams' in $$props) $$invalidate(2, queryParams = $$props.queryParams);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$ui, promiseContent, queryParams];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { queryParams: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*queryParams*/ ctx[2] === undefined && !('queryParams' in props)) {
    			console.warn("<App> was created without expected prop 'queryParams'");
    		}
    	}

    	get queryParams() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set queryParams(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const queryParams = new URLSearchParams(window.location.search);

    const app = new App({
    	target: document.body,
    	props: {queryParams}
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
